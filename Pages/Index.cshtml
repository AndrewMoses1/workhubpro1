@page
@model IndexModel
@using workhubpro
@namespace workhubpro.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;    @* This variable is used to retrieve the CSRF token. *@
    ViewData["Title"] = "Home page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Abel&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Carrois+Gothic+SC&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap" rel="stylesheet">
</head>
<body>
    <header>

    </header>

    <main role="main">
                <div class="pre-login-container-xs">
                    <div class="d-flex flex-column">
                        <div class="d-flex">
                            <div>
                                <img class="position-absolute" src="~/media/mainLogo.png">
                                <span class="position-absolute">W</span>
                            </div>
                            <span>workhub.pro</span>
                        </div>
                        <div class="d-flex">
                            <div class="left-side-content-xs">
                                <span>"A CLOUD TASK MANAGER DESIGNED <br /> FOR MODERN DEVELOPMENT TEAMS"</span>
                                <img src="~/media/cartoon.png">
                            </div>
                            <div class="right-side-content-xs d-flex flex-column">
                                <form class="d-flex flex-column" id="LOGIN-FORM-ELEMENT-XS">
                                    <span>Login</span>
                                    <div class="d-flex" id="INPUT-CONTAINER-USERNAME-XS">
                                        <input id="INPUT-ELEMENT-USERNAME-XS" type="text" placeholder="Username">
                                    </div>
                                    <div class="d-flex" id="INPUT-CONTAINER-PASSWORD-XS">
                                        <input id="INPUT-ELEMENT-PASSWORD-XS" type="text" placeholder="Password">
                                    </div>
                                    <button class="d-flex" id="SIGN-IN-ELEMENT-XS" type="submit">Sign in</button>
                                </form>
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                            </div>
                        </div>
                    </div>
                    <span class="login-credentials-xs position-absolute">username: admin &nbsp;&nbsp;&nbsp; password: admin</span>
                </div>
                <div class="post-login-container-xs">
                    <div>
                        <span>Project Task Manager</span>
                        <div class="d-flex">
                            <button class="d-flex">+</button>
                            <div class="d-flex">
                                <img src="~/media/saveButton.png">
                                <span class="d-flex" id="SAVE-BUTTON-XS">Save Changes</span>
                            </div>
                            <div class="d-flex">
                                <img src="~/media/clearButton.jpg">
                                <span class="d-flex">Clear All</span>
                            </div>
                        </div>
                    </div>
                    <div class="task-category-main-container-xs">
                        <span class="urgent-task-text-xs">Urgent</span>
                        <div class="urgent-task-entries-container-xs d-flex flex-column">
                            @if (Model.Entry1 != null) {
                                if (Model.Entry1?[0]?.UrgentStatusTextContent?[0] != null) {
                                    for (int i = 0; i < Model.Entry1?[0]?.UrgentTaskValue?.Count; i++) {
                            <div class="urgent-task-entry-xs d-flex">
                                <div></div>
                                <input class="urgent-task-xs" value="@Model.Entry1?[0]?.UrgentTaskValue?[i]" maxlength="20">
                            </div>
                                    }
                                } else {
                                    <section></section>
                                }
                            }
                        </div>
                        <span class="thisMonth-task-text-xs">This Month</span>
                        <div class="thisMonth-task-entries-container-xs d-flex flex-column">
                            @if (Model.Entry1 != null) {
                                if (Model.Entry1?[0]?.ThisMonthStatusTextContent?[0] != null) {
                                    for (int i = 0; i < Model.Entry1?[0]?.ThisMonthTaskValue?.Count; i++) {
                            <div class="thisMonth-task-entry-xs d-flex">
                                <div></div>
                                <input class="thisMonth-task-xs" value="@Model.Entry1?[0]?.ThisMonthTaskValue?[i]" maxlength="20">
                            </div>
                                    }
                                } else {
                                    <section></section>
                                }
                            }
                        </div>
                        <span class="nextMonth-task-text-xs">Next Month</span>
                        <div class="nextMonth-task-entries-container-xs d-flex flex-column">
                            @if (Model.Entry1 != null) {
                                if (Model.Entry1?[0]?.NextMonthStatusTextContent?[0] != null) {
                                    for (int i = 0; i < Model.Entry1?[0]?.NextMonthTaskValue?.Count; i++) {
                            <div class="nextMonth-task-entry-xs d-flex">
                                <div></div>
                                <input class="nextMonth-task-xs" value="@Model.Entry1?[0]?.NextMonthTaskValue?[i]" maxlength="20">
                            </div>
                                    }
                                } else {
                                    <section></section>
                                }
                            }
                        </div>
                    </div>
                    <div class="remaining-categories-main-container-xs d-flex flex-column">
                        <div class="urgent-remaining-texts-container-xs d-flex">
                            <span class="urgent-team-text-xs d-flex">Team</span>
                            <span class="urgent-status-text-xs d-flex">Status</span>
                            <span class="urgent-description-text-xs d-flex">Description</span>
                            <span class="urgent-progress-text-xs d-flex">Progress</span>
                            <span class="urgent-checkmark-text-xs d-flex">
                                <img src="~/media/checkmarkIcon.png">
                            </span>
                            <span class="urgent-minus-text-xs d-flex">
                                <img src="~/media/minusIcon.png">
                            </span>
                        </div>
                        <div class="urgent-remaining-entries-container-xs d-flex flex-column">
                            @if (Model.Entry1 != null) {
                                if (Model.Entry1?[0]?.UrgentStatusTextContent?[0] != null) {
                                    for (int i = 0; i < Model.Entry1?[0]?.UrgentTaskValue?.Count; i++) {
                            <div class="urgent-remaining-entry-xs d-flex">
                                <div class="urgent-team-xs d-flex">
                                    @if (Model.Entry1?[0]?.UrgentTeamImage1?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.UrgentTeamImage1?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.UrgentTeamImage2?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.UrgentTeamImage2?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.UrgentTeamImage3?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.UrgentTeamImage3?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.UrgentTeamImage4?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.UrgentTeamImage4?[i]">
                                    }
                                </div>
                                <div class="urgent-status-xs d-flex" style="@Model.Entry1?[0]?.UrgentStatusColor?[i]">@Model.Entry1?[0]?.UrgentStatusTextContent?[i]</div>
                                <div class="urgent-description-xs" contenteditable="true">@Model.Entry1?[0]?.UrgentDescriptionTextContent?[i]</div>
                                <div class="urgent-progress-xs d-flex">
                                    <div style="@Model.Entry1?[0]?.UrgentProgressPercentageBackground?[i]"></div>
                                    <input value="@Model.Entry1?[0]?.UrgentProgressPercentageParsed?[i]" maxlength="2">
                                    <span>%</span>
                                </div>
                                <div class="urgent-checkmark-xs d-flex">
                                    <img src="~/media/checkmarkIcon.png">
                                </div>
                                <div class="urgent-minus-xs d-flex">
                                    <img src="~/media/minusIcon.png">
                                </div>
                            </div>
                                    }
                                } else {
                                    <section class='d-flex'>
                                        <span>This section is empty...</span>
                                        <button style="color: red;">click here to add an entry</button>
                                    </section>
                                }
                            }
                        </div>
                        <div class="thisMonth-remaining-texts-container-xs d-flex">
                            <span class="thisMonth-team-text-xs d-flex">Team</span>
                            <span class="thisMonth-status-text-xs d-flex">Status</span>
                            <span class="thisMonth-description-text-xs d-flex">Description</span>
                            <span class="thisMonth-progress-text-xs d-flex">Progress</span>
                            <span class="thisMonth-checkmark-text-xs d-flex">
                                <img src="~/media/checkmarkIcon.png">
                            </span>
                            <span class="thisMonth-minus-text-xs d-flex">
                                <img src="~/media/minusIcon.png">
                            </span>
                        </div>
                        <div class="thisMonth-remaining-entries-container-xs d-flex flex-column">
                            @if (Model.Entry1 != null) {
                                if (Model.Entry1?[0]?.ThisMonthStatusTextContent?[0] != null) {
                                    for (int i = 0; i < Model.Entry1?[0]?.ThisMonthTaskValue?.Count; i++) {
                            <div class="thisMonth-remaining-entry-xs d-flex">
                                <div class="thisMonth-team-xs d-flex">
                                    @if (Model.Entry1?[0]?.ThisMonthTeamImage1?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.ThisMonthTeamImage1?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.ThisMonthTeamImage2?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.ThisMonthTeamImage2?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.ThisMonthTeamImage3?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.ThisMonthTeamImage3?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.ThisMonthTeamImage4?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.ThisMonthTeamImage4?[i]">
                                    }
                                </div>
                                <div class="thisMonth-status-xs d-flex" style="@Model.Entry1?[0]?.ThisMonthStatusColor?[i]">@Model.Entry1?[0]?.ThisMonthStatusTextContent?[i]</div>
                                <div class="thisMonth-description-xs" contenteditable="true">@Model.Entry1?[0]?.ThisMonthDescriptionTextContent?[i]</div>
                                <div class="thisMonth-progress-xs d-flex">
                                    <div style="@Model.Entry1?[0]?.ThisMonthProgressPercentageBackground?[i]"></div>
                                    <input value="@Model.Entry1?[0]?.ThisMonthProgressPercentageParsed?[i]" maxlength="2">
                                    <span>%</span>
                                </div>
                                <div class="thisMonth-checkmark-xs d-flex">
                                    <img src="~/media/checkmarkIcon.png">
                                </div>
                                <div class="thisMonth-minus-xs d-flex">
                                    <img src="~/media/minusIcon.png">
                                </div>
                            </div>
                                    }
                                } else {
                                    <section class='d-flex'>
                                        <span>This section is empty...</span>
                                        <button style="color: teal;">click here to add an entry</button>
                                    </section>
                                }
                            }
                        </div>
                        <div class="nextMonth-remaining-texts-container-xs d-flex">
                            <span class="nextMonth-team-text-xs d-flex">Team</span>
                            <span class="nextMonth-status-text-xs d-flex">Status</span>
                            <span class="nextMonth-description-text-xs d-flex">Description</span>
                            <span class="nextMonth-progress-text-xs d-flex">Progress</span>
                            <span class="nextMonth-checkmark-text-xs d-flex">
                                <img src="~/media/checkmarkIcon.png">
                            </span>
                            <span class="nextMonth-minus-text-xs d-flex">
                                <img src="~/media/minusIcon.png">
                            </span>
                        </div>
                        <div class="nextMonth-remaining-entries-container-xs d-flex flex-column">
                            @if (Model.Entry1 != null) {
                                if (Model.Entry1?[0]?.NextMonthStatusTextContent?[0] != null) {
                                    for (int i = 0; i < Model.Entry1?[0]?.NextMonthTaskValue?.Count; i++) {
                            <div class="nextMonth-remaining-entry-xs d-flex">
                                <div class="nextMonth-team-xs d-flex">
                                    @if (Model.Entry1?[0]?.NextMonthTeamImage1?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.NextMonthTeamImage1?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.NextMonthTeamImage2?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.NextMonthTeamImage2?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.NextMonthTeamImage3?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.NextMonthTeamImage3?[i]">
                                    }
                                    @if (Model.Entry1?[0]?.NextMonthTeamImage4?[i] != null) {
                                        <img src="@Model.Entry1?[0]?.NextMonthTeamImage4?[i]">
                                    }
                                </div>
                                <div class="nextMonth-status-xs d-flex" style="@Model.Entry1?[0]?.NextMonthStatusColor?[i]">@Model.Entry1?[0]?.NextMonthStatusTextContent?[i]</div>
                                <div class="nextMonth-description-xs" contenteditable="true">@Model.Entry1?[0]?.NextMonthDescriptionTextContent?[i]</div>
                                <div class="nextMonth-progress-xs d-flex">
                                    <div style="@Model.Entry1?[0]?.NextMonthProgressPercentageBackground?[i]"></div>
                                    <input value="@Model.Entry1?[0]?.NextMonthProgressPercentageParsed?[i]" maxlength="2">
                                    <span>%</span>
                                </div>
                                <div class="nextMonth-checkmark-xs d-flex">
                                    <img src="~/media/checkmarkIcon.png">
                                </div>
                                <div class="nextMonth-minus-xs d-flex">
                                    <img src="~/media/minusIcon.png">
                                </div>
                            </div>
                                    }
                                } else {
                                    <section class="d-flex">
                                        <span>This section is empty...</span>
                                        <button style="color: rgb(195, 87, 219);">click here to add an entry</button>
                                    </section>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="select-entry-creation-container-xs d-flex d-xl-none">
                    <div class="select-entry-creation-xs d-flex flex-column">
                        <button>Urgent</button>
                        <button>This Month</button>
                        <button>Next Month</button>
                        <button class="d-flex flex-row">Cancel</button>
                    </div>
                    <div class="select-entry-creation-layover-xs d-flex d-xl-none"></div>
                </div>







        <div class="entire-website-container-xl">
            <div class="center-container-xl">
                <img class="pre-login-border-xl" src="~/media/preLoginBorderXl.png">
                <div class="pre-login-container-xl d-flex">
                    <div class="left-side-content-xl d-flex flex-column">
                        <div class="logo-and-slogan-container-xl d-flex flex-column">
                            <div class="d-flex">
                                <div>
                                    <img class="position-absolute" src="~/media/mainLogo.png">
                                    <span class="position-absolute">W</span>
                                </div>
                                <span>workhub.pro</span>
                            </div>
                            <span>"A CLOUD TASK MANAGER DESIGNED <br /> FOR MODERN DEVELOPMENT TEAMS"</span>
                        </div>
                        <img src="~/media/cartoon.png">
                    </div>
                    <div class="right-side-content-xl d-flex flex-column">
                        <form class="position-absolute d-flex flex-column" id="LOGIN-FORM-ELEMENT-XL">
                            <span>Login</span>
                            <div class="d-flex" id="INPUT-CONTAINER-USERNAME-XL">
                                <input id="INPUT-ELEMENT-USERNAME-XL" type="text" placeholder="Username">
                            </div>
                            <div class="d-flex" id="INPUT-CONTAINER-PASSWORD-XL">
                                <input id="INPUT-ELEMENT-PASSWORD-XL" type="text" placeholder="Password">
                            </div>
                            <button class="d-flex" id="SIGN-IN-ELEMENT-XL" type="submit">Sign in</button>
                        </form>
                        <div class="position-absolute"></div>
                        <div class="position-absolute"></div>
                        <div class="position-absolute"></div>
                        <div class="position-absolute"></div>
                    </div>
                </div>
                <div class="post-login-container-xl d-flex flex-column">
                    <div class="d-flex">
                        <div>
                            <img class="position-absolute" src="~/media/mainLogo.png">
                            <span class="position-absolute">W</span>
                        </div>
                    </div>
                    <div class="d-flex">
                        <span>Project Task Manager</span>
                        <div class="d-flex flex-column">
                            <button id="SAVE-BUTTON-XL">Save Changes</button>
                            <div class="d-flex">
                                <button>+</button>
                                <button>Clear All</button>
                            </div>
                            <span class="successful-save-message-xl">Saved Successfully!</span>
                            <span class="failure-save-message-xl">Failed to Save...</span>
                        </div>
                    </div>
                    <div class="d-flex flex-column">
                        <div class="hide-scrollbar-container-xl d-flex flex-column">   @* the 'hide-scrollbar-container-xl' div was added only to allow the scrollbar's overflow-y to be hidden in the parent container *@
                            <div class="one-of-three-containers-xl d-flex flex-column">
                                <div class="d-flex">
                                    <span>Urgent</span>
                                    <div class="d-flex" id="URGENT-TITLE-NAMES-XL">
                                        <span>Team</span>
                                        <span>Status</span>
                                        <span>Description</span>
                                        <span>Progress</span>
                                        <div class="d-flex" id="URGENT-TITLE-CHECKMARKICON-XL">
                                            <img src="~/media/checkmarkIcon.png">
                                        </div>
                                        <div class="d-flex" id="URGENT-TITLE-MINUSICON-XL">
                                            <img src="~/media/minusIcon.png">
                                        </div>
                                    </div>
                                </div>
                                <div class="category-entries-container-xl d-flex flex-column">
                                    @if (Model.Entry1 != null) {
                                        if (Model.Entry1?[0]?.UrgentStatusTextContent?[0] != null) {
                                            for (int i = 0; i < Model.Entry1?[0]?.UrgentTaskValue?.Count; i++) {
                                    <div class="entry-container-xl d-flex" draggable="false">
                                        <div class="entry-rearrange-xl"></div>
                                        <input class="entry-task-xl" value="@Model.Entry1?[0]?.UrgentTaskValue?[i]" maxlength="20">
                                        <div class="entry-team-xl d-flex flex-column">
                                            <div class="container-for-draggable-image-xl d-flex">
                                                @if (Model.Entry1?[0]?.UrgentTeamImage1?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage1?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.UrgentTeamImage2?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage2?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.UrgentTeamImage3?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage3?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.UrgentTeamImage4?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage4?[i]" draggable="true">
                                                }
                                            </div>
                                            <div class="container-for-draggable-image-xl d-flex">
                                                @if (Model.Entry1?[0]?.UrgentTeamImage5?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage5?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.UrgentTeamImage6?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage6?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.UrgentTeamImage7?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage7?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.UrgentTeamImage8?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.UrgentTeamImage8?[i]" draggable="true">
                                                }
                                            </div>
                                        </div>
                                        <div class="entry-status-xl d-flex flex-row" style="@Model.Entry1?[0]?.UrgentStatusColor?[i]">@Model.Entry1?[0]?.UrgentStatusTextContent?[i]</div>
                                        <div class="entry-description-xl d-flex">
                                            <div contenteditable="true">@Model.Entry1?[0]?.UrgentDescriptionTextContent?[i]</div>
                                        </div>
                                        <div class="entry-progress-xl d-flex">
                                            <div class="d-flex">
                                                <div class="d-flex" style="@Model.Entry1?[0]?.UrgentProgressMaxWidth?[i]">
                                                    <textarea class="entry-textarea-xl" style="@Model.Entry1?[0]?.UrgentProgressWidth?[i]"></textarea>
                                                </div>
                                                <span style="@Model.Entry1?[0]?.UrgentProgressCompleteOpacity?[i]">COMPLETE</span>
                                            </div>
                                            <span style="@Model.Entry1?[0]?.UrgentProgressPercentageFontSize?[i]">@Model.Entry1?[0]?.UrgentProgressPercentage?[i]</span>
                                        </div>
                                        <div class="entry-checkmark-xl d-flex">
                                            <img src="~/media/checkmarkIcon.png">
                                        </div>
                                        <div class="entry-minus-xl d-flex">
                                            <img src="~/media/minusIcon.png">
                                        </div>
                                    </div>
                                            }
                                        } else {
                                            <section class="entry-section-xl">
                                                <span>This section is empty...</span>
                                                <button style="color: red;">click here to add an entry</button>
                                            </section>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="one-of-three-containers-xl d-flex flex-column">
                                <div class="d-flex">
                                    <span id="THIS-MONTH-TEXT-XL">This Month</span>
                                    <div class="d-flex" id="THIS-MONTH-TITLE-NAMES-XL">
                                        <span>Team</span>
                                        <span>Status</span>
                                        <span>Description</span>
                                        <span>Progress</span>
                                        <div class="d-flex">
                                            <img src="~/media/checkmarkIcon.png">
                                        </div>
                                        <div class="d-flex">
                                            <img src="~/media/minusIcon.png">
                                        </div>
                                    </div>
                                </div>
                                <div class="category-entries-container-xl d-flex flex-column">
                                    @if (Model.Entry1 != null) {
                                        if (Model.Entry1?[0]?.ThisMonthStatusTextContent?[0] != null) {
                                            for (int i = 0; i < Model.Entry1?[0]?.ThisMonthTaskValue?.Count; i++) {
                                    <div class="entry-container-xl d-flex" draggable="false">
                                        <div class="entry-rearrange-xl"></div>
                                        <input class="entry-task-xl" value="@Model.Entry1?[0]?.ThisMonthTaskValue?[i]" maxlength="20">
                                        <div class="entry-team-xl d-flex flex-column">
                                            <div class="container-for-draggable-image-xl d-flex">
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage1?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage1?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage2?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage2?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage3?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage3?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage4?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage4?[i]" draggable="true">
                                                }
                                            </div>
                                            <div class="container-for-draggable-image-xl d-flex">
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage5?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage5?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage6?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage6?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage7?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage7?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.ThisMonthTeamImage8?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.ThisMonthTeamImage8?[i]" draggable="true">
                                                }
                                            </div>
                                        </div>
                                        <div class="entry-status-xl d-flex" style="@Model.Entry1?[0]?.ThisMonthStatusColor?[i]">@Model.Entry1?[0]?.ThisMonthStatusTextContent?[i]</div>
                                        <div class="entry-description-xl d-flex">
                                            <div contenteditable="true">@Model.Entry1?[0]?.ThisMonthDescriptionTextContent?[i]</div>
                                        </div>
                                        <div class="entry-progress-xl d-flex">
                                            <div class="d-flex">
                                                <div class="d-flex" style="@Model.Entry1?[0]?.ThisMonthProgressMaxWidth?[i]">
                                                    <textarea class="entry-textarea-xl" style="@Model.Entry1?[0]?.ThisMonthProgressWidth?[i]"></textarea>
                                                </div>
                                                <span style="@Model.Entry1?[0]?.ThisMonthProgressCompleteOpacity?[i]">COMPLETE</span>
                                            </div>
                                            <span style="@Model.Entry1?[0]?.ThisMonthProgressPercentageFontSize?[i]">@Model.Entry1?[0]?.ThisMonthProgressPercentage?[i]</span>
                                        </div>
                                        <div class="entry-checkmark-xl d-flex">
                                            <img src="~/media/checkmarkIcon.png">
                                        </div>
                                        <div class="entry-minus-xl d-flex">
                                            <img src="~/media/minusIcon.png">
                                        </div>
                                    </div>
                                            }
                                        } else {
                                            <section class="entry-section-xl">
                                                <span>This section is empty...</span>
                                                <button style="color: teal;">click here to add an entry</button>
                                            </section>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="one-of-three-containers-xl d-flex flex-column">
                                <div class="d-flex">
                                    <span id="NEXT-MONTH-TEXT-XL">Next Month</span>
                                    <div class="d-flex" id="NEXT-MONTH-TITLE-NAMES-XL">
                                        <span>Team</span>
                                        <span>Status</span>
                                        <span>Description</span>
                                        <span>Progress</span>
                                        <div class="d-flex">
                                            <img src="~/media/checkmarkIcon.png">
                                        </div>
                                        <div class="d-flex">
                                            <img src="~/media/minusIcon.png">
                                        </div>
                                    </div>
                                </div>
                                <div class="category-entries-container-xl d-flex flex-column">
                                    @if (Model.Entry1 != null) {
                                        if (Model.Entry1?[0]?.NextMonthStatusTextContent?[0] != null) {
                                            for (int i = 0; i < Model.Entry1?[0]?.NextMonthTaskValue?.Count; i++) {
                                    <div class="entry-container-xl d-flex" draggable="false">
                                        <div class="entry-rearrange-xl"></div>
                                        <input class="entry-task-xl" value="@Model.Entry1?[0]?.NextMonthTaskValue?[i]" maxlength="20">
                                        <div class="entry-team-xl d-flex flex-column">
                                            <div class="container-for-draggable-image-xl d-flex">
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage1?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage1?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage2?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage2?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage3?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage3?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage4?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage4?[i]" draggable="true">
                                                }
                                            </div>
                                            <div class="container-for-draggable-image-xl d-flex">
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage5?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage5?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage6?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage6?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage7?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage7?[i]" draggable="true">
                                                }
                                                @if (Model.Entry1?[0]?.NextMonthTeamImage8?[i] != null) {
                                                    <img class="draggable-image-xl" src="@Model.Entry1?[0]?.NextMonthTeamImage8?[i]" draggable="true">
                                                }
                                            </div>
                                        </div>
                                        <div class="entry-status-xl d-flex" style="@Model.Entry1?[0]?.NextMonthStatusColor?[i]">@Model.Entry1?[0]?.NextMonthStatusTextContent?[i]</div>
                                        <div class="entry-description-xl d-flex">
                                            <div contenteditable="true">@Model.Entry1?[0]?.NextMonthDescriptionTextContent?[i]</div>
                                        </div>
                                        <div class="entry-progress-xl d-flex">
                                            <div class="d-flex">
                                                <div class="d-flex" style="@Model.Entry1?[0]?.NextMonthProgressMaxWidth?[i]">
                                                    <textarea class="entry-textarea-xl" style="@Model.Entry1?[0]?.NextMonthProgressWidth?[i]"></textarea>
                                                </div>
                                                <span style="@Model.Entry1?[0]?.NextMonthProgressCompleteOpacity?[i]">COMPLETE</span>
                                            </div>
                                            <span style="@Model.Entry1?[0]?.NextMonthProgressPercentageFontSize?[i]">@Model.Entry1?[0]?.NextMonthProgressPercentage?[i]</span>
                                        </div>
                                        <div class="entry-checkmark-xl d-flex">
                                            <img src="~/media/checkmarkIcon.png">
                                        </div>
                                        <div class="entry-minus-xl d-flex">
                                            <img src="~/media/minusIcon.png">
                                        </div>
                                    </div>
                                            }
                                        } else {
                                            <section class="entry-section-xl">
                                                <span>This section is empty...</span>
                                                <button style="color: rgb(195, 87, 219);">click here to add an entry</button>
                                            </section>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="designed-text-container-xl d-flex">
                <span>designed with</span>
                <img src="~/media/figmaLogoXl.png">
            </div>
            <div class="drawn-text-container-xl d-flex">
                <span>drawn with</span>
                <img src="~/media/procreateLogoXl.png">
            </div>
            <div class="bg-triangle-xl"></div>
            <div class="bg-radial-gradient-xl"></div>
            <div class="post-login-border-xl"></div>
            <div class="description-layover-xl"></div>
            <div class="select-entry-creation-xl d-flex flex-column">
                <button>Urgent</button>
                <button>This Month</button>
                <button>Next Month</button>
                <button>Cancel</button>
            </div>
            <div class="select-entry-creation-layover-xl"></div>
            <span class="login-credentials-xl position-absolute">username: admin &nbsp;&nbsp;&nbsp; password: admin</span>
        </div>
    </main>
</body>









@if (!string.IsNullOrEmpty(requestToken)) {                                           @* This block of code is used to store the CSRF token in an accessible place for the AJAX's requests. *@
        <input id="REQUEST-VERIFICATION-TOKEN" type=hidden value="@requestToken" />
    }

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>



                                    @* QUICK NOTES ABOUT THE JAVASCRIPT ORGANIZATION AND STRUCTURE *@

            @* BECAUSE BOOTSTRAP IS USED FOR THIS PROJECT, A LOT OF OF THE STRUCTURE IS BUILT AROUND THE BREAKPOINTS 'XS' AND 'XL'.  'XL'
               IS THE BOOTSTRAP WIDTH BREAKPOINT OF 1200PX AND 'XS' REFERS TO ANYTHING LESS THAN THAT (ATLEAST FOR THIS PROJECT).  THIS PROJECT
               IS MOSTLY BROKEN INTO 2 SEGMENTS, WHICH IS ONCE AGAIN THE 'XS' ELEMENTS AND THE 'XL' ELEMENTS.  THE JAVASCRIPT IS ORGANIZED INTO
               NUMERICAL ORDERED BLOCKS THAT EITHER HAVE THE 'ALL', 'XS', OR 'XL' TAGS ALONGSIDE THE NUMBERS.  'ALL' MEANS THAT THE BLOCK CONTAINS
               THINGS RELATED TO ELEMENTS IN ALL SCREEN SIZES.

               GLOBAL VARIABLE NAMES ARE MORE DESCRIPTIVE SO THAT THEY CAN BE UNDERSTOOD MORE EASILY IF THEY ARE USED IN A DIFFERENT BLOCK THAN WHERE
               THEY ARE FIRST INITIALIZED AND JUST SO THEY CAN BE UNDERSTOOD MORE EASILY IN GENERAL BECAUSE A LOT OF THEM SERVE COMPLEX PURPOSES LIKE
               ACTING AS A SWITCH FOR CERTAIN FUNCTIONALITIES (THEY ALSO HAVE THE SCREEN SIZE SUFFIX 'XS' OR 'XL' JUST SO THAT THE USER CAN ALWAYS
               HAVE A POINT OF REFERENCE CLOSE BY OF WHAT THEY ARE LOOKING AT).  LOCAL VARIABLES HAVE MORE BASIC NAMES SO THAT THINGS DON'T GET TOO
               COMPLICATED FOR THE OVERALL PROJECT.  LASTLY, FOR THE 'XS' AND 'XL' CODE BLOCKS, THEY ARE ORGANIZED IN TERMS OF WHEN THEY ARE FIRST
               ENCOUNTERED ON THE SCREEN WHETHER THAT BE IN TERMS OF APPEARANCE (THE LOGIN ELEMENTS COME FIRST BECAUSE THE USER HAS TO LOGIN FIRST TO
               ACCESS THE OTHER PARTS OF THE PROJECT) OR FROM A STANDARD TOP TO BOTTOM, LEFT TO RIGHT STRUCTURE. (ALSO, 2 MORE THINGS TO MENTION ARE
               SOMETIMES A FUNCTION ISN'T USED FOR EVENTLISTENERS FOR THE SAKE OF NOT OVERCOMPLICATING THE CODE AND SOMETIMES A DESCRIPTION IS MISSING
               FROM A BLOCK WHEN IT IS DEEMED TO BE RELATIVELY SELF-EXPLANATORY AND THERE ISN'T MUCH COMPLEXITY TO IT). *@

            @* IN THE BLOCKS OF CODE WHERE NEW ELEMENTS ARE CREATED, THE LETTERS ON THE END REPRESENT THEIR INDENTATION POSITION AND NOT THEIR PARENT 
               GROUPING POSITION SO FOR INSTANCE ANYTHING WITH THE LETTER B WOULD BE 1 TAB FURTHER INDENTED THAN ANYTHING WITH THE LETTER A. *@








@* 1 ALL *@

    function isTheUserUsingATouchDeviceOrNot() {
        return (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
        };

    const touchDeviceOrNotVariable = isTheUserUsingATouchDeviceOrNot();







    let oneTimeResizeAssignmentHasHappenedAlready = true;
    let urgentChildrenAmountXl = 0;
    let thisMonthChildrenAmountXl = 0;
    let urgentChildrenAmountXs = 0;
    let thisMonthChildrenAmountXs = 0;
    let convertPxToVwCalculationNumberXl = 0;
    let theHeightOfWindowXl = window.innerHeight;
    let newScrollVariableXl = 0;
    let xlToXsResize;
    let xsToXlResize;
    
    if (window.innerWidth >= 1200) {
        xlToXsResize = true;
        xsToXlResize = false;
    } else {
        xsToXlResize = true;
        xlToXsResize = false;
    }

    window.addEventListener('resize', () => {
        if (window.innerWidth < 1200) {
            xsToXlResize = true;
            if (xlToXsResize === true) {
                let urgentTaskValueTempXl = [];
                let urgentTeamImage1TempXl = [];
                let urgentTeamImage2TempXl = [];
                let urgentTeamImage3TempXl = [];
                let urgentTeamImage4TempXl = [];
                let urgentStatusTextContentTempXl = [];
                let urgentStatusColorTempXl = [];
                let urgentDescriptionTextContentTempXl = [];
                let urgentProgressPercentageTempXl = [];
                let thisMonthTaskValueTempXl = [];
                let thisMonthTeamImage1TempXl = [];
                let thisMonthTeamImage2TempXl = [];
                let thisMonthTeamImage3TempXl = [];
                let thisMonthTeamImage4TempXl = [];
                let thisMonthStatusTextContentTempXl = [];
                let thisMonthStatusColorTempXl = [];
                let thisMonthDescriptionTextContentTempXl = [];
                let thisMonthProgressPercentageTempXl = [];
                let nextMonthTaskValueTempXl = [];
                let nextMonthTeamImage1TempXl = [];
                let nextMonthTeamImage2TempXl = [];
                let nextMonthTeamImage3TempXl = [];
                let nextMonthTeamImage4TempXl = [];
                let nextMonthStatusTextContentTempXl = [];
                let nextMonthStatusColorTempXl = [];
                let nextMonthDescriptionTextContentTempXl = [];
                let nextMonthProgressPercentageTempXl = [];
                urgentChildrenAmountXl = document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl').children.length;
                thisMonthChildrenAmountXl = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl').children.length;
                urgentChildrenAmountXs = document.querySelector('.urgent-remaining-entries-container-xs').children.length;
                thisMonthChildrenAmountXs = document.querySelector('.thisMonth-remaining-entries-container-xs').children.length;




                let urgentTaskValueElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-task-xl');
                urgentTaskValueTempXl = Array.from(urgentTaskValueElementsXl).map(urgentTaskElementXl => urgentTaskElementXl.value.trim());
                let urgentEntryContainersXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-container-xl');
                urgentEntryContainersXl.forEach(urgentEntryContainerXl => {
                    let urgentTeamFirstImage = urgentEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:first-child');
                    if (urgentTeamFirstImage === null) {
                        urgentTeamImage1TempXl.push(null);
                    } else {
                        urgentTeamImage1TempXl.push(urgentTeamFirstImage.src);
                    }
                    let urgentTeamSecondImage = urgentEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(2)');
                    if (urgentTeamSecondImage === null) {
                        urgentTeamImage2TempXl.push(null);
                    } else {
                        urgentTeamImage2TempXl.push(urgentTeamSecondImage.src);
                    }
                    let urgentTeamThirdImage = urgentEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(3)');
                    if (urgentTeamThirdImage === null) {
                        urgentTeamImage3TempXl.push(null);
                    } else {
                        urgentTeamImage3TempXl.push(urgentTeamThirdImage.src);
                    }
                    let urgentTeamFourthImage = urgentEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(4)');
                    if (urgentTeamFourthImage === null) {
                        urgentTeamImage4TempXl.push(null);
                    } else {
                        urgentTeamImage4TempXl.push(urgentTeamFourthImage.src);
                    }
                });
                let urgentStatusElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-status-xl');
                urgentStatusTextContentTempXl = Array.from(urgentStatusElementsXl).map(urgentStatusElementXl => urgentStatusElementXl.textContent);
                urgentStatusColorTempXl = Array.from(urgentStatusElementsXl).map(urgentStatusElementXl => urgentStatusElementXl.style.background);
                urgentDescriptionElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-description-xl');
                urgentDescriptionTextContentTempXl = Array.from(urgentDescriptionElementsXl).map(urgentDescriptionElementXl => urgentDescriptionElementXl.textContent.trim());
                let urgentProgressElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-progress-xl > span:nth-child(2)');
                urgentProgressPercentageTempXl = Array.from(urgentProgressElementsXl).map(urgentProgressElementXl => parseInt(urgentProgressElementXl.textContent));




                let thisMonthTaskValueElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-task-xl');
                thisMonthTaskValueTempXl = Array.from(thisMonthTaskValueElementsXl).map(thisMonthTaskElementXl => thisMonthTaskElementXl.value);
                let thisMonthEntryContainersXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-container-xl');
                thisMonthEntryContainersXl.forEach(thisMonthEntryContainerXl => {
                    let thisMonthTeamFirstImage = thisMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:first-child');
                    if (thisMonthTeamFirstImage === null) {
                        thisMonthTeamImage1TempXl.push(null);
                    } else {
                        thisMonthTeamImage1TempXl.push(thisMonthTeamFirstImage.src);
                    }
                    let thisMonthTeamSecondImage = thisMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(2)');
                    if (thisMonthTeamSecondImage === null) {
                        thisMonthTeamImage2TempXl.push(null);
                    } else {
                        thisMonthTeamImage2TempXl.push(thisMonthTeamSecondImage.src);
                    }
                    let thisMonthTeamThirdImage = thisMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(3)');
                    if (thisMonthTeamThirdImage === null) {
                        thisMonthTeamImage3TempXl.push(null);
                    } else {
                        thisMonthTeamImage3TempXl.push(thisMonthTeamThirdImage.src);
                    }
                    let thisMonthTeamFourthImage = thisMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(4)');
                    if (thisMonthTeamFourthImage === null) {
                        thisMonthTeamImage4TempXl.push(null);
                    } else {
                        thisMonthTeamImage4TempXl.push(thisMonthTeamFourthImage.src);
                    }
                });
                let thisMonthStatusElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-status-xl');
                thisMonthStatusTextContentTempXl = Array.from(thisMonthStatusElementsXl).map(thisMonthStatusElementXl => thisMonthStatusElementXl.textContent);
                thisMonthStatusColorTempXl = Array.from(thisMonthStatusElementsXl).map(thisMonthStatusElementXl => thisMonthStatusElementXl.style.background);
                thisMonthDescriptionElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-description-xl');
                thisMonthDescriptionTextContentTempXl = Array.from(thisMonthDescriptionElementsXl).map(thisMonthDescriptionElementXl => thisMonthDescriptionElementXl.textContent.trim());
                let thisMonthProgressElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-progress-xl > span:nth-child(2)');
                thisMonthProgressPercentageTempXl = Array.from(thisMonthProgressElementsXl).map(thisMonthProgressElementXl => parseInt(thisMonthProgressElementXl.textContent));




                let nextMonthTaskValueElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-task-xl');
                nextMonthTaskValueTempXl = Array.from(nextMonthTaskValueElementsXl).map(nextMonthTaskElementXl => nextMonthTaskElementXl.value);
                let nextMonthEntryContainersXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-container-xl');
                nextMonthEntryContainersXl.forEach(nextMonthEntryContainerXl => {
                    let nextMonthTeamFirstImage = nextMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:first-child');
                    if (nextMonthTeamFirstImage === null) {
                        nextMonthTeamImage1TempXl.push(null);
                    } else {
                        nextMonthTeamImage1TempXl.push(nextMonthTeamFirstImage.src);
                    }
                    let nextMonthTeamSecondImage = nextMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(2)');
                    if (nextMonthTeamSecondImage === null) {
                        nextMonthTeamImage2TempXl.push(null);
                    } else {
                        nextMonthTeamImage2TempXl.push(nextMonthTeamSecondImage.src);
                    }
                    let nextMonthTeamThirdImage = nextMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(3)');
                    if (nextMonthTeamThirdImage === null) {
                        nextMonthTeamImage3TempXl.push(null);
                    } else {
                        nextMonthTeamImage3TempXl.push(nextMonthTeamThirdImage.src);
                    }
                    let nextMonthTeamFourthImage = nextMonthEntryContainerXl.querySelector('.entry-team-xl > div:first-child > img:nth-child(4)');
                    if (nextMonthTeamFourthImage === null) {
                        nextMonthTeamImage4TempXl.push(null);
                    } else {
                        nextMonthTeamImage4TempXl.push(nextMonthTeamFourthImage.src);
                    }
                });
                let nextMonthStatusElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-status-xl');
                nextMonthStatusTextContentTempXl = Array.from(nextMonthStatusElementsXl).map(nextMonthStatusElementXl => nextMonthStatusElementXl.textContent);
                nextMonthStatusColorTempXl = Array.from(nextMonthStatusElementsXl).map(nextMonthStatusElementXl => nextMonthStatusElementXl.style.background);
                nextMonthDescriptionElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-description-xl');
                nextMonthDescriptionTextContentTempXl = Array.from(nextMonthDescriptionElementsXl).map(nextMonthDescriptionElementXl => nextMonthDescriptionElementXl.textContent.trim());
                let nextMonthProgressElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-progress-xl > span:nth-child(2)');
                nextMonthProgressPercentageTempXl = Array.from(nextMonthProgressElementsXl).map(nextMonthProgressElementXl => parseInt(nextMonthProgressElementXl.textContent));
                






                if (document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl section')) {
                    while (urgentTaskEntriesContainerXs.firstChild) urgentTaskEntriesContainerXs.removeChild(urgentTaskEntriesContainerXs.firstChild);
                    while (urgentRemainingEntriesContainerXs.firstChild) urgentRemainingEntriesContainerXs.removeChild(urgentRemainingEntriesContainerXs.firstChild);
                    let taskSection = document.createElement('section');
                    urgentTaskEntriesContainerXs.appendChild(taskSection);
                    if (touchDeviceOrNotVariable) {
                        taskSection.style.width = '159.17px';
                    };



                    
                    let remainingSection = document.createElement('section');
                    remainingSection.style.display = 'flex';
                    remainingSection.style.flexDirection = 'row';
                    let remainingSectionSpan1A = document.createElement('span');
                    remainingSectionSpan1A.textContent = 'This section is empty...';
                    remainingSection.appendChild(remainingSectionSpan1A);
                    let remainingSectionButton1A = document.createElement('button');
                    remainingSectionButton1A.style.color = 'red';
                    remainingSectionButton1A.textContent = 'click here to add an entry';
                    remainingSectionButton1A.addEventListener('click', addEntryXs);
                    remainingSection.appendChild(remainingSectionButton1A);
                    urgentRemainingEntriesContainerXs.appendChild(remainingSection);
                } else {
                    while (urgentTaskEntriesContainerXs.firstChild) urgentTaskEntriesContainerXs.removeChild(urgentTaskEntriesContainerXs.firstChild);
                    while (urgentRemainingEntriesContainerXs.firstChild) urgentRemainingEntriesContainerXs.removeChild(urgentRemainingEntriesContainerXs.firstChild);
                    for (i = 0; i < urgentTaskValueTempXl.length; i++) {
                        let task = document.createElement('div');
                        task.classList.add('urgent-task-entry-xs');
                        task.style.display = 'flex';
                        task.style.flexDirection = 'row';
                        let taskDiv1A = document.createElement('div');
                        task.appendChild(taskDiv1A);
                        let taskInput1A = document.createElement('input');
                        taskInput1A.classList.add('urgent-task-xs');
                        taskInput1A.maxLength = 20;
                        taskInput1A.value = urgentTaskValueTempXl[i];
                        task.appendChild(taskInput1A);
                        urgentTaskEntriesContainerXs.appendChild(task);




                        let remaining = document.createElement('div');
                        remaining.classList.add('urgent-remaining-entry-xs');
                        remaining.style.display = 'flex';
                        remaining.style.flexDirection = 'row';
                        let team = document.createElement('div');
                        team.classList.add('urgent-team-xs');
                        team.style.display = 'flex';
                        team.style.flexDirection = 'row';
                        team.addEventListener('touchstart', (event) => {
                            event.preventDefault();
                            if (containerForImagesIsBeingClickedSwitchXs === true) {
                                addImageToContainerAllCategoriesXs(team);
                            };
                        }); 
                        team.addEventListener('mousedown', (event) => {
                            event.preventDefault();
                            if (containerForImagesIsBeingClickedSwitchXs === true) {
                                addImageToContainerAllCategoriesXs(team);
                            };
                        });
                        if (urgentTeamImage1TempXl[i]) {
                            let teamImage1A = document.createElement('img');
                            teamImage1A.style.display = 'flex';
                            teamImage1A.style.flexDirection = 'row';
                            teamImage1A.src = urgentTeamImage1TempXl[i];
                            teamImage1A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage1A.src;
                                let parentElement = teamImage1A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage1A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                                }, 1000);
                            });
                            teamImage1A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage1A.src;
                                let parentElement = teamImage1A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage1A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                                }, 1000);
                            });
                            teamImage1A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage1A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage1A);
                        };
                        if (urgentTeamImage2TempXl[i]) {
                            let teamImage2A = document.createElement('img');
                            teamImage2A.style.display = 'flex';
                            teamImage2A.style.flexDirection = 'row';
                            teamImage2A.src = urgentTeamImage2TempXl[i];
                            teamImage2A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage2A.src;
                                let parentElement = teamImage2A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage2A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage2A);
                                }, 1000);
                            });
                            teamImage2A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage2A.src;
                                let parentElement = teamImage2A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage2A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage2A);
                                }, 1000);
                            });
                            teamImage2A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage2A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage2A);
                        };
                        if (urgentTeamImage3TempXl[i]) {
                            let teamImage3A = document.createElement('img');
                            teamImage3A.style.display = 'flex';
                            teamImage3A.style.flexDirection = 'row';
                            teamImage3A.src = urgentTeamImage3TempXl[i];
                            teamImage3A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage3A.src;
                                let parentElement = teamImage3A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage3A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage3A);
                                }, 1000);
                            });
                            teamImage3A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage3A.src;
                                let parentElement = teamImage3A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage3A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage3A);
                                }, 1000);
                            });
                            teamImage3A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage3A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage3A);
                        };
                        if (urgentTeamImage4TempXl[i]) {
                            let teamImage4A = document.createElement('img');
                            teamImage4A.style.display = 'flex';
                            teamImage4A.style.flexDirection = 'row';
                            teamImage4A.src = urgentTeamImage4TempXl[i];
                            teamImage4A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage4A.src;
                                let parentElement = teamImage4A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage4A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage4A);
                                }, 1000);
                            });
                            teamImage4A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage4A.src;
                                let parentElement = teamImage4A.closest('.urgent-team-xs');
                                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                letavailablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage4A.src = availablePath;
                                    const pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage4A);
                                }, 1000);
                            });
                            teamImage4A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage4A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage4A);
                        };
                        remaining.appendChild(team);




                        let status = document.createElement('div');
                        status.classList.add('urgent-status-xs');
                        status.textContent = urgentStatusTextContentTempXl[i];
                        status.style.display = 'flex';
                        status.style.flexDirection = 'row';
                        if (status.textContent === 'in progress...') {
                            status.style.color = 'white';
                        } else if (status.textContent === 'reviewing...') {
                            status.style.color = 'black';
                        } else if (status.textContent === 'need help...') {
                            status.style.color = 'white';
                        };
                        status.style.background = urgentStatusColorTempXl[i];
                        status.addEventListener('click', () => {
                            if (status.textContent === 'in progress...') {
                                status.textContent = 'reviewing...';
                                status.style.color = 'black';
                                status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                            } else if (status.textContent === 'reviewing...') {
                                status.textContent = 'need help...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                            } else if (status.textContent === 'need help...') {
                                status.textContent = 'in progress...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                            };
                        });
                        remaining.appendChild(status);




                        let description = document.createElement('div');
                        description.classList.add('urgent-description-xs');
                        description.textContent = urgentDescriptionTextContentTempXl[i];
                        description.style.display = 'flex';
                        description.style.flexDirection = 'row';
                        description.contentEditable = true;
                        remaining.appendChild(description);




                        let progress = document.createElement('div');
                        progress.classList.add('urgent-progress-xs');
                        progress.style.display = 'flex';
                        progress.style.flexDirection = 'row';
                        let progressDiv1A = document.createElement('div');
                        progressDiv1A.style.background = `linear-gradient(to right, purple ${urgentProgressPercentageTempXl[i]}%, transparent ${urgentProgressPercentageTempXl[i]}%, transparent 100%)`;
                        progress.appendChild(progressDiv1A);
                        let progressInput1A = document.createElement('input');
                        progressInput1A.maxLength = 2;
                        progressInput1A.value = urgentProgressPercentageTempXl[i];
                        progressInput1A.addEventListener('blur', () => {
                            let value = Number(progressInput1A.value);
                            if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                                progressInput1A.value = 14;
                                progressInput1A.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
                            } else {
                                progressInput1A.previousElementSibling.style.background = `linear-gradient(to right, purple ${progressInput1A.value}%, transparent ${progressInput1A.value}%, transparent 100%)`;
                            };
                        });
                        progress.appendChild(progressInput1A);
                        let progressSpan1A = document.createElement('span');
                        progressSpan1A.textContent = '%';
                        progress.appendChild(progressSpan1A);
                        if (progressInput1A.value === '100') {
                            let closestProgressBar = progressInput1A.closest('.urgent-progress-xs').children[0];
                            let closestProgressPercentage = progressInput1A.closest('.urgent-progress-xs').children[1];
                            let closestProgressPercentageSign = progressInput1A.closest('.urgent-progress-xs').children[2];
                            closestProgressBar.innerHTML = 'COMPLETE';
                            closestProgressBar.style.transition = 'color .5s, background .5s';
                            closestProgressBar.style.color = 'white';
                            closestProgressBar.style.background = 'purple';
                            closestProgressPercentageSign.style.fontSize = '20px';
                            progressInput1A.maxLength = 3;
                            progressInput1A.style.width = '37px';
                            progressInput1A.style.marginLeft = '8px';
                            progressInput1A.style.fontSize = '20px';
                            progressInput1A.style.color = 'black';
                            progressInput1A.style.opacity = '1';
                            progressInput1A.style.cursor = 'default';
                            progressInput1A.disabled = true;
                        };
                        remaining.appendChild(progress);




                        let checkmark = document.createElement('div');
                        checkmark.classList.add('urgent-checkmark-xs');
                        checkmark.style.display = 'flex';
                        checkmark.style.flexDirection = 'row';
                        let checkmarkImage1A = document.createElement('img');
                        checkmarkImage1A.src = 'media/checkmarkIcon.png';
                        checkmarkImage1A.addEventListener('click', () => {
                            let closestProgressBar = checkmarkImage1A.closest('.urgent-checkmark-xs').previousElementSibling.children[0];
                            let closestProgressPercentage = checkmarkImage1A.closest('.urgent-checkmark-xs').previousElementSibling.children[1];
                            let closestProgressPercentageSign = checkmarkImage1A.closest('.urgent-checkmark-xs').previousElementSibling.children[2];
                            closestProgressBar.innerHTML = 'COMPLETE';
                            closestProgressBar.style.transition = 'color .5s, background .5s';
                            closestProgressBar.style.color = 'white';
                            closestProgressBar.style.background = 'purple';
                            closestProgressPercentage.maxLength = 3;
                            closestProgressPercentage.value = 100;
                            closestProgressPercentage.style.width = '37px';
                            closestProgressPercentage.style.marginLeft = '8px';
                            closestProgressPercentage.style.fontSize = '20px';
                            closestProgressPercentage.style.color = 'black';
                            closestProgressPercentage.style.opacity = '1';
                            closestProgressPercentageSign.style.fontSize = '20px';
                            closestProgressPercentage.disabled = true;
                        });
                        checkmark.appendChild(checkmarkImage1A);
                        remaining.appendChild(checkmark);




                        let minus = document.createElement('div');
                        minus.classList.add('urgent-minus-xs');
                        minus.style.display = 'flex';
                        minus.style.flexDirection = 'row';
                        let minusImage1A = document.createElement('img');
                        minusImage1A.src = "media/minusIcon.png";
                        minusImage1A.addEventListener('click', () => {
                            let urgentRemainingEntryContainer = minusImage1A.closest('.urgent-remaining-entry-xs');
                            let urgentRemainingEntriesContainerChildren = Array.from(urgentRemainingEntriesContainerXs.children);
                            let urgentRemainingEntryIndex = urgentRemainingEntriesContainerChildren.indexOf(urgentRemainingEntryContainer);
                            thisMonthRemainingTextsContainerRectTopXs = thisMonthRemainingTextsContainerRectTopXs - 45;
                            nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs - 45;
                            urgentRemainingEntryContainer.remove();
                            let urgentTaskEntryContainer = urgentTaskEntriesContainerXs.children[urgentRemainingEntryIndex];
                            urgentTaskEntriesContainerXs.removeChild(urgentTaskEntryContainer);
                            if (urgentTaskEntriesContainerXs.children.length === 0) {
                                let section = document.createElement('section');
                                urgentTaskEntriesContainerXs.appendChild(section);
                                if (touchDeviceOrNotVariable) {
                                    section.style.width = '159.17px';
                                };
                            };
                            if (urgentRemainingEntriesContainerXs.children.length === 0) {
                                let section = document.createElement('section');
                                section.style.display = 'flex';
                                section.style.flexDirection = 'row';
                                let sectionSpan1A = document.createElement('span');
                                sectionSpan1A.textContent = 'This section is empty...';
                                section.appendChild(sectionSpan1A);
                                let sectionButton1A = document.createElement('button');
                                sectionButton1A.style.color = 'red';
                                sectionButton1A.textContent = 'click here to add an entry';
                                sectionButton1A.addEventListener('click', addEntryXs);
                                section.appendChild(sectionButton1A);
                                urgentRemainingEntriesContainerXs.appendChild(section);
                            };
                        });
                        minus.appendChild(minusImage1A);
                        remaining.appendChild(minus);
                        urgentRemainingEntriesContainerXs.appendChild(remaining);
                    };
                };








                if (document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl section')) {
                    while (thisMonthTaskEntriesContainerXs.firstChild) thisMonthTaskEntriesContainerXs.removeChild(thisMonthTaskEntriesContainerXs.firstChild);
                    while (thisMonthRemainingEntriesContainerXs.firstChild) thisMonthRemainingEntriesContainerXs.removeChild(thisMonthRemainingEntriesContainerXs.firstChild);
                    let taskSection = document.createElement('section');
                    thisMonthTaskEntriesContainerXs.appendChild(taskSection);
                    if (touchDeviceOrNotVariable) {
                        taskSection.style.width = '159.17px';
                    };




                    let remainingSection = document.createElement('section');
                    remainingSection.style.display = 'flex';
                    remainingSection.style.flexDirection = 'row';
                    let remainingSectionSpan1A = document.createElement('span');
                    remainingSectionSpan1A.textContent = 'This section is empty...';
                    remainingSection.appendChild(remainingSectionSpan1A);
                    let remainingSectionButton1A = document.createElement('button');
                    remainingSectionButton1A.style.color = 'teal';
                    remainingSectionButton1A.textContent = 'click here to add an entry';
                    remainingSectionButton1A.addEventListener('click', addEntryXs);
                    remainingSection.appendChild(remainingSectionButton1A);
                    thisMonthRemainingEntriesContainerXs.appendChild(remainingSection);
                } else {
                    while (thisMonthTaskEntriesContainerXs.firstChild) thisMonthTaskEntriesContainerXs.removeChild(thisMonthTaskEntriesContainerXs.firstChild);
                    while (thisMonthRemainingEntriesContainerXs.firstChild) thisMonthRemainingEntriesContainerXs.removeChild(thisMonthRemainingEntriesContainerXs.firstChild);
                    for (i = 0; i < thisMonthTaskValueTempXl.length; i++) {
                        let task = document.createElement('div');
                        task.classList.add('thisMonth-task-entry-xs');
                        task.style.display = 'flex';
                        task.style.flexDirection = 'row';
                        let taskDiv1A = document.createElement('div');
                        task.appendChild(taskDiv1A);
                        let taskInput1A = document.createElement('input');
                        taskInput1A.classList.add('thisMonth-task-xs');
                        taskInput1A.maxLength = 20;
                        taskInput1A.value = thisMonthTaskValueTempXl[i];
                        task.appendChild(taskInput1A);
                        thisMonthTaskEntriesContainerXs.appendChild(task);




                        let remaining = document.createElement('div');
                        remaining.classList.add('thisMonth-remaining-entry-xs');
                        remaining.style.display = 'flex';
                        remaining.style.flexDirection = 'row';
                        let team = document.createElement('div');
                        team.classList.add('thisMonth-team-xs');
                        team.style.display = 'flex';
                        team.style.flexDirection = 'row';
                        team.addEventListener('touchstart', (event) => {
                            event.preventDefault();
                            if (containerForImagesIsBeingClickedSwitchXs === true) {
                                addImageToContainerAllCategoriesXs(team);
                            };
                        }); 
                        team.addEventListener('mousedown', (event) => {
                            event.preventDefault();
                            if (containerForImagesIsBeingClickedSwitchXs === true) {
                                addImageToContainerAllCategoriesXs(team);
                            };
                        });
                        if (thisMonthTeamImage1TempXl[i]) {
                            let teamImage1A = document.createElement('img');
                            teamImage1A.style.display = 'flex';
                            teamImage1A.style.flexDirection = 'row';
                            teamImage1A.src = thisMonthTeamImage1TempXl[i];
                            teamImage1A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage1A.src;
                                let parent = teamImage1A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage1A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                                }, 1000);
                            });
                            teamImage1A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage1A.src;
                                let parent = teamImage1A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage1A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                                }, 1000);
                            });
                            teamImage1A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage1A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage1A);
                        };
                        if (thisMonthTeamImage2TempXl[i]) {
                            let teamImage2A = document.createElement('img');
                            teamImage2A.style.display = 'flex';
                            teamImage2A.style.flexDirection = 'row';
                            teamImage2A.src = thisMonthTeamImage2TempXl[i];
                            teamImage2A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage2A.src;
                                let parent = teamImage2A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage2A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage2A);
                                }, 1000);
                            });
                            teamImage2A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage2A.src;
                                let parent = teamImage2A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage2A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage2A);
                                }, 1000);
                            });
                            teamImage2A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage2A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage2A);
                        };
                        if (thisMonthTeamImage3TempXl[i]) {
                            let teamImage3A = document.createElement('img');
                            teamImage3A.style.display = 'flex';
                            teamImage3A.style.flexDirection = 'row';
                            teamImage3A.src = thisMonthTeamImage3TempXl[i];
                            teamImage3A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage3A.src;
                                let parent = teamImage3A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage3A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage3A);
                                }, 1000);
                            });
                            teamImage3A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage3A.src;
                                let parent = teamImage3A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage3A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage3A);
                                }, 1000);
                            });
                            teamImage3A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage3A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage3A);
                        };
                        if (thisMonthTeamImage4TempXl[i]) {
                            let teamImage4A = document.createElement('img');
                            teamImage4A.style.display = 'flex';
                            teamImage4A.style.flexDirection = 'row';
                            teamImage4A.src = thisMonthTeamImage4TempXl[i];
                            teamImage4A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage4A.src;
                                let parent = teamImage4A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage4A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage4A);
                                }, 1000);
                            });
                            teamImage4A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage4A.src;
                                let parent = teamImage4A.closest('.thisMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage4A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage4A);
                                }, 1000);
                            });
                            teamImage4A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage4A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage4A);
                        };
                        remaining.appendChild(team);
                        let status = document.createElement('div');
                        status.classList.add('thisMonth-status-xs');
                        status.textContent = thisMonthStatusTextContentTempXl[i];
                        status.style.display = 'flex';
                        status.style.flexDirection = 'row';
                        if (status.textContent === 'in progress...') {
                            status.style.color = 'white';
                        } else if (status.textContent === 'reviewing...') {
                            status.style.color = 'black';
                        } else if (status.textContent === 'need help...') {
                            status.style.color = 'white';
                        };
                        status.style.background = thisMonthStatusColorTempXl[i];
                        status.addEventListener('click', () => {
                            if (status.textContent === 'in progress...') {
                                status.textContent = 'reviewing...';
                                status.style.color = 'black';
                                status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                            } else if (status.textContent === 'reviewing...') {
                                status.textContent = 'need help...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                            } else if (status.textContent === 'need help...') {
                                status.textContent = 'in progress...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                            };
                        });
                        remaining.appendChild(status);
                        let description = document.createElement('div');
                        description.classList.add('thisMonth-description-xs');
                        description.textContent = thisMonthDescriptionTextContentTempXl[i];
                        description.style.display = 'flex';
                        description.style.flexDirection = 'row';
                        description.contentEditable = true;
                        remaining.appendChild(description);
                        let progress = document.createElement('div');
                        progress.classList.add('thisMonth-progress-xs');
                        progress.style.display = 'flex';
                        progress.style.flexDirection = 'row';
                        let progressDiv1A = document.createElement('div');
                        progressDiv1A.style.background = `linear-gradient(to right, purple ${thisMonthProgressPercentageTempXl[i]}%, transparent ${thisMonthProgressPercentageTempXl[i]}%, transparent 100%)`;
                        progress.appendChild(progressDiv1A);
                        let progressInput1A = document.createElement('input');
                        progressInput1A.maxLength = 2;
                        progressInput1A.value = thisMonthProgressPercentageTempXl[i];
                        progressInput1A.addEventListener('blur', () => {
                            let value = Number(progressInput1A.value);
                            if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                                progressInput1A.value = 14;
                                progressInput1A.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
                            } else {
                                progressInput1A.previousElementSibling.style.background = `linear-gradient(to right, purple ${progressInput1A.value}%, transparent ${progressInput1A.value}%, transparent 100%)`;
                            };
                        });
                        progress.appendChild(progressInput1A);
                        let progressSpan1A = document.createElement('span');
                        progressSpan1A.textContent = '%';
                        progress.appendChild(progressSpan1A);
                        if (progressInput1A.value === '100') {
                            let closestProgressBar = progressInput1A.closest('.thisMonth-progress-xs').children[0];
                            let closestProgressPercentage = progressInput1A.closest('.thisMonth-progress-xs').children[1];
                            let closestProgressPercentageSign = progressInput1A.closest('.thisMonth-progress-xs').children[2];
                            closestProgressBar.innerHTML = 'COMPLETE';
                            closestProgressBar.style.transition = 'color .5s, background .5s';
                            closestProgressBar.style.color = 'white';
                            closestProgressBar.style.background = 'purple';
                            closestProgressPercentageSign.style.fontSize = '20px';
                            progressInput1A.maxLength = 3;
                            progressInput1A.style.width = '37px';
                            progressInput1A.style.marginLeft = '8px';
                            progressInput1A.style.fontSize = '20px';
                            progressInput1A.style.color = 'black';
                            progressInput1A.style.opacity = '1';
                            progressInput1A.style.cursor = 'default';
                            progressInput1A.disabled = true;
                        };
                        remaining.appendChild(progress);
                        let checkmark = document.createElement('div');
                        checkmark.classList.add('thisMonth-checkmark-xs');
                        checkmark.style.display = 'flex';
                        checkmark.style.flexDirection = 'row';
                        let checkmarkImage1A = document.createElement('img');
                        checkmarkImage1A.src = 'media/checkmarkIcon.png';
                        checkmarkImage1A.addEventListener('click', () => {
                            let closestProgressBar = checkmarkImage1A.closest('.thisMonth-checkmark-xs').previousElementSibling.children[0];
                            let closestProgressPercentage = checkmarkImage1A.closest('.thisMonth-checkmark-xs').previousElementSibling.children[1];
                            let closestProgressPercentageSign = checkmarkImage1A.closest('.thisMonth-checkmark-xs').previousElementSibling.children[2];
                            closestProgressBar.innerHTML = 'COMPLETE';
                            closestProgressBar.style.transition = 'color .5s, background .5s';
                            closestProgressBar.style.color = 'white';
                            closestProgressBar.style.background = 'purple';
                            closestProgressPercentage.maxLength = 3;
                            closestProgressPercentage.value = 100;
                            closestProgressPercentage.style.width = '37px';
                            closestProgressPercentage.style.marginLeft = '8px';
                            closestProgressPercentage.style.fontSize = '20px';
                            closestProgressPercentage.style.color = 'black';
                            closestProgressPercentage.style.opacity = '1';
                            closestProgressPercentageSign.style.fontSize = '20px';
                            closestProgressPercentage.disabled = true;
                        });
                        checkmark.appendChild(checkmarkImage1A);
                        remaining.appendChild(checkmark);
                        let minus = document.createElement('div');
                        minus.classList.add('thisMonth-minus-xs');
                        minus.style.display = 'flex';
                        minus.style.flexDirection = 'row';
                        let minusImage1A = document.createElement('img');
                        minusImage1A.src = "media/minusIcon.png";
                        minusImage1A.addEventListener('click', () => {
                            let thisMonthRemainingEntryContainer = minusImage1A.closest('.thisMonth-remaining-entry-xs');
                            let thisMonthRemainingEntriesContainerChildren = Array.from(thisMonthRemainingEntriesContainerXs.children);
                            let thisMonthRemainingEntryIndex = thisMonthRemainingEntriesContainerChildren.indexOf(thisMonthRemainingEntryContainer);
                            nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs - 45;
                            thisMonthRemainingEntryContainer.remove();
                            let thisMonthTaskEntryContainer = thisMonthTaskEntriesContainerXs.children[thisMonthRemainingEntryIndex];
                            thisMonthTaskEntriesContainerXs.removeChild(thisMonthTaskEntryContainer);
                            if (thisMonthTaskEntriesContainerXs.children.length === 0) {
                                let section = document.createElement('section');
                                thisMonthTaskEntriesContainerXs.appendChild(section);
                                if (touchDeviceOrNotVariable) {
                                    section.style.width = '159.17px';
                                };
                            };
                            if (thisMonthRemainingEntriesContainerXs.children.length === 0) {
                                let section = document.createElement('section');
                                section.style.display = 'flex';
                                section.style.flexDirection = 'row';
                                let sectionSpan1A = document.createElement('span');
                                sectionSpan1A.textContent = 'This section is empty...';
                                section.appendChild(sectionSpan1A);
                                let sectionButton1A = document.createElement('button');
                                sectionButton1A.style.color = 'teal';
                                sectionButton1A.textContent = 'click here to add an entry';
                                sectionButton1A.addEventListener('click', addEntryXs);
                                section.appendChild(sectionButton1A);
                                thisMonthRemainingEntriesContainerXs.appendChild(section);
                            };
                        });
                        minus.appendChild(minusImage1A);
                        remaining.appendChild(minus);
                        thisMonthRemainingEntriesContainerXs.appendChild(remaining);
                    };
                };








                if (document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) .category-entries-container-xl section')) {
                    while (nextMonthTaskEntriesContainerXs.firstChild) nextMonthTaskEntriesContainerXs.removeChild(nextMonthTaskEntriesContainerXs.firstChild);
                    while (nextMonthRemainingEntriesContainerXs.firstChild) nextMonthRemainingEntriesContainerXs.removeChild(nextMonthRemainingEntriesContainerXs.firstChild);
                    let taskSection = document.createElement('section');
                    nextMonthTaskEntriesContainerXs.appendChild(taskSection);
                    if (touchDeviceOrNotVariable) {
                        taskSection.style.width = '159.17px';
                    };




                    let remainingSection = document.createElement('section');
                    remainingSection.style.display = 'flex';
                    remainingSection.style.flexDirection = 'row';
                    let remainingSectionSpan1A = document.createElement('span');
                    remainingSectionSpan1A.textContent = 'This section is empty...';
                    remainingSection.appendChild(remainingSectionSpan1A);
                    let remainingSectionButton1A = document.createElement('button');
                    remainingSectionButton1A.style.color = 'rgb(195, 87, 219)';
                    remainingSectionButton1A.textContent = 'click here to add an entry';
                    remainingSectionButton1A.addEventListener('click', addEntryXs);
                    remainingSection.appendChild(remainingSectionButton1A);
                    nextMonthRemainingEntriesContainerXs.appendChild(remainingSection);
                } else {
                    while (nextMonthTaskEntriesContainerXs.firstChild) nextMonthTaskEntriesContainerXs.removeChild(nextMonthTaskEntriesContainerXs.firstChild);
                    while (nextMonthRemainingEntriesContainerXs.firstChild) nextMonthRemainingEntriesContainerXs.removeChild(nextMonthRemainingEntriesContainerXs.firstChild);
                    for (i = 0; i < nextMonthTaskValueTempXl.length; i++) {
                        let task = document.createElement('div');
                        task.classList.add('nextMonth-task-entry-xs');
                        task.style.display = 'flex';
                        task.style.flexDirection = 'row';
                        let taskDiv1A = document.createElement('div');
                        task.appendChild(taskDiv1A);
                        let taskInput1A = document.createElement('input');
                        taskInput1A.classList.add('nextMonth-task-xs');
                        taskInput1A.maxLength = 20;
                        taskInput1A.value = nextMonthTaskValueTempXl[i];
                        task.appendChild(taskInput1A);
                        nextMonthTaskEntriesContainerXs.appendChild(task);




                        let remaining = document.createElement('div');
                        remaining.classList.add('nextMonth-remaining-entry-xs');
                        remaining.style.display = 'flex';
                        remaining.style.flexDirection = 'row';
                        let team = document.createElement('div');
                        team.classList.add('nextMonth-team-xs');
                        team.style.display = 'flex';
                        team.style.flexDirection = 'row';
                        team.addEventListener('touchstart', (event) => {
                            event.preventDefault();
                            if (containerForImagesIsBeingClickedSwitchXs === true) {
                                addImageToContainerAllCategoriesXs(team);
                            };
                        }); 
                        team.addEventListener('mousedown', (event) => {
                            event.preventDefault();
                            if (containerForImagesIsBeingClickedSwitchXs === true) {
                                addImageToContainerAllCategoriesXs(team);
                            };
                        });
                        if (nextMonthTeamImage1TempXl[i]) {
                            let teamImage1A = document.createElement('img');
                            teamImage1A.style.display = 'flex';
                            teamImage1A.style.flexDirection = 'row';
                            teamImage1A.src = nextMonthTeamImage1TempXl[i];
                            teamImage1A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage1A.src;
                                let parent = teamImage1A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage1A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                                }, 1000);
                            });
                            teamImage1A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage1A.src;
                                let parent = teamImage1A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage1A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                                }, 1000);
                            });
                            teamImage1A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage1A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage1A);
                        };
                        if (nextMonthTeamImage2TempXl[i]) {
                            let teamImage2A = document.createElement('img');
                            teamImage2A.style.display = 'flex';
                            teamImage2A.style.flexDirection = 'row';
                            teamImage2A.src = nextMonthTeamImage2TempXl[i];
                            teamImage2A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage2A.src;
                                let parent = teamImage2A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage2A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage2A);
                                }, 1000);
                            });
                            teamImage2A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage2A.src;
                                let parent = teamImage2A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage2A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage2A);
                                }, 1000);
                            });
                            teamImage2A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage2A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage2A);
                        };
                        if (nextMonthTeamImage3TempXl[i]) {
                            let teamImage3A = document.createElement('img');
                            teamImage3A.style.display = 'flex';
                            teamImage3A.style.flexDirection = 'row';
                            teamImage3A.src = nextMonthTeamImage3TempXl[i];
                            teamImage3A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage3A.src;
                                let parent = teamImage3A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage3A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage3A);
                                }, 1000);
                            });
                            teamImage3A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage3A.src;
                                let parent = teamImage3A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage3A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage3A);
                                }, 1000);
                            });
                            teamImage3A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage3A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage3A);
                        };
                        if (nextMonthTeamImage4TempXl[i]) {
                            let teamImage4A = document.createElement('img');
                            teamImage4A.style.display = 'flex';
                            teamImage4A.style.flexDirection = 'row';
                            teamImage4A.src = nextMonthTeamImage4TempXl[i];
                            teamImage4A.addEventListener('touchstart', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage4A.src;
                                let parent = teamImage4A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage4A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage4A);
                                }, 1000);
                            });
                            teamImage4A.addEventListener('mousedown', (event) => {
                                event.preventDefault();
                                containerForImagesIsBeingClickedSwitchXs = false;
                                let tempPath = teamImage4A.src;
                                let parent = teamImage4A.closest('.nextMonth-team-xs');
                                let existingImages = Array.from(parent.getElementsByTagName('img'));
                                let existingImagesSrcs = existingImages.map(img => img.src);
                                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                                if (availablePath) {
                                    teamImage4A.src = availablePath;
                                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                                    allCategoryTeamImagePaths.push(tempPath);
                                };
                                setTimeout(() => {
                                    containerForImagesIsBeingClickedSwitchXs = true;
                                }, 200);
                                removalTimeoutXs = setTimeout(() => {
                                    removeImageFromContainerAllCategoriesXs(teamImage4A);
                                }, 1000);
                            });
                            teamImage4A.addEventListener('touchend', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            teamImage4A.addEventListener('mouseup', () => {
                                clearTimeout(removalTimeoutXs); 
                            });
                            team.appendChild(teamImage4A);
                        };
                        remaining.appendChild(team);
                        let status = document.createElement('div');
                        status.classList.add('nextMonth-status-xs');
                        status.textContent = nextMonthStatusTextContentTempXl[i];
                        status.style.display = 'flex';
                        status.style.flexDirection = 'row';
                        if (status.textContent === 'in progress...') {
                            status.style.color = 'white';
                        } else if (status.textContent === 'reviewing...') {
                            status.style.color = 'black';
                        } else if (status.textContent === 'need help...') {
                            status.style.color = 'white';
                        };
                        status.style.background = nextMonthStatusColorTempXl[i];
                        status.addEventListener('click', () => {
                            if (status.textContent === 'in progress...') {
                                status.textContent = 'reviewing...';
                                status.style.color = 'black';
                                status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                            } else if (status.textContent === 'reviewing...') {
                                status.textContent = 'need help...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                            } else if (status.textContent === 'need help...') {
                                status.textContent = 'in progress...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                            };
                        });
                        remaining.appendChild(status);
                        let description = document.createElement('div');
                        description.classList.add('nextMonth-description-xs');
                        description.textContent = nextMonthDescriptionTextContentTempXl[i];
                        description.style.display = 'flex';
                        description.style.flexDirection = 'row';
                        description.contentEditable = true;
                        remaining.appendChild(description);
                        let progress = document.createElement('div');
                        progress.classList.add('nextMonth-progress-xs');
                        progress.style.display = 'flex';
                        progress.style.flexDirection = 'row';
                        let progressDiv1A = document.createElement('div');
                        progressDiv1A.style.background = `linear-gradient(to right, purple ${nextMonthProgressPercentageTempXl[i]}%, transparent ${nextMonthProgressPercentageTempXl[i]}%, transparent 100%)`;
                        progress.appendChild(progressDiv1A);
                        let progressInput1A = document.createElement('input');
                        progressInput1A.maxLength = 2;
                        progressInput1A.value = nextMonthProgressPercentageTempXl[i];
                        progressInput1A.addEventListener('blur', () => {
                            let value = Number(progressInput1A.value);
                            if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                                progressInput1A.value = 14;
                                progressInput1A.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
                            } else {
                                progressInput1A.previousElementSibling.style.background = `linear-gradient(to right, purple ${progressInput1A.value}%, transparent ${progressInput1A.value}%, transparent 100%)`;
                            };
                        });
                        progress.appendChild(progressInput1A);
                        let progressSpan1A = document.createElement('span');
                        progressSpan1A.textContent = '%';
                        progress.appendChild(progressSpan1A);
                        if (progressInput1A.value === '100') {
                            let closestProgressBar = progressInput1A.closest('.nextMonth-progress-xs').children[0];
                            let closestProgressPercentage = progressInput1A.closest('.nextMonth-progress-xs').children[1];
                            let closestProgressPercentageSign = progressInput1A.closest('.nextMonth-progress-xs').children[2];
                            closestProgressBar.innerHTML = 'COMPLETE';
                            closestProgressBar.style.transition = 'color .5s, background .5s';
                            closestProgressBar.style.color = 'white';
                            closestProgressBar.style.background = 'purple';
                            closestProgressPercentageSign.style.fontSize = '20px';
                            progressInput1A.maxLength = 3;
                            progressInput1A.style.width = '37px';
                            progressInput1A.style.marginLeft = '8px';
                            progressInput1A.style.fontSize = '20px';
                            progressInput1A.style.color = 'black';
                            progressInput1A.style.opacity = '1';
                            progressInput1A.style.cursor = 'default';
                            progressInput1A.disabled = true;
                        };
                        remaining.appendChild(progress);
                        let checkmark = document.createElement('div');
                        checkmark.classList.add('nextMonth-checkmark-xs');
                        checkmark.style.display = 'flex';
                        checkmark.style.flexDirection = 'row';
                        let checkmarkImage1A = document.createElement('img');
                        checkmarkImage1A.src = 'media/checkmarkIcon.png';
                        checkmarkImage1A.addEventListener('click', () => {
                            let closestProgressBar = checkmarkImage1A.closest('.nextMonth-checkmark-xs').previousElementSibling.children[0];
                            let closestProgressPercentage = checkmarkImage1A.closest('.nextMonth-checkmark-xs').previousElementSibling.children[1];
                            let closestProgressPercentageSign = checkmarkImage1A.closest('.nextMonth-checkmark-xs').previousElementSibling.children[2];
                            closestProgressBar.innerHTML = 'COMPLETE';
                            closestProgressBar.style.transition = 'color .5s, background .5s';
                            closestProgressBar.style.color = 'white';
                            closestProgressBar.style.background = 'purple';
                            closestProgressPercentage.maxLength = 3;
                            closestProgressPercentage.value = 100;
                            closestProgressPercentage.style.width = '37px';
                            closestProgressPercentage.style.marginLeft = '8px';
                            closestProgressPercentage.style.fontSize = '20px';
                            closestProgressPercentage.style.color = 'black';
                            closestProgressPercentage.style.opacity = '1';
                            closestProgressPercentageSign.style.fontSize = '20px';
                            closestProgressPercentage.disabled = true;
                        });
                        checkmark.appendChild(checkmarkImage1A);
                        remaining.appendChild(checkmark);
                        let minus = document.createElement('div');
                        minus.classList.add('nextMonth-minus-xs');
                        minus.style.display = 'flex';
                        minus.style.flexDirection = 'row';
                        let minusImage1A = document.createElement('img');
                        minusImage1A.src = "media/minusIcon.png";
                        minusImage1A.addEventListener('click', () => {
                            let nextMonthRemainingEntryContainer = minusImage1A.closest('.nextMonth-remaining-entry-xs');
                            let nextMonthRemainingEntriesContainerChildren = Array.from(nextMonthRemainingEntriesContainerXs.children);
                            let nextMonthRemainingEntryIndex = nextMonthRemainingEntriesContainerChildren.indexOf(nextMonthRemainingEntryContainer);
                            nextMonthRemainingEntryContainer.remove();
                            let nextMonthTaskEntryContainer = nextMonthTaskEntriesContainerXs.children[nextMonthRemainingEntryIndex];
                            nextMonthTaskEntriesContainerXs.removeChild(nextMonthTaskEntryContainer);
                            if (nextMonthTaskEntriesContainerXs.children.length === 0) {
                                let section = document.createElement('section');
                                nextMonthTaskEntriesContainerXs.appendChild(section);
                                if (touchDeviceOrNotVariable) {
                                    section.style.width = '159.17px';
                                };
                            };
                            if (nextMonthRemainingEntriesContainerXs.children.length === 0) {
                                let section = document.createElement('section');
                                section.style.display = 'flex';
                                section.style.flexDirection = 'row';
                                let sectionSpan1A = document.createElement('span');
                                sectionSpan1A.textContent = 'This section is empty...';
                                section.appendChild(sectionSpan1A);
                                let sectionButton1A = document.createElement('button');
                                sectionButton1A.style.color = 'rgb(195, 87, 219)';
                                sectionButton1A.textContent = 'click here to add an entry';
                                sectionButton1A.addEventListener('click', addEntryXs);
                                section.appendChild(sectionButton1A);
                                nextMonthRemainingEntriesContainerXs.appendChild(section);
                            };
                        });
                        minus.appendChild(minusImage1A);
                        remaining.appendChild(minus);
                        nextMonthRemainingEntriesContainerXs.appendChild(remaining);
                    };
                };
                setTimeout(() => {
                    let urgentAmountDifferenceXs = (urgentChildrenAmountXl - urgentChildrenAmountXs);
                    let thisMonthAmountDifferenceXs = (thisMonthChildrenAmountXl - thisMonthChildrenAmountXs);
                    if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        thisMonthRemainingTextsContainerRectTopXs = thisMonthRemainingTextsContainerXs.getBoundingClientRect().top;
                        nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerXs.getBoundingClientRect().top;
                        projectTaskManagerDivRectBottomXs = projectTaskManagerDivXs.getBoundingClientRect().bottom;
                    };
                    if (urgentAmountDifferenceXs > 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            thisMonthRemainingTextsContainerRectTopXs += (45 * urgentAmountDifferenceXs);
                            nextMonthRemainingTextsContainerRectTopXs += (45 * urgentAmountDifferenceXs);
                        }
                    } else if (urgentAmountDifferenceXs < 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            thisMonthRemainingTextsContainerRectTopXs -= (45 * Math.abs(urgentAmountDifferenceXs));
                            nextMonthRemainingTextsContainerRectTopXs -= (45 * Math.abs(urgentAmountDifferenceXs));
                        }
                    };
                    if (thisMonthAmountDifferenceXs > 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            nextMonthRemainingTextsContainerRectTopXs += (45 * thisMonthAmountDifferenceXs);
                        }
                    } else if (thisMonthAmountDifferenceXs < 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            nextMonthRemainingTextsContainerRectTopXs -= (45 * Math.abs(thisMonthAmountDifferenceXs));
                        }
                    };
                    oneTimeResizeAssignmentHasHappenedAlready = false;
                }, 1000);
            };
                                                    
            xlToXsResize = false;
        };
        if (window.innerWidth >= 1200) {
            xlToXsResize = true;
            if (xsToXlResize === true) {
                let urgentTaskValueTempXs = [];
                let urgentTeamImage1TempXs = [];
                let urgentTeamImage2TempXs = [];
                let urgentTeamImage3TempXs = [];
                let urgentTeamImage4TempXs = [];
                let urgentTeamImage5TempXs = [];
                let urgentTeamImage6TempXs = [];
                let urgentTeamImage7TempXs = [];
                let urgentTeamImage8TempXs = [];
                let urgentStatusTextContentTempXs = [];
                let urgentStatusColorTempXs = [];
                let urgentStatusBackgroundTempXs = [];
                let urgentDescriptionTextContentTempXs = [];
                let urgentProgressPercentageTempXs = [];
                let thisMonthTaskValueTempXs = [];
                let thisMonthTeamImage1TempXs = [];
                let thisMonthTeamImage2TempXs = [];
                let thisMonthTeamImage3TempXs = [];
                let thisMonthTeamImage4TempXs = [];
                let thisMonthTeamImage5TempXs = [];
                let thisMonthTeamImage6TempXs = [];
                let thisMonthTeamImage7TempXs = [];
                let thisMonthTeamImage8TempXs = [];
                let thisMonthStatusTextContentTempXs = [];
                let thisMonthStatusColorTempXs = [];
                let thisMonthStatusBackgroundTempXs = [];
                let thisMonthDescriptionTextContentTempXs = [];
                let thisMonthProgressPercentageTempXs = [];
                let nextMonthTaskValueTempXs = [];
                let nextMonthTeamImage1TempXs = [];
                let nextMonthTeamImage2TempXs = [];
                let nextMonthTeamImage3TempXs = [];
                let nextMonthTeamImage4TempXs = [];
                let nextMonthTeamImage5TempXs = [];
                let nextMonthTeamImage6TempXs = [];
                let nextMonthTeamImage7TempXs = [];
                let nextMonthTeamImage8TempXs = [];
                let nextMonthStatusTextContentTempXs = [];
                let nextMonthStatusColorTempXs = [];
                let nextMonthStatusBackgroundTempXs = [];
                let nextMonthDescriptionTextContentTempXs = [];
                let nextMonthProgressPercentageTempXs = [];
                urgentChildrenAmountXs = document.querySelector('.urgent-remaining-entries-container-xs').children.length;
                thisMonthChildrenAmountXs = document.querySelector('.thisMonth-remaining-entries-container-xs').children.length;
                urgentChildrenAmountXl = document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl').children.length;
                thisMonthChildrenAmountXl = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl').children.length;




                let urgentTaskValueElementsXs = document.querySelectorAll('.urgent-task-xs');
                urgentTaskValueTempXs = Array.from(urgentTaskValueElementsXs).map(urgentTaskValueElementXs => urgentTaskValueElementXs.value.trim());
                let urgentTeamElementsXs = document.querySelectorAll('.urgent-team-xs');
                urgentTeamElementsXs.forEach(urgentTeamElementXs => {
                    let urgentTeamFirstImage = urgentTeamElementXs.querySelector('img:first-child');
                    if (urgentTeamFirstImage === null) {
                        urgentTeamImage1TempXs.push(null);
                    } else {
                        urgentTeamImage1TempXs.push(urgentTeamFirstImage.src);
                    }
                    let urgentTeamSecondImage = urgentTeamElementXs.querySelector('img:nth-child(2)');
                    if (urgentTeamSecondImage === null) {
                        urgentTeamImage2TempXs.push(null);
                    } else {
                        urgentTeamImage2TempXs.push(urgentTeamSecondImage.src);
                    }
                    let urgentTeamThirdImage = urgentTeamElementXs.querySelector('img:nth-child(3)');
                    if (urgentTeamThirdImage === null) {
                        urgentTeamImage3TempXs.push(null);
                    } else {
                        urgentTeamImage3TempXs.push(urgentTeamThirdImage.src);
                    }
                    let urgentTeamFourthImage = urgentTeamElementXs.querySelector('img:nth-child(4)');
                    if (urgentTeamFourthImage === null) {
                        urgentTeamImage4TempXs.push(null);
                    } else {
                        urgentTeamImage4TempXs.push(urgentTeamFourthImage.src);
                    }
                });
                for (i = 0; i < urgentTaskValueTempXs.length; i++) {
                    let existingImagesArray = [];
                    if (urgentTeamImage1TempXs[i] !== null) existingImagesArray.push(urgentTeamImage1TempXs[i]);
                    if (urgentTeamImage2TempXs[i] !== null) existingImagesArray.push(urgentTeamImage2TempXs[i]);
                    if (urgentTeamImage3TempXs[i] !== null) existingImagesArray.push(urgentTeamImage3TempXs[i]);
                    if (urgentTeamImage4TempXs[i] !== null) existingImagesArray.push(urgentTeamImage4TempXs[i]);
                    let allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                                   'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];

                    let getUniqueElements = (arr1, arr2) => arr1.filter(item => !arr2.includes(item));

                    let filteredArray1 = getUniqueElements(existingImagesArray, allCategoryTeamImagePaths);
                    let filteredArray2 = getUniqueElements(allCategoryTeamImagePaths, existingImagesArray);

                    let finishedArray = filteredArray1.concat(filteredArray2);

                    let urgentTeamImage5TemporaryValue = (finishedArray[0] !== undefined) ? finishedArray[0] : null;
                    let urgentTeamImage6TemporaryValue = (finishedArray[1] !== undefined) ? finishedArray[1] : null;
                    let urgentTeamImage7TemporaryValue = (finishedArray[2] !== undefined) ? finishedArray[2] : null;
                    let urgentTeamImage8TemporaryValue = (finishedArray[3] !== undefined) ? finishedArray[3] : null;

                    urgentTeamImage5TempXs[i] = urgentTeamImage5TemporaryValue;
                    urgentTeamImage6TempXs[i] = urgentTeamImage6TemporaryValue;
                    urgentTeamImage7TempXs[i] = urgentTeamImage7TemporaryValue;
                    urgentTeamImage8TempXs[i] = urgentTeamImage8TemporaryValue;
                };




                let urgentStatusElementsXs = document.querySelectorAll('.urgent-status-xs');
                urgentStatusTextContentTempXs = Array.from(urgentStatusElementsXs).map(urgentStatusElementXs => urgentStatusElementXs.textContent);
                urgentStatusColorTempXs = Array.from(urgentStatusElementsXs).map(urgentStatusElementXs => urgentStatusElementXs.style.color);
                urgentStatusBackgroundTempXs = Array.from(urgentStatusElementsXs).map(urgentStatusElementXs => urgentStatusElementXs.style.background);




                let urgentDescriptionElementsXs = document.querySelectorAll('.urgent-description-xs');
                urgentDescriptionTextContentTempXs = Array.from(urgentDescriptionElementsXs).map(urgentDescriptionElementXs => urgentDescriptionElementXs.textContent);




                let urgentProgressElementsXs = document.querySelectorAll('.urgent-progress-xs input');
                urgentProgressPercentageTempXs = Array.from(urgentProgressElementsXs).map(urgentProgressElementXs => urgentProgressElementXs.value);








                let thisMonthTaskValueElementsXs = document.querySelectorAll('.thisMonth-task-xs');
                thisMonthTaskValueTempXs = Array.from(thisMonthTaskValueElementsXs).map(thisMonthTaskValueElementXs => thisMonthTaskValueElementXs.value.trim());
                let thisMonthTeamElementsXs = document.querySelectorAll('.thisMonth-team-xs');
                thisMonthTeamElementsXs.forEach(thisMonthTeamElementXs => {
                    let thisMonthTeamFirstImage = thisMonthTeamElementXs.querySelector('img:first-child');
                    if (thisMonthTeamFirstImage === null) {
                        thisMonthTeamImage1TempXs.push(null);
                    } else {
                        thisMonthTeamImage1TempXs.push(thisMonthTeamFirstImage.src);
                    }
                    let thisMonthTeamSecondImage = thisMonthTeamElementXs.querySelector('img:nth-child(2)');
                    if (thisMonthTeamSecondImage === null) {
                        thisMonthTeamImage2TempXs.push(null);
                    } else {
                        thisMonthTeamImage2TempXs.push(thisMonthTeamSecondImage.src);
                    }
                    let thisMonthTeamThirdImage = thisMonthTeamElementXs.querySelector('img:nth-child(3)');
                    if (thisMonthTeamThirdImage === null) {
                        thisMonthTeamImage3TempXs.push(null);
                    } else {
                        thisMonthTeamImage3TempXs.push(thisMonthTeamThirdImage.src);
                    }
                    let thisMonthTeamFourthImage = thisMonthTeamElementXs.querySelector('img:nth-child(4)');
                    if (thisMonthTeamFourthImage === null) {
                        thisMonthTeamImage4TempXs.push(null);
                    } else {
                        thisMonthTeamImage4TempXs.push(thisMonthTeamFourthImage.src);
                    }
                });
                for (i = 0; i < thisMonthTaskValueTempXs.length; i++) {
                    let existingImagesArray = [];
                    if (thisMonthTeamImage1TempXs[i] !== null) existingImagesArray.push(thisMonthTeamImage1TempXs[i]);
                    if (thisMonthTeamImage2TempXs[i] !== null) existingImagesArray.push(thisMonthTeamImage2TempXs[i]);
                    if (thisMonthTeamImage3TempXs[i] !== null) existingImagesArray.push(thisMonthTeamImage3TempXs[i]);
                    if (thisMonthTeamImage4TempXs[i] !== null) existingImagesArray.push(thisMonthTeamImage4TempXs[i]);
                    let allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                                   'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];

                    let getUniqueElements = (arr1, arr2) => arr1.filter(item => !arr2.includes(item));

                    let filteredArray1 = getUniqueElements(existingImagesArray, allCategoryTeamImagePaths);
                    let filteredArray2 = getUniqueElements(allCategoryTeamImagePaths, existingImagesArray);

                    let finishedArray = filteredArray1.concat(filteredArray2);

                    let thisMonthTeamImage5TemporaryValue = (finishedArray[0] !== undefined) ? finishedArray[0] : null;
                    let thisMonthTeamImage6TemporaryValue = (finishedArray[1] !== undefined) ? finishedArray[1] : null;
                    let thisMonthTeamImage7TemporaryValue = (finishedArray[2] !== undefined) ? finishedArray[2] : null;
                    let thisMonthTeamImage8TemporaryValue = (finishedArray[3] !== undefined) ? finishedArray[3] : null;

                    thisMonthTeamImage5TempXs[i] = thisMonthTeamImage5TemporaryValue;
                    thisMonthTeamImage6TempXs[i] = thisMonthTeamImage6TemporaryValue;
                    thisMonthTeamImage7TempXs[i] = thisMonthTeamImage7TemporaryValue;
                    thisMonthTeamImage8TempXs[i] = thisMonthTeamImage8TemporaryValue;
                };




                let thisMonthStatusElementsXs = document.querySelectorAll('.thisMonth-status-xs');
                thisMonthStatusTextContentTempXs = Array.from(thisMonthStatusElementsXs).map(thisMonthStatusElementXs => thisMonthStatusElementXs.textContent);
                thisMonthStatusColorTempXs = Array.from(thisMonthStatusElementsXs).map(thisMonthStatusElementXs => thisMonthStatusElementXs.style.color);
                thisMonthStatusBackgroundTempXs = Array.from(thisMonthStatusElementsXs).map(thisMonthStatusElementXs => thisMonthStatusElementXs.style.background);




                let thisMonthDescriptionElementsXs = document.querySelectorAll('.thisMonth-description-xs');
                thisMonthDescriptionTextContentTempXs = Array.from(thisMonthDescriptionElementsXs).map(thisMonthDescriptionElementXs => thisMonthDescriptionElementXs.textContent);




                let thisMonthProgressElementsXs = document.querySelectorAll('.thisMonth-progress-xs input');
                thisMonthProgressPercentageTempXs = Array.from(thisMonthProgressElementsXs).map(thisMonthProgressElementXs => thisMonthProgressElementXs.value);









                let nextMonthTaskValueElementsXs = document.querySelectorAll('.nextMonth-task-xs');
                nextMonthTaskValueTempXs = Array.from(nextMonthTaskValueElementsXs).map(nextMonthTaskValueElementXs => nextMonthTaskValueElementXs.value.trim());
                let nextMonthTeamElementsXs = document.querySelectorAll('.nextMonth-team-xs');
                nextMonthTeamElementsXs.forEach(nextMonthTeamElementXs => {
                    let nextMonthTeamFirstImage = nextMonthTeamElementXs.querySelector('img:first-child');
                    if (nextMonthTeamFirstImage === null) {
                        nextMonthTeamImage1TempXs.push(null);
                    } else {
                        nextMonthTeamImage1TempXs.push(nextMonthTeamFirstImage.src);
                    }
                    let nextMonthTeamSecondImage = nextMonthTeamElementXs.querySelector('img:nth-child(2)');
                    if (nextMonthTeamSecondImage === null) {
                        nextMonthTeamImage2TempXs.push(null);
                    } else {
                        nextMonthTeamImage2TempXs.push(nextMonthTeamSecondImage.src);
                    }
                    let nextMonthTeamThirdImage = nextMonthTeamElementXs.querySelector('img:nth-child(3)');
                    if (nextMonthTeamThirdImage === null) {
                        nextMonthTeamImage3TempXs.push(null);
                    } else {
                        nextMonthTeamImage3TempXs.push(nextMonthTeamThirdImage.src);
                    }
                    let nextMonthTeamFourthImage = nextMonthTeamElementXs.querySelector('img:nth-child(4)');
                    if (nextMonthTeamFourthImage === null) {
                        nextMonthTeamImage4TempXs.push(null);
                    } else {
                        nextMonthTeamImage4TempXs.push(nextMonthTeamFourthImage.src);
                    }
                });
                for (i = 0; i < nextMonthTaskValueTempXs.length; i++) {
                    let existingImagesArray = [];
                    if (nextMonthTeamImage1TempXs[i] !== null) existingImagesArray.push(nextMonthTeamImage1TempXs[i]);
                    if (nextMonthTeamImage2TempXs[i] !== null) existingImagesArray.push(nextMonthTeamImage2TempXs[i]);
                    if (nextMonthTeamImage3TempXs[i] !== null) existingImagesArray.push(nextMonthTeamImage3TempXs[i]);
                    if (nextMonthTeamImage4TempXs[i] !== null) existingImagesArray.push(nextMonthTeamImage4TempXs[i]);
                    let allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                                   'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];

                    let getUniqueElements = (arr1, arr2) => arr1.filter(item => !arr2.includes(item));

                    let filteredArray1 = getUniqueElements(existingImagesArray, allCategoryTeamImagePaths);
                    let filteredArray2 = getUniqueElements(allCategoryTeamImagePaths, existingImagesArray);

                    let finishedArray = filteredArray1.concat(filteredArray2);

                    let nextMonthTeamImage5TemporaryValue = (finishedArray[0] !== undefined) ? finishedArray[0] : null;
                    let nextMonthTeamImage6TemporaryValue = (finishedArray[1] !== undefined) ? finishedArray[1] : null;
                    let nextMonthTeamImage7TemporaryValue = (finishedArray[2] !== undefined) ? finishedArray[2] : null;
                    let nextMonthTeamImage8TemporaryValue = (finishedArray[3] !== undefined) ? finishedArray[3] : null;

                    nextMonthTeamImage5TempXs[i] = nextMonthTeamImage5TemporaryValue;
                    nextMonthTeamImage6TempXs[i] = nextMonthTeamImage6TemporaryValue;
                    nextMonthTeamImage7TempXs[i] = nextMonthTeamImage7TemporaryValue;
                    nextMonthTeamImage8TempXs[i] = nextMonthTeamImage8TemporaryValue;
                };




                let nextMonthStatusElementsXs = document.querySelectorAll('.nextMonth-status-xs');
                nextMonthStatusTextContentTempXs = Array.from(nextMonthStatusElementsXs).map(nextMonthStatusElementXs => nextMonthStatusElementXs.textContent);
                nextMonthStatusColorTempXs = Array.from(nextMonthStatusElementsXs).map(nextMonthStatusElementXs => nextMonthStatusElementXs.style.color);
                nextMonthStatusBackgroundTempXs = Array.from(nextMonthStatusElementsXs).map(nextMonthStatusElementXs => nextMonthStatusElementXs.style.background);




                let nextMonthDescriptionElementsXs = document.querySelectorAll('.nextMonth-description-xs');
                nextMonthDescriptionTextContentTempXs = Array.from(nextMonthDescriptionElementsXs).map(nextMonthDescriptionElementXs => nextMonthDescriptionElementXs.textContent);




                let nextMonthProgressElementsXs = document.querySelectorAll('.nextMonth-progress-xs input');
                nextMonthProgressPercentageTempXs = Array.from(nextMonthProgressElementsXs).map(nextMonthProgressElementXs => nextMonthProgressElementXs.value);







                if (document.querySelector('.urgent-remaining-entries-container-xs section')) {
                    document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl').innerHTML = '';
                    let section = document.createElement('section');
                    section.style.display = "flex";
                    section.style.flexDirection = 'row';
                    let sectionSpan1A = document.createElement('span');
                    sectionSpan1A.textContent = 'This section is empty...';
                    let sectionButton1A = document.createElement('button');
                    sectionButton1A.textContent = 'click here to add an entry';
                    sectionButton1A.style.color = 'red';
                    sectionButton1A.addEventListener('click', addEntryXl);
                    section.appendChild(sectionSpan1A);
                    section.appendChild(sectionButton1A);
                    document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl').appendChild(section);
                } else {
                    document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl').innerHTML = '';
                    for (i = 0; i < urgentTaskValueTempXs.length; i++) {
                        let entry = document.createElement('div');
                        entry.classList.add('entry-container-xl');
                        entry.style.display = 'flex';
                        entry.addEventListener('dragstart', () => {
                            if (dragImageNotEntrySwitchXl === true) {
                                entry.classList.add('dragging-entry-xl');
                            };
                        });
                        entry.addEventListener('dragover', rearrangeEntryDragXl);
                        entry.addEventListener('dragend', () => {
                            if (dragImageNotEntrySwitchXl === true) {
                                entry.classList.remove('dragging-entry-xl');
                            };
                        });
                        entry.addEventListener('mouseover', () => {
                            entry.classList.add('hover-xl');
                        });
                        entry.addEventListener('mouseout', () => {
                            entry.classList.remove('hover-xl');
                        });
                        let rearrange = document.createElement('div');
                        rearrange.classList.add('entry-rearrange-xl');
                        rearrange.addEventListener('mouseover', () => {
                            let parent = rearrange.closest('.entry-container-xl');
                            parent.draggable = true;
                        });
                        rearrange.addEventListener('mouseout', () => {
                            let parent = rearrange.closest('.entry-container-xl');
                            parent.draggable = false;
                        });
                        entry.appendChild(rearrange);
                        let task = document.createElement('input');
                        task.classList.add('entry-task-xl');
                        task.maxLength = 20;
                        task.value = urgentTaskValueTempXs[i];
                        entry.appendChild(task);
                        let team = document.createElement('div');
                        team.classList.add('entry-team-xl');
                        team.style.display = 'flex';
                        team.style.flexDirection = 'column';
                        team.addEventListener('mouseover', teamMouseOverXl);
                        team.addEventListener('mouseout', teamMouseOutXl);
                        let teamDiv1A = document.createElement('div');
                        teamDiv1A.classList.add('container-for-draggable-image-xl');
                        teamDiv1A.style.display = 'flex';
                        teamDiv1A.addEventListener('dragover', teamDragOverXl);
                        if (urgentTeamImage1TempXs[i] === null) {
                        } else {
                            let teamImage1B = document.createElement('img');
                            teamImage1B.classList.add('draggable-image-xl');
                            teamImage1B.draggable = true;
                            teamImage1B.src = urgentTeamImage1TempXs[i];
                            teamImage1B.addEventListener('dragstart', teamDragStartXl);
                            teamImage1B.addEventListener('dragend', teamDragEndXl);
                            teamImage1B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage1B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage1B);
                        };
                        if (urgentTeamImage2TempXs[i] === null) {
                        } else {
                            let teamImage2B = document.createElement('img');
                            teamImage2B.classList.add('draggable-image-xl');
                            teamImage2B.draggable = true;
                            teamImage2B.src = urgentTeamImage2TempXs[i];
                            teamImage2B.addEventListener('dragstart', teamDragStartXl);
                            teamImage2B.addEventListener('dragend', teamDragEndXl);
                            teamImage2B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage2B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage2B);
                        };
                        if (urgentTeamImage3TempXs[i] === null) {
                        } else {
                            let teamImage3B = document.createElement('img');
                            teamImage3B.classList.add('draggable-image-xl');
                            teamImage3B.draggable = true;
                            teamImage3B.src = urgentTeamImage3TempXs[i];
                            teamImage3B.addEventListener('dragstart', teamDragStartXl);
                            teamImage3B.addEventListener('dragend', teamDragEndXl);
                            teamImage3B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage3B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage3B);
                        };
                        if (urgentTeamImage4TempXs[i] === null) {
                        } else {
                            let teamImage4B = document.createElement('img');
                            teamImage4B.classList.add('draggable-image-xl');
                            teamImage4B.draggable = true;
                            teamImage4B.src = urgentTeamImage4TempXs[i];
                            teamImage4B.addEventListener('dragstart', teamDragStartXl);
                            teamImage4B.addEventListener('dragend', teamDragEndXl);
                            teamImage4B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage4B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage4B);
                        };
                        let teamDiv2A = document.createElement('div');
                        teamDiv2A.classList.add('container-for-draggable-image-xl');
                        teamDiv2A.style.display = 'flex';
                        teamDiv2A.addEventListener('dragover', teamDragOverXl)
                        if (urgentTeamImage5TempXs[i] === null) {
                        } else {
                            let teamImage5B = document.createElement('img');
                            teamImage5B.classList.add('draggable-image-xl');
                            teamImage5B.draggable = true;
                            teamImage5B.src = urgentTeamImage5TempXs[i];
                            teamImage5B.addEventListener('dragstart', teamDragStartXl);
                            teamImage5B.addEventListener('dragend', teamDragEndXl);
                            teamImage5B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage5B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage5B);
                        };
                        if (urgentTeamImage6TempXs[i] === null) {
                        } else {
                            let teamImage6B = document.createElement('img');
                            teamImage6B.classList.add('draggable-image-xl');
                            teamImage6B.draggable = true;
                            teamImage6B.src = urgentTeamImage6TempXs[i];
                            teamImage6B.addEventListener('dragstart', teamDragStartXl);
                            teamImage6B.addEventListener('dragend', teamDragEndXl);
                            teamImage6B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage6B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage6B);
                        };
                        if (urgentTeamImage7TempXs[i] === null) {
                        } else {
                            let teamImage7B = document.createElement('img');
                            teamImage7B.classList.add('draggable-image-xl');
                            teamImage7B.draggable = true;
                            teamImage7B.src = urgentTeamImage7TempXs[i];
                            teamImage7B.addEventListener('dragstart', teamDragStartXl);
                            teamImage7B.addEventListener('dragend', teamDragEndXl);
                            teamImage7B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage7B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage7B);
                        };
                        if (urgentTeamImage8TempXs[i] === null) {
                        } else {
                            let teamImage8B = document.createElement('img');
                            teamImage8B.classList.add('draggable-image-xl');
                            teamImage8B.draggable = true;
                            teamImage8B.src = urgentTeamImage8TempXs[i];
                            teamImage8B.addEventListener('dragstart', teamDragStartXl);
                            teamImage8B.addEventListener('dragend', teamDragEndXl);
                            teamImage8B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage8B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage8B);
                        };
                        team.appendChild(teamDiv1A);
                        team.appendChild(teamDiv2A);
                        entry.appendChild(team);
                        let status = document.createElement('div');
                        status.classList.add('entry-status-xl');
                        status.textContent = urgentStatusTextContentTempXs[i];
                        status.style.display = 'flex';
                        status.style.color = urgentStatusColorTempXs[i];
                        status.style.background = urgentStatusBackgroundTempXs[i];
                        status.addEventListener('click', () => {
                            if (status.textContent === 'in progress...') {
                                status.textContent = 'reviewing...';
                                status.style.color = 'black';
                                status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                            } else if (status.textContent === 'reviewing...') {
                                status.textContent = 'need help...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                            } else if (status.textContent === 'need help...') {
                            status.textContent = 'in progress...';
                            status.style.color = 'white';
                            status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                            }
                        });
                        entry.appendChild(status);
                        let description = document.createElement('div');
                        description.classList.add('entry-description-xl');
                        description.style.display = 'flex';
                        let descriptionDiv1A = document.createElement('div');
                        descriptionDiv1A.contentEditable = true;
                        descriptionDiv1A.textContent = urgentDescriptionTextContentTempXs[i];
                        description.appendChild(descriptionDiv1A);
                        entry.appendChild(description);
                        let progress = document.createElement('div');
                        progress.classList.add('entry-progress-xl');
                        progress.style.display = 'flex';
                        let progressDiv1A = document.createElement('div');
                        progressDiv1A.style.display = 'flex';
                        let progressSpan1A = document.createElement('span');
                        progressSpan1A.textContent = urgentProgressPercentageTempXs[i] + '%';
                        if (urgentProgressPercentageTempXs[i] === '100') {
                            progressSpan1A.style.fontSize = '18px';
                        } else {
                            progressSpan1A.style.fontSize = '25px';
                        };
                        let progressDiv1B = document.createElement('div');
                        progressDiv1B.style.display = 'flex';
                        if (urgentProgressPercentageTempXs[i] === '100') {
                            progressDiv1B.style.maxWidth = '110%';
                        } else {
                            progressDiv1B.style.maxWidth = '99%';
                        };
                        let progressSpan1B = document.createElement('span');
                        progressSpan1B.textContent = 'COMPLETE';
                        if (urgentProgressPercentageTempXs[i] === '100') {
                            progressSpan1B.style.opacity = 1;
                        } else {
                            progressSpan1B.style.opacity = 0;
                        };
                        let progressTextArea1C = document.createElement('textarea');
                        progressTextArea1C.classList.add('entry-textarea-xl');
                        if (urgentProgressPercentageTempXs[i] === '100') {
                            progressTextArea1C.style.width = '12vw';
                            progressTextArea1C.style.cursor = 'default';
                            progressTextArea1C.style.resize = 'none';
                        } else {
                            textAreaResizeObserverXl.observe(progressTextArea1C);
                            progressTextArea1C.style.width = `${(urgentProgressPercentageTempXs[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw`;
                            progressTextArea1C.addEventListener('click', textAreaChangeSwitchXl);
                        };
                        progressTextArea1C.addEventListener('mouseout', () => {
                            if (conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl === true) {
                                let ggParent = progressTextArea1C.closest('.entry-progress-xl');
                                let percentageText = ggParent.children[1];
                                let widthFromPxToVw = parseInt(percentageText.textContent.replace('%', ''), 10);
                                progressTextArea1C.style.width = ((widthFromPxToVw * convertPxToVwCalculationNumberXl) + 'vw');
                                conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = false;
                            };
                        });
                        progressDiv1B.appendChild(progressTextArea1C);
                        progressDiv1A.appendChild(progressDiv1B);
                        progressDiv1A.appendChild(progressSpan1B);
                        progress.appendChild(progressDiv1A);
                        progress.appendChild(progressSpan1A);
                        entry.appendChild(progress);
                        let checkmark = document.createElement('div');
                        checkmark.classList.add('entry-checkmark-xl');
                        checkmark.style.display = 'flex';
                        let checkmarkImage1A = document.createElement('img');
                        checkmarkImage1A.src ="media/checkmarkIcon.png";
                        checkmarkImage1A.addEventListener('click', checkmarkCompleteXl);
                        checkmark.appendChild(checkmarkImage1A);
                        entry.appendChild(checkmark);
                        let minus = document.createElement('div');
                        minus.classList.add('entry-minus-xl');
                        minus.style.display = 'flex';
                        let minusImage1A = document.createElement('img');
                        minusImage1A.src = "media/minusIcon.png";
                        minusImage1A.addEventListener('click', minusEntryXl);
                        minus.appendChild(minusImage1A);
                        entry.appendChild(minus);
                        document.querySelector('.hide-scrollbar-container-xl > div:first-child .category-entries-container-xl').appendChild(entry);
                    };
                };




                if (document.querySelector('.thisMonth-remaining-entries-container-xs section')) {
                    document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl').innerHTML = '';
                    let section = document.createElement('section');
                    section.style.display = "flex";
                    section.style.flexDirection = 'row';
                    let sectionSpan1A = document.createElement('span');
                    sectionSpan1A.textContent = 'This section is empty...';
                    let sectionButton1A = document.createElement('button');
                    sectionButton1A.textContent = 'click here to add an entry';
                    sectionButton1A.style.color = 'teal';
                    sectionButton1A.addEventListener('click', addEntryXl);
                    section.appendChild(sectionSpan1A);
                    section.appendChild(sectionButton1A);
                    document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl').appendChild(section);
                } else {
                    document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl').innerHTML = '';
                    for (i = 0; i < thisMonthTaskValueTempXs.length; i++) {
                        let entry = document.createElement('div');
                        entry.classList.add('entry-container-xl');
                        entry.style.display = 'flex';
                        entry.addEventListener('dragstart', () => {
                            if (dragImageNotEntrySwitchXl === true) {
                                entry.classList.add('dragging-entry-xl');
                            };
                        });
                        entry.addEventListener('dragover', rearrangeEntryDragXl);
                        entry.addEventListener('dragend', () => {
                            if (dragImageNotEntrySwitchXl === true) {
                                entry.classList.remove('dragging-entry-xl');
                            };
                        });
                        entry.addEventListener('mouseover', () => {
                            entry.classList.add('hover-xl');
                        });
                        entry.addEventListener('mouseout', () => {
                            entry.classList.remove('hover-xl');
                        });
                        let rearrange = document.createElement('div');
                        rearrange.classList.add('entry-rearrange-xl');
                        rearrange.addEventListener('mouseover', () => {
                            let parent = rearrange.closest('.entry-container-xl');
                            rearrangeParent.draggable = true;
                        });
                        rearrange.addEventListener('mouseout', () => {
                            let parent = rearrange.closest('.entry-container-xl');
                            rearrangeParent.draggable = false;
                        });
                        entry.appendChild(rearrange);
                        let task = document.createElement('input');
                        task.classList.add('entry-task-xl');
                        task.maxLength = 20;
                        task.value = thisMonthTaskValueTempXs[i];
                        entry.appendChild(task);
                        let team = document.createElement('div');
                        team.classList.add('entry-team-xl');
                        team.style.display = 'flex';
                        team.style.flexDirection = 'column';
                        team.addEventListener('mouseover', teamMouseOverXl);
                        team.addEventListener('mouseout', teamMouseOutXl);
                        let teamDiv1A = document.createElement('div');
                        teamDiv1A.classList.add('container-for-draggable-image-xl');
                        teamDiv1A.style.display = 'flex';
                        teamDiv1A.addEventListener('dragover', teamDragOverXl);
                        if (thisMonthTeamImage1TempXs[i] === null) {
                        } else {
                            let teamImage1B = document.createElement('img');
                            teamImage1B.classList.add('draggable-image-xl');
                            teamImage1B.draggable = true;
                            teamImage1B.src = thisMonthTeamImage1TempXs[i];
                            teamImage1B.addEventListener('dragstart', teamDragStartXl);
                            teamImage1B.addEventListener('dragend', teamDragEndXl);
                            teamImage1B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage1B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage1B);
                        };
                        if (thisMonthTeamImage2TempXs[i] === null) {
                        } else {
                            let teamImage2B = document.createElement('img');
                            teamImage2B.classList.add('draggable-image-xl');
                            teamImage2B.draggable = true;
                            teamImage2B.src = thisMonthTeamImage2TempXs[i];
                            teamImage2B.addEventListener('dragstart', teamDragStartXl);
                            teamImage2B.addEventListener('dragend', teamDragEndXl);
                            teamImage2B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage2B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage2B);
                        };
                        if (thisMonthTeamImage3TempXs[i] === null) {
                        } else {
                            let teamImage3B = document.createElement('img');
                            teamImage3B.classList.add('draggable-image-xl');
                            teamImage3B.draggable = true;
                            teamImage3B.src = thisMonthTeamImage3TempXs[i];
                            teamImage3B.addEventListener('dragstart', teamDragStartXl);
                            teamImage3B.addEventListener('dragend', teamDragEndXl);
                            teamImage3B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage3B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage3B);
                        };
                        if (thisMonthTeamImage4TempXs[i] === null) {
                        } else {
                            let teamImage4B = document.createElement('img');
                            teamImage4B.classList.add('draggable-image-xl');
                            teamImage4B.draggable = true;
                            teamImage4B.src = thisMonthTeamImage4TempXs[i];
                            teamImage4B.addEventListener('dragstart', teamDragStartXl);
                            teamImage4B.addEventListener('dragend', teamDragEndXl);
                            teamImage4B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage4B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage4B);
                        };
                        let teamDiv2A = document.createElement('div');
                        teamDiv2A.classList.add('container-for-draggable-image-xl');
                        teamDiv2A.style.display = 'flex';
                        teamDiv2A.addEventListener('dragover', teamDragOverXl)
                        if (thisMonthTeamImage5TempXs[i] === null) {
                        } else {
                            let teamImage5B = document.createElement('img');
                            teamImage5B.classList.add('draggable-image-xl');
                            teamImage5B.draggable = true;
                            teamImage5B.src = thisMonthTeamImage5TempXs[i];
                            teamImage5B.addEventListener('dragstart', teamDragStartXl);
                            teamImage5B.addEventListener('dragend', teamDragEndXl);
                            teamImage5B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage5B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage5B);
                        };
                        if (thisMonthTeamImage6TempXs[i] === null) {
                        } else {
                            let teamImage6B = document.createElement('img');
                            teamImage6B.classList.add('draggable-image-xl');
                            teamImage6B.draggable = true;
                            teamImage6B.src = thisMonthTeamImage6TempXs[i];
                            teamImage6B.addEventListener('dragstart', teamDragStartXl);
                            teamImage6B.addEventListener('dragend', teamDragEndXl);
                            teamImage6B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage6B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage6B);
                        };
                        if (thisMonthTeamImage7TempXs[i] === null) {
                        } else {
                            let teamImage7B = document.createElement('img');
                            teamImage7B.classList.add('draggable-image-xl');
                            teamImage7B.draggable = true;
                            teamImage7B.src = thisMonthTeamImage7TempXs[i];
                            teamImage7B.addEventListener('dragstart', teamDragStartXl);
                            teamImage7B.addEventListener('dragend', teamDragEndXl);
                            teamImage7B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage7B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage7B);
                        };
                        if (thisMonthTeamImage8TempXs[i] === null) {
                        } else {
                            let teamImage8B = document.createElement('img');
                            teamImage8B.classList.add('draggable-image-xl');
                            teamImage8B.draggable = true;
                            teamImage8B.src = thisMonthTeamImage8TempXs[i];
                            teamImage8B.addEventListener('dragstart', teamDragStartXl);
                            teamImage8B.addEventListener('dragend', teamDragEndXl);
                            teamImage8B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage8B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage8B);
                        };
                        team.appendChild(teamDiv1A);
                        team.appendChild(teamDiv2A);
                        entry.appendChild(team);
                        let status = document.createElement('div');
                        status.classList.add('entry-status-xl');
                        status.textContent = thisMonthStatusTextContentTempXs[i];
                        status.style.display = 'flex';
                        status.style.color = thisMonthStatusColorTempXs[i];
                        status.style.background = thisMonthStatusBackgroundTempXs[i];
                        status.addEventListener('click', () => {
                            if (status.textContent === 'in progress...') {
                                status.textContent = 'reviewing...';
                                status.style.color = 'black';
                                status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                            } else if (status.textContent === 'reviewing...') {
                                status.textContent = 'need help...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                            } else if (status.textContent === 'need help...') {
                            status.textContent = 'in progress...';
                            status.style.color = 'white';
                            status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                            }
                        });
                        entry.appendChild(status);
                        let description = document.createElement('div');
                        description.classList.add('entry-description-xl');
                        description.style.display = 'flex';
                        let descriptionDiv1A = document.createElement('div');
                        descriptionDiv1A.contentEditable = true;
                        descriptionDiv1A.textContent = thisMonthDescriptionTextContentTempXs[i];
                        description.appendChild(descriptionDiv1A);
                        entry.appendChild(description);
                        let progress = document.createElement('div');
                        progress.classList.add('entry-progress-xl');
                        progress.style.display = 'flex';
                        let progressDiv1A = document.createElement('div');
                        progressDiv1A.style.display = 'flex';
                        let progressSpan1A = document.createElement('span');
                        progressSpan1A.textContent = thisMonthProgressPercentageTempXs[i] + '%';
                        if (thisMonthProgressPercentageTempXs[i] === '100') {
                            progressSpan1A.style.fontSize = '18px';
                        } else {
                            progressSpan1A.style.fontSize = '25px';
                        };
                        let progressDiv1B = document.createElement('div');
                        progressDiv1B.style.display = 'flex';
                        if (thisMonthProgressPercentageTempXs[i] === '100') {
                            progressDiv1B.style.maxWidth = '110%';
                        } else {
                            progressDiv1B.style.maxWidth = '99%';
                        };
                        let progressSpan1B = document.createElement('span');
                        progressSpan1B.textContent = 'COMPLETE';
                        if (thisMonthProgressPercentageTempXs[i] === '100') {
                            progressSpan1B.style.opacity = 1;
                        } else {
                            progressSpan1B.style.opacity = 0;
                        };
                        let progressTextArea1C = document.createElement('textarea');
                        progressTextArea1C.classList.add('entry-textarea-xl');
                        if (thisMonthProgressPercentageTempXs[i] === '100') {
                            progressTextArea1C.style.width = '12vw';
                            progressTextArea1C.style.cursor = 'default';
                            progressTextArea1C.style.resize = 'none';
                        } else {
                            textAreaResizeObserverXl.observe(progressTextArea1C);
                            progressTextArea1C.style.width = `${(thisMonthProgressPercentageTempXs[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw`;
                            progressTextArea1C.addEventListener('click', textAreaChangeSwitchXl);
                        };
                        progressTextArea1C.addEventListener('mouseout', () => {
                            if (conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl === true) {
                                let ggParent = progressTextArea1C.closest('.entry-progress-xl');
                                let percentageText = ggParent.children[1];
                                let widthFromPxToVw = parseInt(percentageText.textContent.replace('%', ''), 10);
                                progressTextArea1C.style.width = ((widthFromPxToVw * convertPxToVwCalculationNumberXl) + 'vw');
                                conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = false;
                            };
                        });
                        progressDiv1B.appendChild(progressTextArea1C);
                        progressDiv1A.appendChild(progressDiv1B);
                        progressDiv1A.appendChild(progressSpan1B);
                        progress.appendChild(progressDiv1A);
                        progress.appendChild(progressSpan1A);
                        entry.appendChild(progress);
                        let checkmark = document.createElement('div');
                        checkmark.classList.add('entry-checkmark-xl');
                        checkmark.style.display = 'flex';
                        let checkmarkImage1A = document.createElement('img');
                        checkmarkImage1A.src ="media/checkmarkIcon.png";
                        checkmarkImage1A.addEventListener('click', checkmarkCompleteXl);
                        checkmark.appendChild(checkmarkImage1A);
                        entry.appendChild(checkmark);
                        let minus = document.createElement('div');
                        minus.classList.add('entry-minus-xl');
                        minus.style.display = 'flex';
                        let minusImage1A = document.createElement('img');
                        minusImage1A.src = "media/minusIcon.png";
                        minusImage1A.addEventListener('click', minusEntryXl);
                        minus.appendChild(minusImage1A);
                        entry.appendChild(minus);
                        document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) .category-entries-container-xl').appendChild(entry);
                    };
                };




                if (document.querySelector('.nextMonth-remaining-entries-container-xs section')) {
                    document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) .category-entries-container-xl').innerHTML = '';
                    let section = document.createElement('section');
                    section.style.display = "flex";
                    section.style.flexDirection = 'row';
                    let sectionSpan1A = document.createElement('span');
                    sectionSpan1A.textContent = 'This section is empty...';
                    let sectionButton1A = document.createElement('button');
                    sectionButton1A.textContent = 'click here to add an entry';
                    sectionButton1A.style.color = 'rgb(195, 87, 219)';
                    sectionButton1A.addEventListener('click', addEntryXl);
                    section.appendChild(sectionSpan1A);
                    section.appendChild(sectionButton1A);
                    document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) .category-entries-container-xl').appendChild(section);
                } else {
                    document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) .category-entries-container-xl').innerHTML = '';
                    for (i = 0; i < nextMonthTaskValueTempXs.length; i++) {
                        let entry = document.createElement('div');
                        entry.classList.add('entry-container-xl');
                        entry.style.display = 'flex';
                        entry.addEventListener('dragstart', () => {
                            if (dragImageNotEntrySwitchXl === true) {
                                entry.classList.add('dragging-entry-xl');
                            };
                        });
                        entry.addEventListener('dragover', rearrangeEntryDragXl);
                        entry.addEventListener('dragend', () => {
                            if (dragImageNotEntrySwitchXl === true) {
                                entry.classList.remove('dragging-entry-xl');
                            };
                        });
                        entry.addEventListener('mouseover', () => {
                            entry.classList.add('hover-xl');
                        });
                        entry.addEventListener('mouseout', () => {
                            entry.classList.remove('hover-xl');
                        });
                        let rearrange = document.createElement('div');
                        rearrange.classList.add('entry-rearrange-xl');
                        rearrange.addEventListener('mouseover', () => {
                            let parent = rearrange.closest('.entry-container-xl');
                            rearrangeParent.draggable = true;
                        });
                        rearrange.addEventListener('mouseout', () => {
                            let parent = rearrange.closest('.entry-container-xl');
                            rearrangeParent.draggable = false;
                        });
                        entry.appendChild(rearrange);
                        let task = document.createElement('input');
                        task.classList.add('entry-task-xl');
                        task.maxLength = 20;
                        task.value = nextMonthTaskValueTempXs[i];
                        entry.appendChild(task);
                        let team = document.createElement('div');
                        team.classList.add('entry-team-xl');
                        team.style.display = 'flex';
                        team.style.flexDirection = 'column';
                        team.addEventListener('mouseover', teamMouseOverXl);
                        team.addEventListener('mouseout', teamMouseOutXl);
                        let teamDiv1A = document.createElement('div');
                        teamDiv1A.classList.add('container-for-draggable-image-xl');
                        teamDiv1A.style.display = 'flex';
                        teamDiv1A.addEventListener('dragover', teamDragOverXl);
                        if (nextMonthTeamImage1TempXs[i] === null) {
                        } else {
                            let teamImage1B = document.createElement('img');
                            teamImage1B.classList.add('draggable-image-xl');
                            teamImage1B.draggable = true;
                            teamImage1B.src = nextMonthTeamImage1TempXs[i];
                            teamImage1B.addEventListener('dragstart', teamDragStartXl);
                            teamImage1B.addEventListener('dragend', teamDragEndXl);
                            teamImage1B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage1B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage1B);
                        };
                        if (nextMonthTeamImage2TempXs[i] === null) {
                        } else {
                            let teamImage2B = document.createElement('img');
                            teamImage2B.classList.add('draggable-image-xl');
                            teamImage2B.draggable = true;
                            teamImage2B.src = nextMonthTeamImage2TempXs[i];
                            teamImage2B.addEventListener('dragstart', teamDragStartXl);
                            teamImage2B.addEventListener('dragend', teamDragEndXl);
                            teamImage2B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage2B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage2B);
                        };
                        if (nextMonthTeamImage3TempXs[i] === null) {
                        } else {
                            let teamImage3B = document.createElement('img');
                            teamImage3B.classList.add('draggable-image-xl');
                            teamImage3B.draggable = true;
                            teamImage3B.src = nextMonthTeamImage3TempXs[i];
                            teamImage3B.addEventListener('dragstart', teamDragStartXl);
                            teamImage3B.addEventListener('dragend', teamDragEndXl);
                            teamImage3B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage3B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage3B);
                        };
                        if (nextMonthTeamImage4TempXs[i] === null) {
                        } else {
                            let teamImage4B = document.createElement('img');
                            teamImage4B.classList.add('draggable-image-xl');
                            teamImage4B.draggable = true;
                            teamImage4B.src = nextMonthTeamImage4TempXs[i];
                            teamImage4B.addEventListener('dragstart', teamDragStartXl);
                            teamImage4B.addEventListener('dragend', teamDragEndXl);
                            teamImage4B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage4B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv1A.appendChild(teamImage4B);
                        };
                        let teamDiv2A = document.createElement('div');
                        teamDiv2A.classList.add('container-for-draggable-image-xl');
                        teamDiv2A.style.display = 'flex';
                        teamDiv2A.addEventListener('dragover', teamDragOverXl)
                        if (nextMonthTeamImage5TempXs[i] === null) {
                        } else {
                            let teamImage5B = document.createElement('img');
                            teamImage5B.classList.add('draggable-image-xl');
                            teamImage5B.draggable = true;
                            teamImage5B.src = nextMonthTeamImage5TempXs[i];
                            teamImage5B.addEventListener('dragstart', teamDragStartXl);
                            teamImage5B.addEventListener('dragend', teamDragEndXl);
                            teamImage5B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage5B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage5B);
                        };
                        if (nextMonthTeamImage6TempXs[i] === null) {
                        } else {
                            let teamImage6B = document.createElement('img');
                            teamImage6B.classList.add('draggable-image-xl');
                            teamImage6B.draggable = true;
                            teamImage6B.src = nextMonthTeamImage6TempXs[i];
                            teamImage6B.addEventListener('dragstart', teamDragStartXl);
                            teamImage6B.addEventListener('dragend', teamDragEndXl);
                            teamImage6B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage6B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage6B);
                        };
                        if (nextMonthTeamImage7TempXs[i] === null) {
                        } else {
                            let teamImage7B = document.createElement('img');
                            teamImage7B.classList.add('draggable-image-xl');
                            teamImage7B.draggable = true;
                            teamImage7B.src = nextMonthTeamImage7TempXs[i];
                            teamImage7B.addEventListener('dragstart', teamDragStartXl);
                            teamImage7B.addEventListener('dragend', teamDragEndXl);
                            teamImage7B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage7B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage7B);
                        };
                        if (nextMonthTeamImage8TempXs[i] === null) {
                        } else {
                            let teamImage8B = document.createElement('img');
                            teamImage8B.classList.add('draggable-image-xl');
                            teamImage8B.draggable = true;
                            teamImage8B.src = nextMonthTeamImage8TempXs[i];
                            teamImage8B.addEventListener('dragstart', teamDragStartXl);
                            teamImage8B.addEventListener('dragend', teamDragEndXl);
                            teamImage8B.addEventListener('mouseover', () => {
                                dragImageNotEntrySwitchXl = false;
                            });
                            teamImage8B.addEventListener('mouseout', () => {
                                dragImageNotEntrySwitchXl = true;
                            });
                            teamDiv2A.appendChild(teamImage8B);
                        };
                        team.appendChild(teamDiv1A);
                        team.appendChild(teamDiv2A);
                        entry.appendChild(team);
                        let status = document.createElement('div');
                        status.classList.add('entry-status-xl');
                        status.textContent = nextMonthStatusTextContentTempXs[i];
                        status.style.display = 'flex';
                        status.style.color = nextMonthStatusColorTempXs[i];
                        status.style.background = nextMonthStatusBackgroundTempXs[i];
                        status.addEventListener('click', () => {
                            if (status.textContent === 'in progress...') {
                                status.textContent = 'reviewing...';
                                status.style.color = 'black';
                                status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                            } else if (status.textContent === 'reviewing...') {
                                status.textContent = 'need help...';
                                status.style.color = 'white';
                                status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                            } else if (status.textContent === 'need help...') {
                            status.textContent = 'in progress...';
                            status.style.color = 'white';
                            status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                            }
                        });
                        entry.appendChild(status);
                        let description = document.createElement('div');
                        description.classList.add('entry-description-xl');
                        description.style.display = 'flex';
                        let descriptionDiv1A = document.createElement('div');
                        descriptionDiv1A.contentEditable = true;
                        descriptionDiv1A.textContent = nextMonthDescriptionTextContentTempXs[i];
                        description.appendChild(descriptionDiv1A);
                        entry.appendChild(description);
                        let progress = document.createElement('div');
                        progress.classList.add('entry-progress-xl');
                        progress.style.display = 'flex';
                        let progressDiv1A = document.createElement('div');
                        progressDiv1A.style.display = 'flex';
                        let progressSpan1A = document.createElement('span');
                        progressSpan1A.textContent = nextMonthProgressPercentageTempXs[i] + '%';
                        if (nextMonthProgressPercentageTempXs[i] === '100') {
                            progressSpan1A.style.fontSize = '18px';
                        } else {
                            progressSpan1A.style.fontSize = '25px';
                        };
                        let progressDiv1B = document.createElement('div');
                        progressDiv1B.style.display = 'flex';
                        if (nextMonthProgressPercentageTempXs[i] === '100') {
                            progressDiv1B.style.maxWidth = '110%';
                        } else {
                            progressDiv1B.style.maxWidth = '99%';
                        };
                        let progressSpan1B = document.createElement('span');
                        progressSpan1B.textContent = 'COMPLETE';
                        if (nextMonthProgressPercentageTempXs[i] === '100') {
                            progressSpan1B.style.opacity = 1;
                        } else {
                            progressSpan1B.style.opacity = 0;
                        };
                        let progressTextArea1C = document.createElement('textarea');
                        progressTextArea1C.classList.add('entry-textarea-xl');
                        if (nextMonthProgressPercentageTempXs[i] === '100') {
                            progressTextArea1C.style.width = '12vw';
                            progressTextArea1C.style.cursor = 'default';
                            progressTextArea1C.style.resize = 'none';
                        } else {
                            textAreaResizeObserverXl.observe(progressTextArea1C);
                            progressTextArea1C.style.width = `${(nextMonthProgressPercentageTempXs[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw`;
                            progressTextArea1C.addEventListener('click', textAreaChangeSwitchXl);
                        };
                        progressTextArea1C.addEventListener('mouseout', () => {
                            if (conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl === true) {
                                let ggParent = progressTextArea1C.closest('.entry-progress-xl');
                                let percentageText = ggParent.children[1];
                                let widthFromPxToVw = parseInt(percentageText.textContent.replace('%', ''), 10);
                                progressTextArea1C.style.width = ((widthFromPxToVw * convertPxToVwCalculationNumberXl) + 'vw');
                                conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = false;
                            };
                        });
                        progressDiv1B.appendChild(progressTextArea1C);
                        progressDiv1A.appendChild(progressDiv1B);
                        progressDiv1A.appendChild(progressSpan1B);
                        progress.appendChild(progressDiv1A);
                        progress.appendChild(progressSpan1A);
                        entry.appendChild(progress);
                        let checkmark = document.createElement('div');
                        checkmark.classList.add('entry-checkmark-xl');
                        checkmark.style.display = 'flex';
                        let checkmarkImage1A = document.createElement('img');
                        checkmarkImage1A.src ="media/checkmarkIcon.png";
                        checkmarkImage1A.addEventListener('click', checkmarkCompleteXl);
                        checkmark.appendChild(checkmarkImage1A);
                        entry.appendChild(checkmark);
                        let minus = document.createElement('div');
                        minus.classList.add('entry-minus-xl');
                        minus.style.display = 'flex';
                        let minusImage1A = document.createElement('img');
                        minusImage1A.src = "media/minusIcon.png";
                        minusImage1A.addEventListener('click', minusEntryXl);
                        minus.appendChild(minusImage1A);
                        entry.appendChild(minus);
                        document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) .category-entries-container-xl').appendChild(entry);
                    };
                    setTimeout(() => {
                    let urgentAmountDifferenceXl = (urgentChildrenAmountXs - urgentChildrenAmountXl);
                    let thisMonthAmountDifferenceXl = (thisMonthChildrenAmountXs - thisMonthChildrenAmountXl);
                    if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        thisMonthCategoryRectTopXl = thisMonthCategoryXl.getBoundingClientRect().top;
                        nextMonthCategoryRectTopXl = nextMonthCategoryXl.getBoundingClientRect().top;
                    };
                    if (urgentAmountDifferenceXl > 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            thisMonthCategoryRectTopXl += (52 * urgentAmountDifferenceXl);
                            nextMonthCategoryRectTopXl += (52 * urgentAmountDifferenceXl);
                        }
                    } else if (urgentAmountDifferenceXl < 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            thisMonthCategoryRectTopXl -= (52 * Math.abs(urgentAmountDifferenceXl));
                            nextMonthCategoryRectTopXl -= (52 * Math.abs(urgentAmountDifferenceXl));
                        }
                    };
                    if (thisMonthAmountDifferenceXl > 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            nextMonthCategoryRectTopXl += (52 * thisMonthAmountDifferenceXl);
                        }
                    } else if (thisMonthAmountDifferenceXl < 0) {
                        if (oneTimeResizeAssignmentHasHappenedAlready === true) {
                        } else {
                            nextMonthCategoryRectTopXl -= (52 * Math.abs(thisMonthAmountDifferenceXl));
                        }
                    };
                    oneTimeResizeAssignmentHasHappenedAlready = false;
                }, 1000);
                };

                xsToXlResize = false;
            };
        };







        if (window.innerHeight <= 400) {
            selectionElementContainerXs.style.marginTop = '25px';
            selectionElementXs.style.height = '250px';
            selectionElementXs.style.width = '250px';
            urgentButtonXs.style.height = '40px';
            urgentButtonXs.style.width = '180px';
            urgentButtonXs.style.fontSize = '20px';
            thisMonthButtonXs.style.height = '40px';
            thisMonthButtonXs.style.width = '180px';
            thisMonthButtonXs.style.fontSize = '20px';
            nextMonthButtonXs.style.height = '40px';
            nextMonthButtonXs.style.width = '180px';
            nextMonthButtonXs.style.fontSize = '20px';
        } else {
            selectionElementContainerXs.style.marginTop = '0px';
            selectionElementXs.style.height = '300px';
            selectionElementXs.style.width = '300px';
            urgentButtonXs.style.height = '50px';
            urgentButtonXs.style.width = '200px';
            urgentButtonXs.style.fontSize = '25px';
            thisMonthButtonXs.style.height = '50px';
            thisMonthButtonXs.style.width = '200px';
            thisMonthButtonXs.style.fontSize = '25px';
            nextMonthButtonXs.style.height = '50px';
            nextMonthButtonXs.style.width = '200px';
            nextMonthButtonXs.style.fontSize = '25px';
        };








        document.querySelectorAll('.entry-team-xl > div').forEach(element => {
            if (element.children.length === 4) {
                element.style.gap = '.25vw';
            } else if (element.children.length < 4) {
                element.style.gap = '1.5vw';
            }
        });

        if (window.innerWidth >= 1900) {
            convertPxToVwCalculationNumberXl = .105
        } else if (window.innerWidth < 1900 && window.innerWidth >= 1650) {
            convertPxToVwCalculationNumberXl = .105
        } else if (window.innerWidth < 1650 && window.innerWidth >= 1610) {
            convertPxToVwCalculationNumberXl = .104
        } else if (window.innerWidth < 1610 && window.innerWidth >= 1520) {
            convertPxToVwCalculationNumberXl = .103
        } else if (window.innerWidth < 1520 && window.innerWidth >= 1480) {
            convertPxToVwCalculationNumberXl = .102
        } else if (window.innerWidth < 1480 && window.innerWidth >= 1400) {
            convertPxToVwCalculationNumberXl = .101
        } else if (window.innerWidth < 1400 && window.innerWidth >= 1350) {
            convertPxToVwCalculationNumberXl = .100
        } else if (window.innerWidth < 1350 && window.innerWidth >= 1300) {
            convertPxToVwCalculationNumberXl = .099
        } else if (window.innerWidth < 1300 && window.innerWidth >= 1250) {
            convertPxToVwCalculationNumberXl = .098
        } else {
            convertPxToVwCalculationNumberXl = .098
        };

        if ((window.innerHeight < theHeightOfWindowXl + 50) && (window.innerHeight >= theHeightOfWindowXl - 50)) {
            newScrollVariableXl = 0;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 50) && (window.innerHeight < theHeightOfWindowXl + 100)) {
            newScrollVariableXl = 4;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 100) && (window.innerHeight < theHeightOfWindowXl + 150)) {
            newScrollVariableXl = 8;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 150) && (window.innerHeight < theHeightOfWindowXl + 200)) {
            newScrollVariableXl = 12;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 200) && (window.innerHeight < theHeightOfWindowXl + 250)) {
            newScrollVariableXl = 16;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 250) && (window.innerHeight < theHeightOfWindowXl + 300)) {
            newScrollVariableXl = 20;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 300) && (window.innerHeight < theHeightOfWindowXl + 350)) {
            newScrollVariableXl = 24;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 350) && (window.innerHeight < theHeightOfWindowXl + 400)) {
            newScrollVariableXl = 28;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 400) && (window.innerHeight < theHeightOfWindowXl + 450)) {
            newScrollVariableXl = 32;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 450) && (window.innerHeight < theHeightOfWindowXl + 500)) {
            newScrollVariableXl = 36;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 500) && (window.innerHeight < theHeightOfWindowXl + 550)) {
            newScrollVariableXl = 40;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 550) && (window.innerHeight < theHeightOfWindowXl + 600)) {
            newScrollVariableXl = 44;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 600) && (window.innerHeight < theHeightOfWindowXl + 650)) {
            newScrollVariableXl = 48;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 650) && (window.innerHeight < theHeightOfWindowXl + 700)) {
            newScrollVariableXl = 52;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 700) && (window.innerHeight < theHeightOfWindowXl + 750)) {
            newScrollVariableXl = 56;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 750) && (window.innerHeight < theHeightOfWindowXl + 800)) {
            newScrollVariableXl = 60;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 800) && (window.innerHeight < theHeightOfWindowXl + 850)) {
            newScrollVariableXl = 64;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 850) && (window.innerHeight < theHeightOfWindowXl + 900)) {
            newScrollVariableXl = 68;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 900) && (window.innerHeight < theHeightOfWindowXl + 950)) {
            newScrollVariableXl = 72;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 950) && (window.innerHeight < theHeightOfWindowXl + 1000)) {
            newScrollVariableXl = 76;
        } else if ((window.innerHeight >= theHeightOfWindowXl + 1000) && (window.innerHeight < theHeightOfWindowXl + 1050)) {
            newScrollVariableXl = 80;
        } else if ((window.innerHeight < theHeightOfWindowXl - 50) && (window.innerHeight >= theHeightOfWindowXl - 100)) {
            newScrollVariableXl = -4;
        } else if ((window.innerHeight < theHeightOfWindowXl - 100) && (window.innerHeight >= theHeightOfWindowXl - 150)) {
            newScrollVariableXl = -8;
        } else if ((window.innerHeight < theHeightOfWindowXl - 150) && (window.innerHeight >= theHeightOfWindowXl - 200)) {
            newScrollVariableXl = -12;
        } else if ((window.innerHeight < theHeightOfWindowXl - 200) && (window.innerHeight >= theHeightOfWindowXl - 250)) {
            newScrollVariableXl = -16;
        } else if ((window.innerHeight < theHeightOfWindowXl - 250) && (window.innerHeight >= theHeightOfWindowXl - 300)) {
            newScrollVariableXl = -20;
        } else if ((window.innerHeight < theHeightOfWindowXl - 300) && (window.innerHeight >= theHeightOfWindowXl - 350)) {
            newScrollVariableXl = -24;
        } else if ((window.innerHeight < theHeightOfWindowXl - 350) && (window.innerHeight >= theHeightOfWindowXl - 400)) {
            newScrollVariableXl = -28;
        } else if ((window.innerHeight < theHeightOfWindowXl - 400) && (window.innerHeight >= theHeightOfWindowXl - 450)) {
            newScrollVariableXl = -32;
        } else if ((window.innerHeight < theHeightOfWindowXl - 450) && (window.innerHeight >= theHeightOfWindowXl - 500)) {
            newScrollVariableXl = -36;
        } else if ((window.innerHeight < theHeightOfWindowXl - 500) && (window.innerHeight >= theHeightOfWindowXl - 550)) {
            newScrollVariableXl = -40;
        } else if ((window.innerHeight < theHeightOfWindowXl - 550) && (window.innerHeight >= theHeightOfWindowXl - 600)) {
            newScrollVariableXl = -44;
        } else if ((window.innerHeight < theHeightOfWindowXl - 600) && (window.innerHeight >= theHeightOfWindowXl - 650)) {
            newScrollVariableXl = -48;
        } else if ((window.innerHeight < theHeightOfWindowXl - 650) && (window.innerHeight >= theHeightOfWindowXl - 700)) {
            newScrollVariableXl = -52;
        } else if ((window.innerHeight < theHeightOfWindowXl - 700) && (window.innerHeight >= theHeightOfWindowXl - 750)) {
            newScrollVariableXl = -56;
        } else if ((window.innerHeight < theHeightOfWindowXl - 750) && (window.innerHeight >= theHeightOfWindowXl - 800)) {
            newScrollVariableXl = -60;
        } else if ((window.innerHeight < theHeightOfWindowXl - 800) && (window.innerHeight >= theHeightOfWindowXl - 850)) {
            newScrollVariableXl = -64;
        } else if ((window.innerHeight < theHeightOfWindowXl - 850) && (window.innerHeight >= theHeightOfWindowXl - 900)) {
            newScrollVariableXl = -68;
        } else if ((window.innerHeight < theHeightOfWindowXl - 900) && (window.innerHeight >= theHeightOfWindowXl - 950)) {
            newScrollVariableXl = -72;
        } else if ((window.innerHeight < theHeightOfWindowXl - 950) && (window.innerHeight >= theHeightOfWindowXl - 1000)) {
            newScrollVariableXl = -76;
        } else if ((window.innerHeight < theHeightOfWindowXl - 1000) && (window.innerHeight >= theHeightOfWindowXl - 1050)) {
            newScrollVariableXl = -80;
        };

        if (window.innerWidth >= 1200) {
            let entireWebsiteContainerXl = document.querySelector('.entire-website-container-xl');
            let postLoginContainerXl = document.querySelector('.post-login-container-xl');
            let postLoginBorderXl = document.querySelector('.post-login-border-xl');
            let designedWithContainer = document.querySelector('.designed-text-container-xl');
            let drawnWithContainer = document.querySelector('.drawn-text-container-xl');
            let preLoginBorderXl = document.querySelector('.pre-login-border-xl');
            let bgRadialGradientXl = document.querySelector('.bg-radial-gradient-xl');
            let preLoginContainerXs = document.querySelector('.pre-login-container-xs');
            let postLoginContainerXs = document.querySelector('.post-login-container-xs');
            if (userHasAlreadySuccessfullyLoggedInSwitch === true) {
                preLoginContainerXs.style.display = 'none';
                postLoginContainerXs.style.display = 'none';
                entireWebsiteContainerXl.style.display = 'flex';
                preLoginBorderXl.style.opacity = '0';
                designedWithContainer.style.opacity = '0';
                drawnWithContainer.style.opacity = '0';
                bgRadialGradientXl.style.opacity = '4';
                bgRadialGradientXl.style.zIndex = '1';
                postLoginContainerXl.style.zIndex = '5';
                postLoginContainerXl.style.opacity = '1';
                postLoginBorderXl.style.opacity = '1';
            } else if (userHasAlreadySuccessfullyLoggedInSwitch === false) {
                preLoginContainerXs.style.display = 'none';
                postLoginContainerXs.style.display = 'none';
                entireWebsiteContainerXl.style.display = 'flex';
                preLoginBorderXk.style.opacity = '0';
                bgWhiteRadialGradientXl.style.opacity = '1';
                postLoginContainerXl.style.zIndex = '1';
                postLoginContainerXl.style.opacity = '1';
                postLoginBorderXl.style.opacity = '1';
            };
        } else if (window.innerWidth < 1200) {
            let entireWebsiteContainerXl = document.querySelector('.entire-website-container-xl');
            let preLoginContainerXs = document.querySelector('.pre-login-container-xs');
            let postLoginContainerXs = document.querySelector('.post-login-container-xs');
            if (userHasAlreadySuccessfullyLoggedInSwitch === true) {
                preLoginContainerXs.style.display = 'none';
                postLoginContainerXs.style.display = 'flex';
                entireWebsiteContainerXl.style.display = 'none';
            } else if (userHasAlreadySuccessfullyLoggedInSwitch === false) {
                preLoginContainerXs.style.display = 'flex';
                postLoginContainerXs.style.display = 'none';
                entireWebsiteContainerXl.style.display = 'none';
            };
        }
    });









    if (window.innerWidth >= 1900) {
        convertPxToVwCalculationNumberXl = .105
    } else if (window.innerWidth < 1900 && window.innerWidth >= 1650) {
        convertPxToVwCalculationNumberXl = .105
    } else if (window.innerWidth < 1650 && window.innerWidth >= 1610) {
        convertPxToVwCalculationNumberXl = .104
    } else if (window.innerWidth < 1610 && window.innerWidth >= 1520) {
        convertPxToVwCalculationNumberXl = .103
    } else if (window.innerWidth < 1520 && window.innerWidth >= 1480) {
        convertPxToVwCalculationNumberXl = .102
    } else if (window.innerWidth < 1480 && window.innerWidth >= 1400) {
        convertPxToVwCalculationNumberXl = .101
    } else if (window.innerWidth < 1400 && window.innerWidth >= 1350) {
        convertPxToVwCalculationNumberXl = .100
    } else if (window.innerWidth < 1350 && window.innerWidth >= 1300) {
        convertPxToVwCalculationNumberXl = .099
    } else if (window.innerWidth < 1300 && window.innerWidth >= 1250) {
        convertPxToVwCalculationNumberXl = .098
    } else {
        convertPxToVwCalculationNumberXl = .098
    };

@* 1 ALL *@




@* 1 XL *@     

    let userHasAlreadySuccessfullyLoggedInSwitch = false;       @* BECAUSE OF THE COMPLEX NATURE OF THE MAIN CONTAINER'S POSITION
                                                                   AND Z-INDEX ATTRIBUTES, THE DISPLAY PROPERTY IS CONTROLLED WITH 
                                                                   THE HELP OF THIS SWITCH WHICH DETERMINES IF THE USER HAS
                                                                   ALREADY LOGGED IN SUCCESSFULLY.  THE CORRESPONDING SEGMENT OF
                                                                   CODE TO THIS VARIABLE CAN BE FOUND ABOVE IN THE WINDOW.RESIZE 
                                                                   EVENT LISTENER. *@

    const usernameInputContainerXl = document.getElementById("INPUT-CONTAINER-USERNAME-XL");
    const passwordInputContainerXl = document.getElementById("INPUT-CONTAINER-PASSWORD-XL");
    const usernameInputXl = document.getElementById("INPUT-ELEMENT-USERNAME-XL");
    const passwordInputXl = document.getElementById("INPUT-ELEMENT-PASSWORD-XL");

    usernameInputXl.addEventListener('focus', () => {
        usernameInputContainerXl.style.backgroundColor = 'rgba(125, 125, 125, .35)';
        if (usernameInputXl.value === '') {
            usernameInputXl.setAttribute('placeholder', '');
        };
    });
    usernameInputXl.addEventListener('blur', () => {
        usernameInputContainerXl.style.backgroundColor = 'rgba(255, 255, 255, .15)';
        if (usernameInputXl.value === '') {
            usernameInputXl.setAttribute('placeholder', 'Username');
        };
    });
    passwordInputXl.addEventListener('focus', () => {
        passwordInputContainerXl.style.backgroundColor = 'rgba(125, 125, 125, .35)';
        if (passwordInputXl.value === '') {
            passwordInputXl.setAttribute('placeholder', '');
        };
    });
    passwordInputXl.addEventListener('blur', () => {
        passwordInputContainerXl.style.backgroundColor = 'rgba(255, 255, 255, .15)';
        if (passwordInputXl.value === '') {
            passwordInputXl.setAttribute('placeholder', 'Password');
        };
    });

    function loginSuccessAnimationXl() {
        let upperLeftSquare = document.querySelector(".right-side-content-xl > div:nth-child(2)");
        let lowerRightSquare = document.querySelector(".right-side-content-xl > div:nth-child(3)");
        let blurredBigSquare = document.querySelector(".right-side-content-xl > div:nth-child(4)");
        let blurredSmallSquare = document.querySelector(".right-side-content-xl > div:nth-child(5)");
        let cartoon = document.querySelector(".left-side-content-xl > img:nth-child(2)");
        let rightSideContent = document.querySelector(".right-side-content-xl");
        let logoAndSloganContainer = document.querySelector(".logo-and-slogan-container-xl");
        let designedWithContainer = document.querySelector(".designed-text-container-xl");
        let drawnWithContainer = document.querySelector(".drawn-text-container-xl");
        let preLoginBorderXl = document.querySelector(".pre-login-border-xl");
        let bgWhiteRadialGradient = document.querySelector(".bg-radial-gradient-xl");
        let postLoginContainerXl = document.querySelector(".post-login-container-xl");
        let postLoginBorderXl = document.querySelector(".post-login-border-xl");
        let loginCredentialsXs = document.querySelector(".login-credentials-xs");
        let loginCredentialsXl = document.querySelector(".login-credentials-xl");
        upperLeftSquare.style.transition = 'height 1s, width 1s';
        blurredBigSquare.style.transition = 'margin-top 1s, margin-left 1s, filter .5s, opacity 3s';
        blurredSmallSquare.style.transition = 'margin-top 1s, margin-left 1s, filter .5s, opacity 3s';
        cartoon.style.transition = 'margin-bottom 1s';
        rightSideContent.style.transition = 'opacity 1s';
        logoAndSloganContainer.style.transition = 'opacity 1s';
        designedWithContainer.style.transition = 'opacity 1s';
        drawnWithContainer.style.transition = 'opacity 1s';
        preLoginBorderXl.style.transition = 'opacity 1s';
        bgWhiteRadialGradient.style.transition = 'opacity 1s';
        postLoginContainerXl.style.transition = 'opacity 1s, z-index 0s';
        postLoginBorderXl.style.transition = 'opacity 1s';
        upperLeftSquare.style.height = '215px';
        upperLeftSquare.style.width = '255px';
        blurredBigSquare.style.filter = 'blur(30px)';
        blurredBigSquare.style.marginTop = '-350px';
        blurredBigSquare.style.marginLeft = '200px';
        blurredBigSquare.style.opacity = '0';
        cartoon.style.marginBottom = '5vh';
        loginCredentialsXs.style.opacity = '0';
        loginCredentialsXl.style.opacity = '0';
        userHasAlreadySuccessfullyLoggedInSwitch = true;
        setTimeout(() => {
            lowerRightSquare.style.transition = 'height 1s, width 1s';
            lowerRightSquare.style.height = '190px';
            lowerRightSquare.style.width = '230px';
        }, 150);
        setTimeout(() => {
            cartoon.style.transition = 'margin-bottom 1s';
            upperLeftSquare.style.height = '0';
            upperLeftSquare.style.width = '0';
            cartoon.style.marginBottom = '-70vh';
            logoAndSloganContainer.style.opacity = '0';
        }, 200);
        setTimeout(() => {
            lowerRightSquare.style.height = '0';
            lowerRightSquare.style.width = '0';
            blurredSmallSquare.style.filter = 'blur(30px)';
            blurredSmallSquare.style.marginTop = '115px';
            blurredSmallSquare.style.marginLeft = '270px';
            blurredSmallSquare.style.opacity = '0';
            rightSideContent.style.opacity = '0';
            designedWithContainer.style.opacity = '0';
            drawnWithContainer.style.opacity = '0';
        }, 350);
        setTimeout(() => {
            preLoginBorderXl.style.opacity = '0';
            bgWhiteRadialGradient.style.opacity = '1';
            postLoginContainerXl.style.zIndex = '5';
            postLoginContainerXl.style.opacity = '1';
            postLoginBorderXl.style.opacity = '1';
            let hideScrollbarElement = document.querySelector('.hide-scrollbar-container-xl');
            hideScrollbarElement.scrollTo({
                top: 0,
                behavior: 'auto'
            });
        }, 500);
    };

    function loginFailureAnimationXl() {
        let loginForm = document.getElementById('LOGIN-FORM-ELEMENT-XL');
        let usernameInput = document.getElementById('INPUT-ELEMENT-USERNAME-XL');
        let passwordInput = document.getElementById('INPUT-ELEMENT-PASSWORD-XL');
        loginForm.style.transition = 'margin-left .2s, border 0s, background-color 0s';
        loginForm.style.marginLeft = '55px';
        loginForm.style.border = '2.15px solid rgba(255, 0, 0, .3)';
        loginForm.style.backgroundColor = 'rgba(255, 0, 0, .2)'
        setTimeout(() => {
            loginForm.style.marginLeft = '-55px';
        }, 10);
        setTimeout(() => {
            loginForm.style.marginLeft = '55px';
        }, 80);
        setTimeout(() => {
            loginForm.style.marginLeft = '-55px';
        }, 150);
        setTimeout(() => {
            loginForm.style.marginLeft = '55px';
        }, 220);
        setTimeout(() => {
            loginForm.style.marginLeft = '-55px';
        }, 290);
        setTimeout(() => {
            loginForm.style.transition = 'border 1s, margin-left .2s, background-color 1s';
            loginForm.style.border = '2.15px solid rgba(255, 255, 255, .4)';
        }, 360);
        setTimeout(() => {
            loginForm.style.marginLeft = '0';
            loginForm.style.backgroundColor = 'rgba(136, 219, 255, .7)';
        }, 430);
        usernameInput.value = '';
        usernameInput.setAttribute('placeholder', 'Username');
        passwordInput.value = '';
        passwordInput.setAttribute('placeholder', 'Password');
    };

    $(document).ready(() => {
        $('#LOGIN-FORM-ELEMENT-XL').submit((event) => {
            event.preventDefault();
            let Username = $('#INPUT-ELEMENT-USERNAME-XL').val();
            let Password = $('#INPUT-ELEMENT-PASSWORD-XL').val();
            $.ajax({
                type: 'POST',
                url: '@Url.Page("/Index", null, new { handler = "Login" })',
                data: { Username: Username, Password: Password },
                contentType: 'application/x-www-form-urlencoded',
                headers: {
                            RequestVerificationToken:
                                document.getElementById("REQUEST-VERIFICATION-TOKEN").value
                         },
                success: (result) => {
                    loginSuccessAnimationXl();
                },
                error: (xhr, status, error) => {
                    loginFailureAnimationXl();
                }
            });
        });
    });

@* 1 XL *@


@* 2 XL *@               @* Gathers all the necessary information to be stored in the Azure CosmosDB Database container. *@

    function successfulSaveMessageXl() {
        let successfulSaveMessageElement = document.querySelector('.successful-save-message-xl');
        successfulSaveMessageElement.style.transition = 'opacity 1s';
        successfulSaveMessageElement.style.opacity = '1';
        setTimeout(() => {
            successfulSaveMessageElement.style.opacity = '0';
        }, 1500);
    };

    function failureSaveMessageXl() {
        let failureSaveMessageElement = document.querySelector('.failure-save-message-xl');
        failureSaveMessageElement.style.transition = 'opacity 1s';
        failureSaveMessageElement.style.opacity = '1';
        setTimeout(() => {
            failureSaveMessageElement.style.opacity = '0';
        }, 1500);
    };



    $(document).ready(() => {
        $('#SAVE-BUTTON-XL').click((event) => {
            event.preventDefault();
            let urgentDescriptionTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-description-xl > div:first-child');
            let urgentDescriptionTextsArray = Array.from(urgentDescriptionTextsElements).map(urgentDescriptionTextsElement => urgentDescriptionTextsElement);
            let urgentDescriptionTextContent = [];
            for (let i = 0; i < urgentDescriptionTextsArray.length; i++) {
                urgentDescriptionTextContent[i] = urgentDescriptionTextsArray[i].textContent.trim();
            };

            let urgentProgressPercentageTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-progress-xl > span:nth-child(2)');
            let urgentProgressPercentageTextsArray = Array.from(urgentProgressPercentageTextsElements).map(urgentProgressPercentageTextsElement => urgentProgressPercentageTextsElement);
            let urgentProgressPercentage = [];
            let urgentProgressPercentageParsed = [];
            let urgentProgressPercentageBackground= [];
            for (let i = 0; i < urgentProgressPercentageTextsArray.length; i++) {
                urgentProgressPercentage[i] = urgentProgressPercentageTextsArray[i].textContent;
                urgentProgressPercentageParsed[i] = parseInt(urgentProgressPercentageTextsArray[i].textContent);
                urgentProgressPercentageBackground[i] = `background: linear-gradient(to right, purple ${urgentProgressPercentageParsed[i]}%, transparent ${urgentProgressPercentageParsed[i]}%, transparent 100%);`;
            };

            let urgentProgressWidthElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-progress-xl textarea');
            let urgentProgressWidthTextsArray = Array.from(urgentProgressWidthElements).map(urgentProgressWidthElement => urgentProgressWidthElement);
            let urgentProgressWidth = [];
            let urgentProgressMaxWidth = [];
            let urgentProgressPercentageFontSize = [];
            let urgentProgressCompleteTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-progress-xl > div:first-child > span:nth-child(2)');
            let urgentProgressCompleteTextsArray = Array.from(urgentProgressCompleteTextsElements).map(urgentProgressCompleteTextsElement => urgentProgressCompleteTextsElement);
            let urgentProgressCompletesOpacity = [];
            for (let i = 0; i < urgentProgressWidthTextsArray.length; i++) {
                if (urgentProgressPercentageParsed[i] >= 100) {
                    urgentProgressWidth[i] = 'width: 12vw;';
                    urgentProgressMaxWidth[i] = 'max-width: 110%;';
                    urgentProgressPercentageFontSize[i] = "font-size: 18px;";
                    urgentProgressCompletesOpacity[i] = "opacity: 1;";
                } else if (urgentProgressPercentageParsed[i] < 100) {
                    urgentProgressWidth[i] = `width: ${(urgentProgressPercentageParsed[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw;`;
                    urgentProgressMaxWidth[i] = 'max-width: 99%;';
                    urgentProgressPercentageFontSize[i] = "font-size: 25px;";
                    urgentProgressCompletesOpacity[i] = "opacity: 0;";
                };
            };

            let urgentStatusTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-status-xl');
            let urgentStatusTextsArray = Array.from(urgentStatusTextsElements).map(urgentStatusTextsElement => urgentStatusTextsElement);
            let urgentStatusTextContent = [];
            let urgentStatusColor = [];
            
            if (urgentStatusTextsArray.length === 0) {
                urgentStatusTextContent[i] = null;
            };

            for (let i = 0; i < urgentStatusTextsArray.length; i++) {
                let parentSlot = urgentStatusTextsArray[i].closest('.entry-container-xl');
                let firstStatusSlot = parentSlot.querySelector('.entry-status-xl');
                urgentStatusTextContent[i] = firstStatusSlot.textContent;
                if (firstStatusSlot.textContent === 'in progress...') {
                    urgentStatusColor[i] = "background: linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%);"
                } else if (firstStatusSlot.textContent === "reviewing...") {
                    urgentStatusColor[i] = "background: linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%); color: black;"
                } else if (firstStatusSlot.textContent === "need help...") {
                    urgentStatusColor[i] = "background: linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%);"
                };
            };

            let urgentElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-task-xl');
            let urgentTasks = Array.from(urgentElements);
            let urgentTaskValue = Array.from(urgentElements).map(urgentElement => urgentElement.value);
            let urgentTeamImage1 = [];
            let urgentTeamImage2 = [];
            let urgentTeamImage3 = [];
            let urgentTeamImage4 = [];
            let urgentTeamImage5 = [];
            let urgentTeamImage6 = [];
            let urgentTeamImage7 = [];
            let urgentTeamImage8 = [];

            for (let i = 0; i < urgentTasks.length; i++) {
                let parentSlot = urgentTasks[i].closest('.entry-container-xl');
                let firstImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:first-child');
                let secondImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(2)');
                let thirdImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(3)');
                let fourthImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(4)');
                let fifthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:first-child');
                let sixthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(2)');
                let seventhImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(3)');
                let eigthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(4)');
                if (firstImgSlot != null) {
                    urgentTeamImage1[i] = firstImgSlot.src
                } else {
                    urgentTeamImage1[i] = null;
                };
                if (secondImgSlot != null) {
                    urgentTeamImage2[i] = secondImgSlot.src
                } else {
                    urgentTeamImage2[i] = null;
                };
                if (thirdImgSlot != null) {
                    urgentTeamImage3[i] = thirdImgSlot.src
                } else {
                    urgentTeamImage3[i] = null;
                };
                if (fourthImgSlot != null) {
                    urgentTeamImage4[i] = fourthImgSlot.src
                } else {
                    urgentTeamImage4[i] = null;
                };
                if (fifthImgSlot != null) {
                    urgentTeamImage5[i] = fifthImgSlot.src
                } else {
                    urgentTeamImage5[i] = null;
                };
                if (sixthImgSlot != null) {
                    urgentTeamImage6[i] = sixthImgSlot.src
                } else {
                    urgentTeamImage6[i] = null;
                };
                if (seventhImgSlot != null) {
                    urgentTeamImage7[i] = seventhImgSlot.src
                } else {
                    urgentTeamImage7[i] = null;
                };
                if (eigthImgSlot != null) {
                    urgentTeamImage8[i] = eigthImgSlot.src
                } else {
                    urgentTeamImage8[i] = null;
                };
            };



            let thisMonthDescriptionTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-description-xl > div:first-child');
            let thisMonthDescriptionTextsArray = Array.from(thisMonthDescriptionTextsElements).map(thisMonthDescriptionTextsElement => thisMonthDescriptionTextsElement);
            let thisMonthDescriptionTextContent = [];
            for (let i = 0; i < thisMonthDescriptionTextsArray.length; i++) {
                thisMonthDescriptionTextContent[i] = thisMonthDescriptionTextsArray[i].textContent.trim();
            };

            let thisMonthProgressPercentageTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-progress-xl > span:nth-child(2)');
            let thisMonthProgressPercentageTextsArray = Array.from(thisMonthProgressPercentageTextsElements).map(thisMonthProgressPercentageTextsElement => thisMonthProgressPercentageTextsElement);
            let thisMonthProgressPercentage = [];
            let thisMonthProgressPercentageParsed = [];
            let thisMonthProgressPercentageBackground = [];
            for (let i = 0; i < thisMonthProgressPercentageTextsArray.length; i++) {
                thisMonthProgressPercentage[i] = thisMonthProgressPercentageTextsArray[i].textContent;
                thisMonthProgressPercentageParsed[i] = parseInt(thisMonthProgressPercentageTextsArray[i].textContent);
                thisMonthProgressPercentageBackground[i] = `background: linear-gradient(to right, purple ${thisMonthProgressPercentageParsed[i]}%, transparent ${thisMonthProgressPercentageParsed[i]}%, transparent 100%)`;
            };

            let thisMonthProgressWidthElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-progress-xl textarea');
            let thisMonthProgressWidthTextsArray = Array.from(thisMonthProgressWidthElements).map(thisMonthProgressWidthElement => thisMonthProgressWidthElement);
            let thisMonthProgressWidth = [];
            let thisMonthProgressMaxWidth = [];
            let thisMonthProgressPercentageFontSize = [];
            let thisMonthProgressCompleteTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-progress-xl > div:first-child > span:nth-child(2)');
            let thisMonthProgressCompleteTextsArray = Array.from(thisMonthProgressCompleteTextsElements).map(thisMonthProgressCompleteTextsElement => thisMonthProgressCompleteTextsElement);
            let thisMonthProgressCompletesOpacity = [];
            for (let i = 0; i < thisMonthProgressWidthTextsArray.length; i++) {
                if (thisMonthProgressPercentageParsed[i] >= 100) {
                    thisMonthProgressWidth[i] = 'width: 12vw;';
                    thisMonthProgressMaxWidth[i] = 'max-width: 110%;';
                    thisMonthProgressPercentageFontSize[i] = "font-size: 18px;";
                    thisMonthProgressCompletesOpacity[i] = "opacity: 1;";
                } else if (thisMonthProgressPercentageParsed[i] < 100) {
                    thisMonthProgressWidth[i] = `width: ${(thisMonthProgressPercentageParsed[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw;`;
                    thisMonthProgressMaxWidth[i] = 'max-width: 99%;';
                    thisMonthProgressPercentageFontSize[i] = "font-size: 25px;";
                    thisMonthProgressCompletesOpacity[i] = "opacity: 0;";
                };
            };

            let thisMonthStatusTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-status-xl');
            let thisMonthStatusTextsArray = Array.from(thisMonthStatusTextsElements).map(thisMonthStatusTextsElement => thisMonthStatusTextsElement);
            let thisMonthStatusTextContent = [];
            let thisMonthStatusColor = [];

            if (thisMonthStatusTextsArray.length === 0) {
                thisMonthStatusTextContent[i] = null;
            };

            for (let i = 0; i < thisMonthStatusTextsArray.length; i++) {
                let parentSlot = thisMonthStatusTextsArray[i].closest('.entry-container-xl');
                let firstStatusSlot = parentSlot.querySelector('.entry-status-xl');
                thisMonthStatusTextContent[i] = firstStatusSlot.textContent;
                if (firstStatusSlot.textContent === 'in progress...') {
                    thisMonthStatusColor[i] = "background: linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%);"
                } else if (firstStatusSlot.textContent === "reviewing...") {
                    thisMonthStatusColor[i] = "background: linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%); color: black;"
                } else if (firstStatusSlot.textContent === "need help...") {
                    thisMonthStatusColor[i] = "background: linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%);"
                };
            };

            let thisMonthElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-task-xl');
            let thisMonthTasks = Array.from(thisMonthElements);
            let thisMonthTaskValue = Array.from(thisMonthElements).map(thisMonthElement => thisMonthElement.value);
            let thisMonthTeamImage1 = [];
            let thisMonthTeamImage2 = [];
            let thisMonthTeamImage3 = [];
            let thisMonthTeamImage4 = [];
            let thisMonthTeamImage5 = [];
            let thisMonthTeamImage6 = [];
            let thisMonthTeamImage7 = [];
            let thisMonthTeamImage8 = [];

            for (let i = 0; i < thisMonthTasks.length; i++) {
                let parentSlot = thisMonthTasks[i].closest('.entry-container-xl');
                let firstImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:first-child');
                let secondImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(2)');
                let thirdImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(3)');
                let fourthImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(4)');
                let fifthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:first-child');
                let sixthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(2)');
                let seventhImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(3)');
                let eigthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(4)');
                if (firstImgSlot != null) {
                    thisMonthTeamImage1[i] = firstImgSlot.src
                } else {
                    thisMonthTeamImage1[i] = null;
                };
                if (secondImgSlot != null) {
                    thisMonthTeamImage2[i] = secondImgSlot.src
                } else {
                    thisMonthTeamImage2[i] = null;
                };
                if (thirdImgSlot != null) {
                    thisMonthTeamImage3[i] = thirdImgSlot.src
                } else {
                    thisMonthTeamImage3[i] = null;
                };
                if (fourthImgSlot != null) {
                    thisMonthTeamImage4[i] = fourthImgSlot.src
                } else {
                    thisMonthTeamImage4[i] = null;
                };
                if (fifthImgSlot != null) {
                    thisMonthTeamImage5[i] = fifthImgSlot.src
                } else {
                    thisMonthTeamImage5[i] = null;
                };
                if (sixthImgSlot != null) {
                    thisMonthTeamImage6[i] = sixthImgSlot.src
                } else {
                    thisMonthTeamImage6[i] = null;
                };
                if (seventhImgSlot != null) {
                    thisMonthTeamImage7[i] = seventhImgSlot.src
                } else {
                    thisMonthTeamImage7[i] = null;
                };
                if (eigthImgSlot != null) {
                    thisMonthTeamImage8[i] = eigthImgSlot.src
                } else {
                    thisMonthTeamImage8[i] = null;
                };
            };



            let nextMonthDescriptionTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-description-xl > div:first-child');
            let nextMonthDescriptionTextsArray = Array.from(nextMonthDescriptionTextsElements).map(nextMonthDescriptionTextsElement => nextMonthDescriptionTextsElement);
            let nextMonthDescriptionTextContent = [];
            for (let i = 0; i < nextMonthDescriptionTextsArray.length; i++) {
                nextMonthDescriptionTextContent[i] = nextMonthDescriptionTextsArray[i].textContent.trim();
            };

            let nextMonthProgressPercentageTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-progress-xl > span:nth-child(2)');
            let nextMonthProgressPercentageTextsArray = Array.from(nextMonthProgressPercentageTextsElements).map(nextMonthProgressPercentageTextsElement => nextMonthProgressPercentageTextsElement);
            let nextMonthProgressPercentage = [];
            let nextMonthProgressPercentageParsed = [];
            let nextMonthProgressPercentageBackground = [];
            for (let i = 0; i < nextMonthProgressPercentageTextsArray.length; i++) {
                nextMonthProgressPercentage[i] = nextMonthProgressPercentageTextsArray[i].textContent;
                nextMonthProgressPercentageParsed[i] = parseInt(nextMonthProgressPercentageTextsArray[i].textContent);
                nextMonthProgressPercentageBackground[i] = `background: linear-gradient(to right, purple ${nextMonthProgressPercentageParsed[i]}%, transparent ${nextMonthProgressPercentageParsed[i]}%, transparent 100%)`;
            };

            let nextMonthProgressWidthElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-progress-xl textarea');
            let nextMonthProgressWidthTextsArray = Array.from(nextMonthProgressWidthElements).map(nextMonthProgressWidthElement => nextMonthProgressWidthElement);
            let nextMonthProgressWidth = [];
            let nextMonthProgressMaxWidth = [];
            let nextMonthProgressPercentageFontSize = [];
            let nextMonthProgressCompleteTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-progress-xl > div:first-child > span:nth-child(2)');
            let nextMonthProgressCompleteTextsArray = Array.from(nextMonthProgressCompleteTextsElements).map(nextMonthProgressCompleteTextsElement => nextMonthProgressCompleteTextsElement);
            let nextMonthProgressCompletesOpacity = [];
            for (let i = 0; i < nextMonthProgressWidthTextsArray.length; i++) {
                if (nextMonthProgressPercentageParsed[i] >= 100) {
                    nextMonthProgressWidth[i] = 'width: 12vw;';
                    nextMonthProgressMaxWidth[i] = 'max-width: 110%;';
                    nextMonthProgressPercentageFontSize[i] = "font-size: 18px;";
                    nextMonthProgressCompletesOpacity[i] = "opacity: 1;";
                } else if (nextMonthProgressPercentageParsed[i] < 100) {
                    nextMonthProgressWidth[i] = `width: ${(nextMonthProgressPercentageParsed[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw;`;
                    nextMonthProgressMaxWidth[i] = 'max-width: 99%;';
                    nextMonthProgressPercentageFontSize[i] = "font-size: 25px;";
                    nextMonthProgressCompletesOpacity[i] = "opacity: 0;";
                };
            };

            let nextMonthStatusTextsElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-status-xl');
            let nextMonthStatusTextsArray = Array.from(nextMonthStatusTextsElements).map(nextMonthStatusTextsElement => nextMonthStatusTextsElement);
            let nextMonthStatusTextContent = [];
            let nextMonthStatusColor = [];

            if (nextMonthStatusTextsArray.length === 0) {
                nextMonthStatusTextContent[i] = null;
            };

            for (let i = 0; i < nextMonthStatusTextsArray.length; i++) {
                let parentSlot = nextMonthStatusTextsArray[i].closest('.entry-container-xl');
                let firstStatusSlot = parentSlot.querySelector('.entry-status-xl');
                nextMonthStatusTextContent[i] = firstStatusSlot.textContent;
                if (firstStatusSlot.textContent === 'in progress...') {
                    nextMonthStatusColor[i] = "background: linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%);"
                } else if (firstStatusSlot.textContent === "reviewing...") {
                    nextMonthStatusColor[i] = "background: linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%); color: black;"
                } else if (firstStatusSlot.textContent === "need help...") {
                    nextMonthStatusColor[i] = "background: linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%);"
                };
            };

            let nextMonthElements = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-task-xl');
            let nextMonthTasks = Array.from(nextMonthElements);
            let nextMonthTaskValue = Array.from(nextMonthElements).map(nextMonthElement => nextMonthElement.value);
            let nextMonthTeamImage1 = [];
            let nextMonthTeamImage2 = [];
            let nextMonthTeamImage3 = [];
            let nextMonthTeamImage4 = [];
            let nextMonthTeamImage5 = [];
            let nextMonthTeamImage6 = [];
            let nextMonthTeamImage7 = [];
            let nextMonthTeamImage8 = [];

            for (let i = 0; i < nextMonthTasks.length; i++) {
                let parentSlot = nextMonthTasks[i].closest('.entry-container-xl');
                let firstImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:first-child');
                let secondImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(2)');
                let thirdImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(3)');
                let fourthImgSlot = parentSlot.querySelector('.entry-team-xl > div:first-child > img:nth-child(4)');
                let fifthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:first-child');
                let sixthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(2)');
                let seventhImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(3)');
                let eigthImgSlot = parentSlot.querySelector('.entry-team-xl > div:nth-child(2) > img:nth-child(4)');
                if (firstImgSlot != null) {
                    nextMonthTeamImage1[i] = firstImgSlot.src
                } else {
                    nextMonthTeamImage1[i] = null;
                };
                if (secondImgSlot != null) {
                    nextMonthTeamImage2[i] = secondImgSlot.src
                } else {
                    nextMonthTeamImage2[i] = null;
                };
                if (thirdImgSlot != null) {
                    nextMonthTeamImage3[i] = thirdImgSlot.src
                } else {
                    nextMonthTeamImage3[i] = null;
                };
                if (fourthImgSlot != null) {
                    nextMonthTeamImage4[i] = fourthImgSlot.src
                } else {
                    nextMonthTeamImage4[i] = null;
                };
                if (fifthImgSlot != null) {
                    nextMonthTeamImage5[i] = fifthImgSlot.src
                } else {
                    nextMonthTeamImage5[i] = null;
                };
                if (sixthImgSlot != null) {
                    nextMonthTeamImage6[i] = sixthImgSlot.src
                } else {
                    nextMonthTeamImage6[i] = null;
                };
                if (seventhImgSlot != null) {
                    nextMonthTeamImage7[i] = seventhImgSlot.src
                } else {
                    nextMonthTeamImage7[i] = null;
                };
                if (eigthImgSlot != null) {
                    nextMonthTeamImage8[i] = eigthImgSlot.src
                } else {
                    nextMonthTeamImage8[i] = null;
                };
            };



            $.ajax({
                type: 'POST',
                url: '@Url.Page("/Index", null, new { handler = "Replace" })',
                data: { urgentTaskValue: urgentTaskValue, urgentTeamImage1: urgentTeamImage1, urgentTeamImage2: urgentTeamImage2,
                        urgentTeamImage3: urgentTeamImage3, urgentTeamImage4: urgentTeamImage4, urgentTeamImage5: urgentTeamImage5,
                        urgentTeamImage6: urgentTeamImage6, urgentTeamImage7: urgentTeamImage7, urgentTeamImage8: urgentTeamImage8,
                        urgentStatusTextContent: urgentStatusTextContent, urgentStatusColor: urgentStatusColor,
                        urgentDescriptionTextContent: urgentDescriptionTextContent, urgentProgressPercentage: urgentProgressPercentage,
                        urgentProgressPercentageParsed: urgentProgressPercentageParsed,
                        urgentProgressPercentageFontSize: urgentProgressPercentageFontSize,
                        urgentProgressPercentageBackground: urgentProgressPercentageBackground, urgentProgressWidth: urgentProgressWidth,
                        urgentProgressMaxWidth: urgentProgressMaxWidth, urgentProgressCompleteOpacity: urgentProgressCompletesOpacity,
                        thisMonthTaskValue: thisMonthTaskValue, thisMonthTeamImage1: thisMonthTeamImage1, thisMonthTeamImage2: thisMonthTeamImage2,
                        thisMonthTeamImage3: thisMonthTeamImage3, thisMonthTeamImage4: thisMonthTeamImage4, thisMonthTeamImage5: thisMonthTeamImage5,
                        thisMonthTeamImage6: thisMonthTeamImage6, thisMonthTeamImage7: thisMonthTeamImage7, thisMonthTeamImage8: thisMonthTeamImage8,
                        thisMonthStatusTextContent: thisMonthStatusTextContent, thisMonthStatusColor: thisMonthStatusColor,
                        thisMonthDescriptionTextContent: thisMonthDescriptionTextContent, thisMonthProgressPercentage: thisMonthProgressPercentage,
                        thisMonthProgressPercentageParsed: thisMonthProgressPercentageParsed,
                        thisMonthProgressPercentageFontSize: thisMonthProgressPercentageFontSize,
                        thisMonthProgressPercentageBackground: thisMonthProgressPercentageBackground, thisMonthProgressWidth: thisMonthProgressWidth,
                        thisMonthProgressMaxWidth: thisMonthProgressMaxWidth, thisMonthProgressCompleteOpacity: thisMonthProgressCompletesOpacity,
                        nextMonthTaskValue: nextMonthTaskValue, nextMonthTeamImage1: nextMonthTeamImage1, nextMonthTeamImage2: nextMonthTeamImage2,
                        nextMonthTeamImage3: nextMonthTeamImage3, nextMonthTeamImage4: nextMonthTeamImage4, nextMonthTeamImage5: nextMonthTeamImage5,
                        nextMonthTeamImage6: nextMonthTeamImage6, nextMonthTeamImage7: nextMonthTeamImage7, nextMonthTeamImage8: nextMonthTeamImage8,
                        nextMonthStatusTextContent: nextMonthStatusTextContent, nextMonthStatusColor: nextMonthStatusColor,
                        nextMonthDescriptionTextContent: nextMonthDescriptionTextContent, nextMonthProgressPercentage: nextMonthProgressPercentage,
                        nextMonthProgressPercentageParsed: nextMonthProgressPercentageParsed,
                        nextMonthProgressPercentageFontSize: nextMonthProgressPercentageFontSize,
                        nextMonthProgressPercentageBackground: nextMonthProgressPercentageBackground, nextMonthProgressWidth: nextMonthProgressWidth,
                        nextMonthProgressMaxWidth: nextMonthProgressMaxWidth, nextMonthProgressCompleteOpacity: nextMonthProgressCompletesOpacity},
                contentType: 'application/x-www-form-urlencoded',
                headers: {
                            RequestVerificationToken:
                                document.getElementById("REQUEST-VERIFICATION-TOKEN").value
                         },
                success: (result) => {
                    successfulSaveMessageXl();
                },
                error: (xhr, status, error) => {
                    failureSaveMessageXl();
                }
            });
        });
    });

@* 2 XL *@


@* 3 XL *@               @* There are a lot of things going on in this code block but a lot of it is similar to previous blocks.  Generally
                            speaking it allows the user to create a new entry in one of the categories (urgent, this month, or next month) and
                            also has a 'entriesHaveNotBeenClearedYetSwitchXl' variable that makes it so when an entry is added, the user can no
                            longer undo their 'Clear All' action and starts the process over.  Also, the scroll height tops for the 'This Month'
                            and 'Next Month' container elements are adjusted based on when an entry is added to keep the scrolls flush. *@

    let entriesHaveNotBeenClearedYetSwitchXl = true;    @* This variable allows the undo feature to be possible because it determines
                                                           if the entries have been cleared already so they can be undone if desired
                                                           before repopulation occurs because as soon as an entry is added after all
                                                           the entries have been cleared, it is no longer possible to undo the clear
                                                           all action. *@                                      



                                                                                                    @*  This scroll is used to prevent a glitch
                                                                                                        that occurs when the page is refreshed. *@
    let hideScrollbarElement = document.querySelector('.hide-scrollbar-container-xl');
        hideScrollbarElement.scrollTo({
            top: 0,
            behavior: 'auto'
        });
                                                                                                    @* The next 4 variables adjust the tops
                                                                                                       of the 'This Month' and 'Next Month'
                                                                                                       categories so the top of the elements
                                                                                                       can be aligned with the top of the
                                                                                                       'hide-scrollbar-container-xl' element
                                                                                                       when a new entry is added to any
                                                                                                       category. *@

    const thisMonthCategoryXl = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2)');    
    let thisMonthCategoryRectTopXl = thisMonthCategoryXl.getBoundingClientRect().top;
    const nextMonthCategoryXl = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3)');
    let nextMonthCategoryRectTopXl = nextMonthCategoryXl.getBoundingClientRect().top;


    const plusButtonXl = document.querySelector('.post-login-container-xl > div:nth-child(2) > div:nth-child(2) > div:nth-child(2) > button:first-child');
    const clearButtonXl = document.querySelector('.post-login-container-xl > div:nth-child(2) > div:nth-child(2) > div:nth-child(2) > button:nth-child(2)');
    const selectionElementXl = document.querySelector('.select-entry-creation-xl');
    const selectionElementLayoverXl = document.querySelector('.select-entry-creation-layover-xl');
    const urgentButtonXl = selectionElementXl.querySelector('button:first-child');
    const thisMonthButtonXl = selectionElementXl.querySelector('button:nth-child(2)');
    const nextMonthButtonXl = selectionElementXl.querySelector('button:nth-child(3)');
    const cancelButtonXl = selectionElementXl.querySelector('button:nth-child(4)');

    plusButtonXl.addEventListener('click', () => {
        selectionElementXl.style.transition = 'height .2s, width .2s';
        selectionElementXl.style.zIndex = 5;
        selectionElementXl.style.height = '300px';
        selectionElementXl.style.width = '300px';
        selectionElementLayoverXl.style.zIndex = 4;
    });

    selectionElementLayoverXl.addEventListener('click', () => {
        selectionElementXl.style.transition = 'height 0s, width 0s';
        selectionElementXl.style.zIndex = 1;
        selectionElementXl.style.height = '5px';
        selectionElementXl.style.width = '5px';
        selectionElementLayoverXl.style.zIndex = -1;
    });

    cancelButtonXl.addEventListener('click', () => {
        selectionElementXl.style.transition = 'height 0s, width 0s';
        selectionElementXl.style.zIndex = 1;
        selectionElementXl.style.height = '5px';
        selectionElementXl.style.width = '5px';
        selectionElementLayoverXl.style.zIndex = -1;
    });

    urgentButtonXl.addEventListener('click', addEntryXl);
    thisMonthButtonXl.addEventListener('click', addEntryXl);
    nextMonthButtonXl.addEventListener('click', addEntryXl);
    clearButtonXl.addEventListener('click', clearAllEntriesXl);


    document.querySelectorAll('.entry-section-xl > button:nth-child(2)').forEach(element => {
        element.addEventListener('click', addEntryXl);
    });


    function addEntryXl(event) {
        let adjustHeightsOfCategoriesRectTopSwitch1 = true;
        let adjustHeightsOfCategoriesRectTopSwitch2 = true;
        let adjustHeightsOfCategoriesRectTopSwitch3 = true;
        entriesHaveNotBeenClearedYetSwitchXl = true;
        let clearAllButton = document.querySelector('.post-login-container-xl > div:nth-child(2) > div:nth-child(2) > div:nth-child(2) > button:nth-child(2)');
        clearAllButton.textContent = 'Clear All';
        if (event.target.textContent === 'Urgent' || event.target.style.color === 'red') {
            category = document.querySelector('.hide-scrollbar-container-xl > div:first-child > div:nth-child(2)');
            let hideScrollbarElement = document.querySelector('.hide-scrollbar-container-xl');
            hideScrollbarElement.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
            adjustHeightsOfCategoriesRectTopSwitch1 = false;
            let possibleSectionElement = category.querySelector('section');
            if (possibleSectionElement) {
                adjustHeightsOfCategoriesRectTopSwitch3 = false
                possibleSectionElement.remove();
            };
        };
        if (event.target.textContent === 'This Month' || event.target.style.color === 'teal') {
            category = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) > div:nth-child(2)');
            let hideScrollbarElementContainer = document.querySelector('.post-login-container-xl > div:nth-child(3)');
            let hideScrollbarElementContainerRectTop = hideScrollbarElementContainer.getBoundingClientRect().top;
            let hideScrollbarElement = document.querySelector('.hide-scrollbar-container-xl');
            let scrollOffset = ((thisMonthCategoryRectTopXl - hideScrollbarElementContainerRectTop) + (newScrollVariableXl)); @* The 'newScrollVariableXl' can be found in code block '1 ALL'. *@
            hideScrollbarElement.scrollTo({
                top: scrollOffset,
                behavior: 'smooth'
            });
            adjustHeightsOfCategoriesRectTopSwitch2 = false;
            let possibleSectionElement = category.querySelector('section');
            if (possibleSectionElement) {
                adjustHeightsOfCategoriesRectTopSwitch3 = false;
                possibleSectionElement.remove();
            };
        };
        if (event.target.textContent === 'Next Month' || event.target.style.color === 'rgb(195, 87, 219)') {
            category = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) > div:nth-child(2)');
            let hideScrollbarElementContainer = document.querySelector('.post-login-container-xl > div:nth-child(3)');
            let hideScrollbarElementContainerRectTop = hideScrollbarElementContainer.getBoundingClientRect().top;
            let hideScrollbarElement = document.querySelector('.hide-scrollbar-container-xl');
            let scrollOffset = ((nextMonthCategoryRectTopXl - hideScrollbarElementContainerRectTop) + (newScrollVariableXl));
            hideScrollbarElement.scrollTo({
                top: scrollOffset,
                behavior: 'smooth'
            });
            let possibleSectionElement = category.querySelector('section');
            if (possibleSectionElement) {
                possibleSectionElement.remove();
            };
        };
        setTimeout(() => {
            let entry = document.createElement('div');
            entry.classList.add('entry-container-xl')
            entry.style.display = 'flex';
            entry.addEventListener('dragstart', () => {
                if (dragImageNotEntrySwitchXl === true) {
                    entry.classList.add('dragging-entry-xl');
                };
            });
            entry.addEventListener('dragover', rearrangeEntryDragXl);
            entry.addEventListener('dragend', () => {
                if (dragImageNotEntrySwitchXl === true) {
                    entry.classList.remove('dragging-entry-xl');
                };
            });
            entry.addEventListener('mouseover', () => {
                entry.classList.add('hover-xl');
            });
            entry.addEventListener('mouseout', () => {
                entry.classList.remove('hover-xl');
            });
            let rearrange = document.createElement('div');
            rearrange.classList.add('entry-rearrange-xl');
            rearrange.addEventListener('mouseover', () => {
                let parent = rearrange.closest('.entry-container-xl');
                parent.draggable = true;
            });
            rearrange.addEventListener('mouseout', () => {
                let parent = rearrange.closest('.entry-container-xl');
                parent.draggable = false;
            });
            entry.appendChild(rearrange);
            let task = document.createElement('input');
            task.classList.add('entry-task-xl');
            task.addEventListener('blur', moveCursorToStartOfEntryTaskInputXl);
            task.value = "Task Title";
            task.maxLength = 20;
            entry.appendChild(task);
            let team = document.createElement('div');
            team.classList.add('entry-team-xl');
            team.style.display = 'flex';
            team.style.flexDirection = 'column';
            team.addEventListener('mouseover', teamMouseOverXl);
            team.addEventListener('mouseout', teamMouseOutXl);
            let teamDiv1A = document.createElement('div');
            teamDiv1A.classList.add('container-for-draggable-image-xl');
            teamDiv1A.addEventListener('dragover', teamDragOverXl);
            teamDiv1A.style.display = 'flex';
            let teamImage1B = document.createElement('img');
            teamImage1B.classList.add('draggable-image-xl');
            teamImage1B.addEventListener('dragstart', teamDragStartXl);
            teamImage1B.addEventListener('dragend', teamDragEndXl);
            teamImage1B.addEventListener('mouseover', () => {
            dragImageNotEntrySwitchXl = false;
            });
            teamImage1B.addEventListener('mouseout', () => {
            dragImageNotEntrySwitchXl = true;
            });
            teamImage1B.src = 'media/teamGirl1.png';
            teamImage1B.draggable = 'true';
            teamDiv1A.appendChild(teamImage1B);
            let teamDiv2A = document.createElement('div');
            teamDiv2A.classList.add('container-for-draggable-image-xl');
            teamDiv2A.addEventListener('dragover', teamDragOverXl);
            teamDiv2A.style.display = 'flex';
            let teamImage2B = document.createElement('img');
            teamImage2B.classList.add('draggable-image-xl');
            teamImage2B.addEventListener('dragstart', teamDragStartXl);
            teamImage2B.addEventListener('dragend', teamDragEndXl);
            teamImage2B.addEventListener('mouseover', () => {
            dragImageNotEntrySwitchXl = false;
            });
            teamImage2B.addEventListener('mouseout', () => {
            dragImageNotEntrySwitchXl = true;
            });
            teamImage2B.src = 'media/teamGuy1.png';
            teamImage2B.draggable = 'true';
            let teamImage3B = document.createElement('img');
            teamImage3B.classList.add('draggable-image-xl');
            teamImage3B.addEventListener('dragstart', teamDragStartXl);
            teamImage3B.addEventListener('dragend', teamDragEndXl);
            teamImage3B.addEventListener('mouseover', () => {
            dragImageNotEntrySwitchXl = false;
            });
            teamImage3B.addEventListener('mouseout', () => {
            dragImageNotEntrySwitchXl = true;
            });
            teamImage3B.src = 'media/teamGirl2.png';
            teamImage3B.draggable = 'true';
            let teamImage4B = document.createElement('img');
            teamImage4B.classList.add('draggable-image-xl');
            teamImage4B.addEventListener('dragstart', teamDragStartXl);
            teamImage4B.addEventListener('dragend', teamDragEndXl);
            teamImage4B.addEventListener('mouseover', () => {
            dragImageNotEntrySwitchXl = false;
            });
            teamImage4B.addEventListener('mouseout', () => {
            dragImageNotEntrySwitchXl = true;
            });
            teamImage4B.src = 'media/teamGuy2.png';
            teamImage4B.draggable = 'true';
            teamDiv2A.appendChild(teamImage2B);
            teamDiv2A.appendChild(teamImage3B);
            teamDiv2A.appendChild(teamImage4B);
            team.appendChild(teamDiv1A);
            team.appendChild(teamDiv2A);
            entry.appendChild(team);
            let status = document.createElement('div');
            status.classList.add('entry-status-xl');
            status.textContent = 'in progress...';
            status.style.display = 'flex';
            status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
            status.addEventListener('click', () => {
                if (status.textContent === 'in progress...') {
                    status.textContent = 'reviewing...';
                    status.style.color = 'black';
                    status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                } else if (status.textContent === 'reviewing...') {
                    status.textContent = 'need help...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                } else if (status.textContent === 'need help...') {
                    status.textContent = 'in progress...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                }
            });
            entry.appendChild(status);
            let description = document.createElement('div');
            description.classList.add('entry-description-xl');
            description.style.display = 'flex';
            let descriptionDiv1A = document.createElement('div');
            descriptionDiv1A.contentEditable = 'true';
            descriptionDiv1A.textContent = 'Task Description';
            description.appendChild(descriptionDiv1A);
            entry.appendChild(description);
            let progress = document.createElement('div');
            progress.classList.add('entry-progress-xl');
            progress.style.display = 'flex';
            let progressDiv1A = document.createElement('div');
            let progressSpan1A = document.createElement('span');
            progressDiv1A.style.display = 'flex';
            progressSpan1A.textContent = '10%';
            let progressDiv1B = document.createElement('div');
            let progressSpan1B = document.createElement('span');
            progressDiv1B.style.display = 'flex';
            progressSpan1B.textContent = 'COMPLETE';
            let progressTextArea1C = document.createElement('textarea');
            progressTextArea1C.classList.add('entry-textarea-xl');
            textAreaResizeObserverXl.observe(progressTextArea1C);
            progressTextArea1C.addEventListener('click', textAreaChangeSwitchXl);
            progressTextArea1C.addEventListener('mouseout', () => {
                if (conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl === true) {
                    let ggParent = progressTextArea1C.closest('.entry-progress-xl');
                    let percentageText = ggParent.children[1];
                    let widthFromPxToVw = parseInt(percentageText.textContent.replace('%', ''), 10);
                    progressTextArea1C.style.width = ((widthFromPxToVw * convertPxToVwCalculationNumberXl) + 'vw');
                    conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = false;
                };
            });
            progressDiv1B.appendChild(progressTextArea1C);
            progressDiv1A.appendChild(progressDiv1B);
            progressDiv1A.appendChild(progressSpan1B);
            progress.appendChild(progressDiv1A);
            progress.appendChild(progressSpan1A);
            entry.appendChild(progress);
            let checkmark = document.createElement('div');
            checkmark.classList.add('entry-checkmark-xl');
            checkmark.style.display = 'flex';
            let checkmarkImage1A = document.createElement('img');
            checkmarkImage1A.src = '/media/checkmarkIcon.png';
            checkmarkImage1A.addEventListener('click', checkmarkCompleteXl);
            checkmark.appendChild(checkmarkImage1A);
            entry.appendChild(checkmark);
            let minus = document.createElement('div');
            minus.classList.add('entry-minus-xl');
            minus.style.display = 'flex';
            let minusImage1A = document.createElement('img');
            minusImage1A.src = '/media/minusIcon.png';
            minusImage1A.addEventListener('click', minusEntryXl);
            minus.appendChild(minusImage1A);
            entry.appendChild(minus);
            category.appendChild(entry);
            entry.style.backgroundColor = 'black';
            entry.offsetHeight;
            entry.style.transition = 'background-color .5s';
            entry.style.backgroundColor = 'rgb(253, 253, 253)';
            }, 500);
            setTimeout(() => {
                if (adjustHeightsOfCategoriesRectTopSwitch3 === true) {
                    if (adjustHeightsOfCategoriesRectTopSwitch1 === false) {
                            thisMonthCategoryRectTopXl += 52;
                            nextMonthCategoryRectTopXl += 52;
                        adjustHeightsOfCategoriesRectTopSwitch1 = true;
                    };
                };
                if (adjustHeightsOfCategoriesRectTopSwitch3 === true) {
                    if (adjustHeightsOfCategoriesRectTopSwitch2 === false) {
                            nextMonthCategoryRectTopXl += 52;
                        adjustHeightsOfCategoriesRectTopSwitch2 = true;
                    };
                };
                adjustHeightsOfCategoriesRectTopSwitch3 = true;
            }, 600);
        selectionElementXl.style.transition = 'height 0s, width 0s';
        selectionElementXl.style.zIndex = 1;
        selectionElementXl.style.height = '5px';
        selectionElementXl.style.width = '5px';
        selectionElementLayoverXl.style.zIndex = -1;
    };

@* 3 XL *@


@* 4 XL *@               @* Allows the user to remove all of the entries as well as undo the action as long as an entry wasn't added after
                            the clear all action took place.  Temporary variables and arrays are provided to store the information just in
                            case the user does want to undo the action.  The user is able to undo the action and get all of the entries back
                            in the order they were cleared in as well as have their scrolling attributes back to what they were. *@

    let urgentEntriesTempXl = [];
    let thisMonthEntriesTempXl = [];
    let nextMonthEntriesTempXl = [];
    let thisMonthCategoryRectTopTempXl = 0;
    let nextMonthCategoryRectTopTempXl = 0;

    function clearAllEntriesXl(event) {
        if (entriesHaveNotBeenClearedYetSwitchXl === true) {
        let urgentEntries = document.querySelector('.hide-scrollbar-container-xl > div:first-child > div:nth-child(2)');
        let thisEntries = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) > div:nth-child(2)');
        let nextEntries = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) > div:nth-child(2)');
        entriesHaveNotBeenClearedYetSwitchXl = false;
        event.target.textContent = 'Undo Clear';
        urgentEntriesTempXl.length = 0;
        thisMonthEntriesTempXl.length = 0;
        nextMonthEntriesTempXl.length = 0;
        thisMonthCategoryRectTopTempXl = thisMonthCategoryRectTopXl;
        nextMonthCategoryRectTopTempXl = nextMonthCategoryRectTopXl;
        urgentEntriesTempXl = Array.from(urgentEntries.children);
        thisMonthEntriesTempXl = Array.from(thisEntries.children);
        nextMonthEntriesTempXl = Array.from(nextEntries.children);
        let allEntries = document.querySelectorAll('.entry-container-xl');        
        allEntries.forEach(entry => {
            let parent = entry.closest('.category-entries-container-xl');
            let ggParent = entry.closest('.one-of-three-containers-xl');
            let ggSpan = ggParent.querySelector('span');
            entry.remove();
            if (parent.children.length === 0) {
                let section = document.createElement('section');
                section.style.display = 'flex';
                section.style.justifyContent = 'center';
                section.style.alignItems = 'center';
                let sectionSpan1A = document.createElement('span');
                sectionSpan1A.textContent = 'This section is empty...';
                let sectionButton1A = document.createElement('button');
                sectionButton1A.textContent = 'click here to add an entry';
                if (ggSpan.textContent === 'Urgent') {
                    sectionButton1A.style.color = 'red';
                    section.style.border = '1px solid red';
                } else if (ggSpan.textContent === 'This Month') {
                    sectionButton1A.style.color = 'teal';
                    section.style.border = '1px solid teal';
                } else if (ggSpan.textContent === 'Next Month') {
                    sectionButton1A.style.color = 'rgb(195, 87, 219)';
                    section.style.border = '1px solid rgb(195, 87, 219)';
                };
                sectionButton1A.addEventListener('click', addEntryXl);
                section.appendChild(sectionSpan1A);
                section.appendChild(sectionButton1A);
                parent.appendChild(section);
            };
        });
        setTimeout(() => {
            if (urgentEntriesTempXl.length === 1 && thisMonthEntriesTempXl.length === 1) {
                thisMonthCategoryRectTopXl = thisMonthCategoryRectTopTempXl;
                nextMonthCategoryRectTopXl = nextMonthCategoryRectTopTempXl;
            } else if (urgentEntriesTempXl.length === 1 && thisMonthEntriesTempXl.length > 1) {
                thisMonthCategoryRectTopXl = thisMonthCategoryRectTopTempXl;
                nextMonthCategoryRectTopXl = (nextMonthCategoryRectTopTempXl - ((thisMonthEntriesTempXl.length - 1) * 52));
            } else if (urgentEntriesTempXl.length > 1 && thisMonthEntriesTempXl.length === 1) {
                thisMonthCategoryRectTopXl = (thisMonthCategoryRectTopTempXl - ((urgentEntriesTempXl.length - 1) * 52));
                nextMonthCategoryRectTopXl = (nextMonthCategoryRectTopTempXl - ((urgentEntriesTempXl.length - 1) * 52));
            } else if (urgentEntriesTempXl.length > 1 && thisMonthEntriesTempXl.length > 1) {
                thisMonthCategoryRectTopXl = (thisMonthCategoryRectTopTempXl - ((urgentEntriesTempXl.length - 1) * 52));
                nextMonthCategoryRectTopXl = (nextMonthCategoryRectTopTempXl - (((urgentEntriesTempXl.length - 1) * 52) + ((thisMonthEntriesTempXl.length - 1) * 52)));
            };
        }, 50);
        } else if (entriesHaveNotBeenClearedYetSwitchXl === false) {
            entriesHaveNotBeenClearedYetSwitchXl = true;
            event.target.textContent = 'Clear All';
            let urgentEntries = document.querySelector('.hide-scrollbar-container-xl > div:first-child > div:nth-child(2)');
            let thisEntries = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(2) > div:nth-child(2)');
            let nextEntries = document.querySelector('.hide-scrollbar-container-xl > div:nth-child(3) > div:nth-child(2)');
            let urgentSection = urgentEntries.querySelector('section');
            let thisSection = thisEntries.querySelector('section');
            let nextSection = nextEntries.querySelector('section');
            urgentSection.remove();
            thisSection.remove();
            nextSection.remove();
            thisMonthCategoryRectTopXl = thisMonthCategoryRectTopTempXl;
            nextMonthCategoryRectTopXl = nextMonthCategoryRectTopTempXl;
            urgentEntriesTempXl.forEach(child => {
                urgentEntries.appendChild(child);
            });
            thisMonthEntriesTempXl.forEach(child => {
                thisEntries.appendChild(child);
            });
            nextMonthEntriesTempXl.forEach(child => {
                nextEntries.appendChild(child);
            });
        };
    };

@* 4 XL *@


@* 5 XL *@               @* There are many different things going on in this block of code so it will be explained
                            on a more line-to-line basis, but generally speaking it controls the functionality for
                            being able to drag and drop and change the order of the various entries within a single
                            category (urgent, this month, or next month).  Also, it makes it impossible for an entry
                            in one cateogry to be added or removed from another category. *@

    document.querySelectorAll('.entry-container-xl').forEach(element => {
        element.addEventListener('dragstart', () => {
            if (dragImageNotEntrySwitchXl === true) {
                element.classList.add('dragging-entry-xl');
            };
        });
        element.addEventListener('dragover', rearrangeEntryDragXl);
        element.addEventListener('dragend', () => {
            if (dragImageNotEntrySwitchXl === true) {
                element.classList.remove('dragging-entry-xl');
            };
        });
    });

    document.querySelectorAll('.entry-rearrange-xl').forEach(element => {
        element.addEventListener('mouseover', () => {
            let parent = element.closest('.entry-container-xl');
            parent.draggable = true;
        });
        element.addEventListener('mouseout', () => {
            let parent = element.closest('.entry-container-xl');
            parent.draggable = false;
        });
    });

    function rearrangeEntryDragXl(event) {
        event.preventDefault();
        let entry = event.target;
        let parent = entry.closest('.category-entries-container-xl');
        let gParent = parent.closest('.one-of-three-containers-xl');
        let draggable = document.querySelector('.dragging-entry-xl');
        let thisIsTheEntryBelowTheEntryBeingDraggedELEMENT = thisIsTheEntryBelowTheEntryBeingDraggedFUNCTIONXl(parent, event.clientY);
        if (parent.contains(draggable)) {    @* This line of code ensures that an entry cannot be place in a different category from where it started (so an entry in the 'Urgent' category cannot be placed in the 'This Month' or 'Next Month' category).*@
            if (thisIsTheEntryBelowTheEntryBeingDraggedELEMENT == null) {
                parent.appendChild(draggable);
            } else {
                parent.insertBefore(draggable, thisIsTheEntryBelowTheEntryBeingDraggedELEMENT);
            };
        };
    };

                                                                    @* The next function controls the functionality for when
                                                                       an entry is being dragged over its container (in this
                                                                       case the '.category-entries-container-xl' element).  The
                                                                       'draggableElements' variable selects all of the
                                                                       remaining entries within the same container but not
                                                                       the one that is currently being dragged to determine their
                                                                       position relative to each other.  Their position is determined
                                                                       and then returns the decision of whether the dragging entry
                                                                       has no more entries underneath it and needs to be appended to
                                                                       the container it is currently being dragged over or whether it
                                                                       needs to be inserted before the entry underneath it (assuming
                                                                       there is one).  The crucial points that determine this
                                                                       functionality is whether or not the y-coordinate of when the
                                                                       drag started on the '.draggable-entry-xl' has passed the halfway
                                                                       point of the other non-dragging image's width AND NOT IF THE
                                                                       HALFWAY POINT OF THE DRAGGING IMAGE HAS PASSED THE HALFWAY
                                                                       POIINT OF THE OTHER NON-DRAGGING IMAGES (the dragstart mouse
                                                                       event matters).*@

    function thisIsTheEntryBelowTheEntryBeingDraggedFUNCTIONXl(container, y) {
        let draggableElements = [...container.querySelectorAll('.entry-container-xl:not(.dragging-entry-xl)')];

        return draggableElements.reduce((closest, child) => {
            let childRect = child.getBoundingClientRect();
            let offset = y - childRect.top - childRect.height / 2;
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child };
            } else {
                return closest;
            }
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    };
    
@* 5 XL *@


@* 6 XL *@               @* Fixes a bug for the Firefox browser that doesn't move position of the cursor back to the 
                            beginning of the input field when it is no longer focused. *@

    document.querySelectorAll('.entry-task-xl').forEach(element => {
        element.addEventListener('blur', moveCursorToStartOfEntryTaskInputXl);
    });

    if (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/Edge/.test(navigator.userAgent)) {
        document.querySelectorAll('.entry-textarea-xl').forEach(element => {
            element.style.cursor = 'auto';
        });
    } else {
        function moveCursorToStartOfEntryTaskInputXl(event) {
            event.target.setSelectionRange(0, 0);
        }
    }

@* 6 XL *@


@* 7 XL *@               @* Prevents the user from being able to drag an image into these fields. *@

    document.querySelectorAll('.entry-task-xl').forEach(element => {
        element.addEventListener('dragover', (event) => {
            event.preventDefault();
        });
        element.addEventListener('drop', (event) => {
            event.preventDefault();
        });
    });

    document.querySelectorAll('.entry-description-xl').forEach(element => {
        element.addEventListener('dragover', (event) => {
            event.preventDefault();
        });
        element.addEventListener('drop', (event) => {
            event.preventDefault();
        });
    });

@* 7 XL *@


@* 8 XL *@               @* There are many different things going on in this block of code so it will be explained
                            on a more line-to-line basis, but generally speaking it controls the functionality for
                            being able to drag and drop and change the order of the various 4 team images into 1
                            of the 2 containers (also it makes it impossible for there to be anything other than 4
                            images total for an entire entry so there is no cross-dropping images into different
                            entries). *@

    let dragImageNotEntrySwitchXl = true;     @* This variable allows for the image to become draggable, but not the 
                                               entire entry all at once.  This allows the entry to become draggable
                                               by a separate event, which is when the color bar at the left side of
                                               the entry is grabbed.  This variable equals false when any of
                                               the 4 team images are moused over and then equals true again when
                                               any of the 4 team images are moused out. *@

    const descriptionLayoverXl = document.querySelector('.description-layover-xl');   @* When any of the 4 team images are dragged,
                                                                                         the z-index of this variable changes so that
                                                                                         it coveres the entire height of the window
                                                                                         viewport and has enough width to cover all of
                                                                                         the 'entry-description-xl' divs so that the image
                                                                                         cannot be dragged into the editable container. *@

    document.querySelectorAll('.entry-team-xl').forEach(element => {
        element.addEventListener('mouseover', teamMouseOverXl);
        element.addEventListener('mouseout', teamMouseOutXl);
    });

    document.querySelectorAll('.draggable-image-xl').forEach(element => {
        element.addEventListener('mouseover', () => {
            dragImageNotEntrySwitchXl = false;
        });
        element.addEventListener('mouseout', () => {
            dragImageNotEntrySwitchXl = true;
        });
        element.addEventListener('dragstart', teamDragStartXl);
        element.addEventListener('dragend', teamDragEndXl);
    });


                                                                                        @* The next block of code assigns the
                                                                                           dragover eventListener to the elements,
                                                                                           which is attached to the teamDragOverXl
                                                                                           function. The teamDragOverXl function is
                                                                                           the most complex part of this code block
                                                                                           and is explained better further down. *@

    document.querySelectorAll('.container-for-draggable-image-xl').forEach(element => {
        element.addEventListener('dragover', teamDragOverXl);
    });

    function teamMouseOverXl(event) {
        let image = event.target;
        let gParent = image.closest('.entry-team-xl');
        let bottomDiv = gParent.querySelector('div:nth-child(2)');
        bottomDiv.style.marginTop = '0px';
    };

    function teamMouseOutXl(event) {
        let image = event.target;
        let gParent = image.closest('.entry-team-xl');
        let bottomDiv = gParent.querySelector('div:nth-child(2)');
        bottomDiv.style.marginTop = '-50px';
    };

    function teamDragStartXl(event) {
        let image = event.target;
        image.classList.add('dragging-image-xl');
        descriptionLayoverXl.style.zIndex = '6';
        dragImageNotEntrySwitchXl = false;   @* This variable stops the '.entry-container-xl' element that contains the '.draggable-image-xl' from being draggable when the image becomes draggable. *@
    };

    function teamDragOverXl(event) {
        event.preventDefault();
        let image = event.target;
        let draggingClass = document.querySelector('.dragging-image-xl');
        let parent = image.closest('.container-for-draggable-image-xl');
        let gParent = draggingClass.closest('.entry-team-xl');
        let gParentFirstChild = gParent.querySelector('div:first-child');
        let gParentSecondChild = gParent.querySelector('div:nth-child(2)');
        let thisIsTheImageToTheRightOfTheImageBeingDraggedELEMENT = thisIsTheImageToTheRightOfTheImageBeingDraggedFUNCTIONXl(parent, event.clientX);    @* The "thisIsTheImageToTheRightOfTheImageBeingDraggedFUNCTIONXl" function is the most complex part for this block of code and is explained further down. *@
        if (gParent.contains(parent)) {    @* This line of code ensures every entry can only contain 4 images at all times. *@
            if (thisIsTheImageToTheRightOfTheImageBeingDraggedELEMENT == null) {    @* This line of code adds the image to the end because it detects no image to the right. *@
                parent.appendChild(draggingClass);
                if (gParentFirstChild.children.length === 4 || gParentSecondChild.children.length === 4) {
                    gParentFirstChild.style.gap = '.25vw';
                    gParentSecondChild.style.gap = '.25vw';
                } else if (gParentFirstChild.children.length < 4 || gParentSecondChild.children.length < 4) {
                    gParentFirstChild.style.gap = '1.5vw';
                    gParentSecondChild.style.gap = '1.5vw';
                }
            } else {
                parent.insertBefore(draggingClass, thisIsTheImageToTheRightOfTheImageBeingDraggedELEMENT);    @* This line of code inserts the image before the image to the right (assuming it exists). *@
                if (gParentFirstChild.children.length === 4 || gParentSecondChild.children.length === 4) {
                    gParentFirstChild.style.gap = '.25vw';
                    gParentSecondChild.style.gap = '.25vw';
                } else if (gParentFirstChild.children.length < 4 || gParentSecondChild.children.length < 4) {
                    gParentFirstChild.style.gap = '1.5vw';
                    gParentSecondChild.style.gap = '1.5vw';
                }
            };
        };
    };


                                                                    @* The next function controls the functionality for when
                                                                       1 of the 4 team images is being dragged over 1 of the 2
                                                                       possible containers within its grandparent element (in this
                                                                       case the '.entry-team-xl' element).  The 'draggableElements' variable
                                                                       selects all of the 3 remaining draggable images that
                                                                       are not currently being dragged to determine their position
                                                                       in their current container.  Their position is determined
                                                                       and then returns the decision of whether the dragging
                                                                       image has no more images to its right and needs to be appended
                                                                       to the container it is currently being dragged over or whether
                                                                       it needs to be inserted before the image to the right of it
                                                                       (assuming there is one). The crucial points that determine
                                                                       this functionality is whether or not the x-coordinate of when
                                                                       the drag started on the '.draggable-image-xl' has passed the halfway
                                                                       point of the other non-dragging image's width AND NOT IF THE HALFWAY
                                                                       POINT OF THE DRAGGING IMAGE HAS PASSED THE HALFWAY POINT OF THE
                                                                       OTHER NON-DRAGGING IMAGES (the dragstart mouse event matters).*@

    function thisIsTheImageToTheRightOfTheImageBeingDraggedFUNCTIONXl(parent, x) {
        let draggableElements = [...parent.querySelectorAll('.draggable-image-xl:not(.dragging-image-xl)')];

        return draggableElements.reduce((closest, child) => {
            let childRect = child.getBoundingClientRect();
            let offset = x - childRect.left - childRect.width / 2;
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child };
            } else {
                return closest;
            }
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    };

    function teamDragEndXl(event) {
        let image = event.target;
        image.classList.remove('dragging-image-xl');
        setTimeout(() => {
            descriptionLayoverXl.style.zIndex = '1';
        }, 10);
        dragImageNotEntrySwitchXl = true;
    };

@* 8 XL *@


@* 9 XL *@               

    const urgentStatusElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:first-child .entry-status-xl');
    const thisMonthStatusElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(2) .entry-status-xl');
    const nextMonthStatusElementsXl = document.querySelectorAll('.hide-scrollbar-container-xl > div:nth-child(3) .entry-status-xl');

    urgentStatusElementsXl.forEach(urgentStatusElementXl => {
        urgentStatusElementXl.addEventListener('click', () => {
           if (urgentStatusElementXl.textContent === 'in progress...') {
               urgentStatusElementXl.textContent = 'reviewing...';
               urgentStatusElementXl.style.color = 'black';
               urgentStatusElementXl.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
           } else if (urgentStatusElementXl.textContent === 'reviewing...') {
               urgentStatusElementXl.textContent = 'need help...';
               urgentStatusElementXl.style.color = 'white';
               urgentStatusElementXl.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
           } else if (urgentStatusElementXl.textContent === 'need help...') {
               urgentStatusElementXl.textContent = 'in progress...';
               urgentStatusElementXl.style.color = 'white';
               urgentStatusElementXl.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
           }
        });
    });

    thisMonthStatusElementsXl.forEach(thisMonthStatusElementXl => {
        thisMonthStatusElementXl.addEventListener('click', () => {
           if (thisMonthStatusElementXl.textContent === 'in progress...') {
               thisMonthStatusElementXl.textContent = 'reviewing...';
               thisMonthStatusElementXl.style.color = 'black';
               thisMonthStatusElementXl.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
           } else if (thisMonthStatusElementXl.textContent === 'reviewing...') {
               thisMonthStatusElementXl.textContent = 'need help...';
               thisMonthStatusElementXl.style.color = 'white';
               thisMonthStatusElementXl.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
           } else if (thisMonthStatusElementXl.textContent === 'need help...') {
               thisMonthStatusElementXl.textContent = 'in progress...';
               thisMonthStatusElementXl.style.color = 'white';
               thisMonthStatusElementXl.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
           }
        });
    });

    nextMonthStatusElementsXl.forEach(nextMonthStatusElementXl => {
        nextMonthStatusElementXl.addEventListener('click', () => {
           if (nextMonthStatusElementXl.textContent === 'in progress...') {
               nextMonthStatusElementXl.textContent = 'reviewing...';
               nextMonthStatusElementXl.style.color = 'black';
               nextMonthStatusElementXl.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
           } else if (nextMonthStatusElementXl.textContent === 'reviewing...') {
               nextMonthStatusElementXl.textContent = 'need help...';
               nextMonthStatusElementXl.style.color = 'white';
               nextMonthStatusElementXl.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
           } else if (nextMonthStatusElementXl.textContent === 'need help...') {
               nextMonthStatusElementXl.textContent = 'in progress...';
               nextMonthStatusElementXl.style.color = 'white';
               nextMonthStatusElementXl.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
           }
        });
    });

@* 9 XL *@


@* 10 XL *@               @* Adjusts the percentage text based on the width of the '.entry-textarea-xl' element and
                             then converts the width back to vw from px (by default the textarea width changes
                             to px from whatever it was when it is resized directly and not indirectly by window
                             resize). *@

    let conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = false;
    
    let textAreaResizeObserverXl = new ResizeObserver(elements => {
        for (let element of elements) {
            let ggParent = element.target.closest('.entry-progress-xl');
            let gParent = ggParent.querySelector('div:first-child');
            let gParentRect = gParent.getBoundingClientRect().width;
            let parent = ggParent.querySelector('div:first-child > div:first-child');
            let parentRect = parent.getBoundingClientRect().width;
            let percentageText = ggParent.children[1];
            let newPercentageText = ((parentRect / gParentRect) * 100).toFixed(0);
                if (newPercentageText >= 100) {
                    newPercentageText = 100;
                };
                if (newPercentageText <= 14) {
                    newPercentageText = 14;
                };
            percentageText.textContent = newPercentageText + "%";
        };
    });

    document.querySelectorAll('.entry-textarea-xl').forEach(element => {
        if (element.style.width === '12vw') {
            element.style.cursor = 'default';
            element.style.resize = 'none';
        } else {
            textAreaResizeObserverXl.observe(element);
            element.addEventListener('click', textAreaChangeSwitchXl);
        }
    });

    document.querySelectorAll('.entry-textarea-xl').forEach(element => {
        element.addEventListener('mouseout', () => {
            if (conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl === true) {
                let ggParent = element.closest('.entry-progress-xl');
                let percentageText = ggParent.children[1];
                let widthFromPxToVw = parseInt(percentageText.textContent.replace('%', ''), 10);
                element.style.width = ((widthFromPxToVw * convertPxToVwCalculationNumberXl) + 'vw');
                conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = false;
            };
        });
    });

    function textAreaChangeSwitchXl() {
        conversionFromPxToVwOnlyHappensWhenTextAreaIsClickedFirstSwitchXl = true;
    };

@* 10 XL *@


@* 11 XL *@               @* Generates a series of events that happen in the previous sibling 'entry-progress-xl'
                             element.  This action cannot be reversed because if the person changes their mind, it is
                             relatively easy to just create another entry and fill out the information the way
                             it was before the checkmark was clicked (unlike the 'Clear All' button that is
                             reversable because repopulating every entry could be difficult and time consuming). *@

    document.querySelectorAll('.entry-checkmark-xl > img:first-child').forEach(element => {
        element.addEventListener('click', checkmarkCompleteXl);
    });

    function checkmarkCompleteXl(event) {
        let parent = event.target.closest('div');
        let previousSibling = parent.previousElementSibling;
        let textArea = previousSibling.querySelectorAll('.entry-textarea-xl')[0];
        let completeText = previousSibling.querySelectorAll('* > * > span')[0];
        let percentageText = previousSibling.children[1];
        let textAreaContainer = previousSibling.querySelector('div:first-child > div:first-child');
        textAreaContainer.style.maxWidth = '110%';
        textArea.style.transition = 'width .5s linear, background-color .5s linear, opacity .5s linear';
        textArea.style.width = '12vw';
        textArea.style.cursor = 'pointer';
        textArea.style.resize = 'none';
        textArea.removeEventListener('click', textAreaChangeSwitchXl);
        completeText.style.transition = 'opacity .5s linear';
        setTimeout(() => {
            completeText.style.opacity = '1';
            @* completeText.style.resize = 'none'; *@
            completeText.style.cursor = 'pointer';
        }, 60);
        setTimeout(() => {
            percentageText.style.fontSize = '18px';
        }, 400);
    };

@* 11 XL *@


@* 12 XL *@               @* Removes the desired entry from its category container (urgent, this month, or next month) and adjusts the heights
                             for the 'this month' and 'next month' containers so their tops still scroll flush with where they are visible. *@

    document.querySelectorAll('.entry-minus-xl > img:first-child').forEach(element => {
        element.addEventListener('click', minusEntryXl);
    });
    
    function minusEntryXl(event) {
        let gParent = event.target.closest('.entry-container-xl');
        let ggParent = event.target.closest('.category-entries-container-xl');
        let gggParent = event.target.closest('.one-of-three-containers-xl');
        let categoryText = gggParent.querySelector('span');
        gParent.remove();
        if (ggParent.children.length === 0) {
            let section = document.createElement('section');
            section.style.display = 'flex';
            section.style.justifyContent = 'center';
            section.style.alignItems = 'center';
            section.style.height = '50px';
            section.style.width = '100%';
            section.style.backgroundColor = 'transparent';
            section.style.borderRadius = '1vw';
            section.style.gap = '1vw';
            let sectionSpan1A = document.createElement('span');
            sectionSpan1A.textContent = 'This section is empty...';
            sectionSpan1A.style.fontFamily = 'Roboto, sans-serif';
            sectionSpan1A.style.fontSize = '20px';
            let sectionButton1A = document.createElement('button');
            sectionButton1A.textContent = 'click here to add an entry';
            sectionButton1A.style.fontFamily = 'Roboto, sans-serif';
            sectionButton1A.style.fontSize = '20px';
            if (categoryText.textContent === 'Urgent') {
                sectionButton1A.style.color = 'red';
                section.style.border = '1px solid red';
            } else if (categoryText.textContent === 'This Month') {
                sectionButton1A.style.color = 'teal';
                section.style.border = '1px solid teal';
            } else if (categoryText.textContent === 'Next Month') {
                sectionButton1A.style.color = 'rgb(195, 87, 219)';
                section.style.border = '1px solid rgb(195, 87, 219)';
            };
            sectionButton1A.style.border = 'none';
            sectionButton1A.style.backgroundColor = 'transparent';
            sectionButton1A.addEventListener('click', addEntryXl);
            section.appendChild(sectionSpan1A);
            section.appendChild(sectionButton1A);
            ggParent.appendChild(section);
        } else {
            if (categoryText.textContent === 'Urgent') {
                thisMonthCategoryRectTopXl = thisMonthCategoryRectTopXl - 52;    @* These variables can be found in block '3 XL' *@
                nextMonthCategoryRectTopXl = nextMonthCategoryRectTopXl - 52;
            } else if (categoryText.textContent === 'This Month') {
                nextMonthCategoryRectTopXl = nextMonthCategoryRectTopXl - 52;
            };
        };
        checkEntriesOpacityAfterEntryRemovalXl(ggParent, event, gParent);
    };

    function checkEntriesOpacityAfterEntryRemovalXl(gParent, event, parent) {
        let mouseYPosition = event.clientY;
        let parentRectTop = parent.getBoundingClientRect().top;
        let parentRectBottom = parent.getBoundingClientRect().bottom;
        let gParentRectBottom = gParent.getBoundingClientRect().bottom;
        let entries = gParent.querySelectorAll('.entry-container-xl');
        entries.forEach(entry => {
            entry.classList.remove('hover-xl');
            entry.style.opacity = '.1';
            if (((mouseYPosition < parentRectBottom) && (mouseYPosition >= parentRectTop) && (mouseYPosition < entry.getBoundingClientRect().bottom) && (mouseYPosition >= entry.getBoundingClientRect().top))) {
                entry.style.opacity = '1';
            };
            if (((mouseYPosition > parentRectBottom) && (mouseYPosition < parentRectBottom + 52) && (mouseYPosition < entry.getBoundingClientRect().bottom) && (mouseYPosition >= entry.getBoundingClientRect().top))) {
                entry.style.opacity = '1';
            };
            if (((mouseYPosition > parentRectBottom + 52) && (mouseYPosition < parentRectBottom + 104) && (mouseYPosition < entry.getBoundingClientRect().bottom) && (mouseYPosition >= entry.getBoundingClientRect().top))) {
                entry.style.opacity = '1';
            };
            if (mouseYPosition > gParentRectBottom) {
                setTimeout(() => {
                    entry.style.opacity = '1';
                }, 30);
            };
        });
    };

@* 12 XL *@


@* 13 XL *@               @* A combination of functions and eventListeners that control how the opacity settings work for when a user is hovering
                             over different '.category-entries-container-xl' elements and 'entry-container-xl' elements.  Generally speaking, the opacity
                             lowers over every entry within the same '.category-entries-container-xl' that is not being hovered so the user can focus
                             more on the entry that is being hovered. *@

    document.querySelectorAll('.category-entries-container-xl').forEach(element => {   
        element.addEventListener('mouseover', () => {
            entriesOpacOnceXl(element);
        });
        element.addEventListener('mouseout', () => {
            entriesOpacBackto1Xl(element);
        });
    });

    document.querySelectorAll('.entry-container-xl').forEach(element => {
        element.addEventListener('mouseover', () => {
            element.classList.add('hover-xl');
        });
        element.addEventListener('mouseout', () => {
            element.classList.remove('hover-xl');
        });
    });

    function entriesOpacOnceXl(event) {
        let entries = event.querySelectorAll('.entry-container-xl');
        entries.forEach(entry => {
            if (!entry.classList.contains('hover-xl')) {
                entry.style.opacity = '.1';
            } else {
                entry.style.opacity = '1';
            };
        });
    };

    function entriesOpacBackto1Xl(event) {
        let entries = event.querySelectorAll('.entry-container-xl');
        entries.forEach(entry => {
            entry.style.opacity = '1';
        });
    };

@* 13 XL *@


@* 14 XL *@               @* Controls the fading aspect of the section titles for the various 3 categories (urgent, this month, and next month).
                             As the 'Urgent' section titles move upward and out of view, the 'This Month' section titles fade into view and the
                             same goes for the 'This Month' section titles as they fade out of view the 'Next Month' section titles fade into view *@

    const containerWithFadableChildrenXl = document.querySelector('.hide-scrollbar-container-xl');
    let containerWithFadableChildrenRectXl = containerWithFadableChildrenXl.getBoundingClientRect().top;

    containerWithFadableChildrenXl.addEventListener('scroll', () => {
        let firstFadableChild = document.getElementById('URGENT-TITLE-NAMES-XL');
        let firstFadableChildRect = firstFadableChild.getBoundingClientRect().bottom;
        let secondFadableChild = document.getElementById('THIS-MONTH-TITLE-NAMES-XL');
        let secondFadableChildRect = secondFadableChild.getBoundingClientRect().bottom;
        let thirdFadableChild = document.getElementById('NEXT-MONTH-TITLE-NAMES-XL');
        if (firstFadableChildRect < containerWithFadableChildrenRectXl) {
            secondFadableChild.style.transition = 'opacity .3s';
            secondFadableChild.style.opacity = '1';
        } else if (firstFadableChildRect >= containerWithFadableChildrenRectXl) {
            secondFadableChild.style.transition = 'opacity .3s';
            secondFadableChild.style.opacity = '0';
        };
        if (secondFadableChildRect < containerWithFadableChildrenRectXl) {
            thirdFadableChild.style.transition = 'opacity .3s';
            thirdFadableChild.style.opacity = '1';
        } else if (secondFadableChildRect >= containerWithFadableChildrenRectXl) {
            thirdFadableChild.style.transition = 'opacity .3s';
            thirdFadableChild.style.opacity = '0';
        };
    });

@* 14 XL *@




@* 1 XS *@

    const usernameInputContainerXs = document.getElementById("INPUT-CONTAINER-USERNAME-XS");
    const passwordInputContainerXs = document.getElementById("INPUT-CONTAINER-PASSWORD-XS");
    const usernameInputXs = document.getElementById("INPUT-ELEMENT-USERNAME-XS");
    const passwordInputXs = document.getElementById("INPUT-ELEMENT-PASSWORD-XS");

    usernameInputXs.addEventListener('focus', () => {
        usernameInputContainerXs.style.backgroundColor = 'rgba(125, 125, 125, .35)';
        if (usernameInputXs.value === '') {
            usernameInputXs.setAttribute('placeholder', '');
        };
    });
    usernameInputXs.addEventListener('blur', () => {
        usernameInputContainerXs.style.backgroundColor = 'rgba(255, 255, 255, .15)';
        if (usernameInputXs.value === '') {
            usernameInputXs.setAttribute('placeholder', 'Username');
        };
    });
    passwordInputXs.addEventListener('focus', () => {
        passwordInputContainerXs.style.backgroundColor = 'rgba(125, 125, 125, .35)';
        if (passwordInputXs.value === '') {
            passwordInputXs.setAttribute('placeholder', '');
        };
    });
    passwordInputXs.addEventListener('blur', () => {
        passwordInputContainerXs.style.backgroundColor = 'rgba(255, 255, 255, .15)';
        if (passwordInputXs.value === '') {
            passwordInputXs.setAttribute('placeholder', 'Password');
        };
    });




    function loginSuccessAnimationXs() {
        let preLoginContainerXs = document.querySelector('.pre-login-container-xs');
        let postLoginContainerXs = document.querySelector('.post-login-container-xs');
        let upperLeftSquareXs = document.querySelector('.right-side-content-xs > div:nth-child(2)');
        let blurredBigSquareXs = document.querySelector('.right-side-content-xs > div:nth-child(3)');
        let blurredSmallSquareXs = document.querySelector('.right-side-content-xs > div:nth-child(4)');
        let lowerRightSquareXs = document.querySelector('.right-side-content-xs > div:nth-child(5)');
        let leftSideContentXs = document.querySelector('.left-side-content-xs');
        let rightSideContentXs = document.querySelector('.right-side-content-xs');
        let logoContainerXs = document.querySelector('.pre-login-container-xs > div:first-child > div:first-child');
        let loginCredentialsXs = document.querySelector(".login-credentials-xs");
        let loginCredentialsXl = document.querySelector(".login-credentials-xl");

        preLoginContainerXs.style.transition = 'opacity .6s, z-index 0s';
        postLoginContainerXs.style.transition = 'opacity .3s, z-index 0s';
        if (upperLeftSquareXs) {
            upperLeftSquareXs.style.transition = 'transform .3s';
            upperLeftSquareXs.style.transform = 'scaleX(1.3) scaleY(1.3)';
            upperLeftSquareXs.style.opacity = '1';
        };
        blurredBigSquareXs.style.opacity = '1';
        blurredSmallSquareXs.style.opacity = '1';
        blurredBigSquareXs.style.transition = 'margin-top 1s, margin-left 1s, filter .5s';
        blurredSmallSquareXs.style.transition = 'margin-top 1s, margin-left 1s, filter .5s';
        if (leftSideContentXs) {
            leftSideContentXs.style.transition = 'margin-bottom 1s';
        };
        rightSideContentXs.style.transition = 'opacity 1s';
        logoContainerXs.style.transition = 'opacity 1s';
        blurredBigSquareXs.style.filter = 'blur(30px)';
        blurredBigSquareXs.style.marginTop = '50px';
        blurredBigSquareXs.style.marginLeft = '70px';
        blurredBigSquareXs.style.opacity = '1';
        blurredSmallSquareXs.style.filter = 'blur(30px)';
        blurredSmallSquareXs.style.marginTop = '415px';
        blurredSmallSquareXs.style.marginLeft = '150px';
        lowerRightSquareXs.style.opacity = '1';
        leftSideContentXs.style.marginBottom = '5vh';
        loginCredentialsXs.style.opacity = '0';
        loginCredentialsXl.style.opacity = '0';
        if (window.innerWidth <= 450) {
            if (upperLeftSquareXs) {
                upperLeftSquareXs.style.opacity = '0';
            };
            if (blurredBigSquareXs) {
                blurredBigSquareXs.style.opacity = '0';
            };
            if (blurredSmallSquareXs) {
                blurredSmallSquareXs.style.opacity = '0';
            };
            if (lowerRightSquareXs) {
                lowerRightSquareXs.style.opacity = '0';
            };
        };
        userHasAlreadySuccessfullyLoggedInSwitch = true;
        postLoginContainerXs.style.display = 'flex';
        window.scrollTo(0, 1);
        setTimeout(() => {
            lowerRightSquareXs.style.transition = 'transform .3s';
            lowerRightSquareXs.style.transform = 'scaleX(1.3) scaleY(1.3)';
        }, 150);
        setTimeout(() => {
            if (upperLeftSquareXs) {
                upperLeftSquareXs.style.transition = 'transform 1s';
                upperLeftSquareXs.style.transform = 'scaleX(0) scaleY(0)';
            };
            leftSideContentXs.style.transition = 'margin-bottom 1s';
            leftSideContentXs.style.marginBottom = '-1500px';
            logoContainerXs.style.opacity = '0';
        }, 200);
        setTimeout(() => {
            lowerRightSquareXs.style.transform = 'scaleX(0) scaleY(0)'
            rightSideContentXs.style.opacity = '0';
        }, 350);
        setTimeout(() => {
            preLoginContainerXs.style.opacity = '0';
            preLoginContainerXs.style.zIndex = '1';
            preLoginContainerXs.style.height = '50vh';
            postLoginContainerXs.style.opacity = '1';
        }, 600);
        setTimeout(() => {
            thisMonthRemainingTextsContainerRectTopXs = 147 + ((document.querySelector('.urgent-remaining-entries-container-xs').children.length) * 45);
            nextMonthRemainingTextsContainerRectTopXs = 209 + ((document.querySelector('.thisMonth-remaining-entries-container-xs').children.length) * 45) + ((document.querySelector('.urgent-remaining-entries-container-xs').children.length) * 45);
            projectTaskManagerDivRectBottomXs = projectTaskManagerDivXs.getBoundingClientRect().bottom;
        }, 700);
    };

    function loginFailureAnimationXs() {
        let loginForm = document.getElementById('LOGIN-FORM-ELEMENT-XS');
        let usernameInput = document.getElementById('INPUT-ELEMENT-USERNAME-XS');
        let passwordInput = document.getElementById('INPUT-ELEMENT-PASSWORD-XS');
        loginForm.style.transition = 'margin-left .2s, border 0s, background-color 0s';
        loginForm.style.marginLeft = '0px';
        loginForm.style.border = '2.15px solid rgba(255, 0, 0, .3)';
        loginForm.style.backgroundColor = 'rgba(255, 0, 0, .2)'
        setTimeout(function() {
            loginForm.style.marginLeft = '20px';
        }, 10);
        setTimeout(function() {
            loginForm.style.marginLeft = '-20px';
        }, 80);
        setTimeout(function() {
            loginForm.style.marginLeft = '20px';
        }, 150);
        setTimeout(function() {
            loginForm.style.marginLeft = '-20px';
        }, 220);
        setTimeout(function() {
            loginForm.style.marginLeft = '20px';
        }, 290);
        setTimeout(function() {
            loginForm.style.transition = 'border 1s, margin-left .2s, background-color 1s';
            loginForm.style.border = '2px solid rgba(255, 255, 255, 1)';
        }, 360);
        setTimeout(function() {
            loginForm.style.marginLeft = '0px';
            loginForm.style.backgroundColor = 'rgba(198, 221, 253, 0.3)';
        }, 430);
        usernameInput.value = '';
        usernameInput.setAttribute('placeholder', 'Username');
        passwordInput.value = '';
        passwordInput.setAttribute('placeholder', 'Password');
    };




    $(document).ready(() => {
        $('#LOGIN-FORM-ELEMENT-XS').submit((event) => {
            event.preventDefault();
            let Username = $('#INPUT-ELEMENT-USERNAME-XS').val();
            let Password = $('#INPUT-ELEMENT-PASSWORD-XS').val();
            $.ajax({
                type: 'POST',
                url: '@Url.Page("/Index", null, new { handler = "Login" })',
                data: { Username: Username, Password: Password },
                contentType: 'application/x-www-form-urlencoded',
                headers: {
                            RequestVerificationToken:
                                document.getElementById("REQUEST-VERIFICATION-TOKEN").value
                         },
                success: (result) => {
                    loginSuccessAnimationXs();
                },
                error: (xhr, status, error) => {
                    loginFailureAnimationXs();
                }
            });
        });
    });

@* 1 XS *@


@* 2 XS *@

    let entriesHaveNotBeenClearedYetSwitchXs = true;
    let urgentSectionsWereEmptyXs = false;       @* This variable is used to make sure the scroll position isn't thrown off when an entry is added to an empty container. *@
    let thisMonthSectionsWereEmptyXs = false;       @* This variable is used to make sure the scroll position isn't thrown off when an entry is added to an empty container. *@

    let thisMonthRemainingTextsContainerXs = document.querySelector('.thisMonth-remaining-texts-container-xs');    
    let thisMonthRemainingTextsContainerRectTopXs = thisMonthRemainingTextsContainerXs.getBoundingClientRect().top;
    let nextMonthRemainingTextsContainerXs = document.querySelector('.nextMonth-remaining-texts-container-xs');
    let nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerXs.getBoundingClientRect().top;
    let projectTaskManagerDivXs = document.querySelector('.post-login-container-xs > div:first-child');
    let projectTaskManagerDivRectBottomXs = projectTaskManagerDivXs.getBoundingClientRect().bottom;

    const plusButtonXs = document.querySelector('.post-login-container-xs > div:first-child > div:nth-child(2) > button:first-child');
    const clearButtonXs = document.querySelector('.post-login-container-xl > div:nth-child(2) > div:nth-child(2) > div:nth-child(2) > button:nth-child(2)');
    const selectionElementXs = document.querySelector('.select-entry-creation-xs');
    const selectionElementContainerXs = document.querySelector('.select-entry-creation-container-xs');
    const selectionElementLayoverXs = document.querySelector('.select-entry-creation-layover-xs');
    const urgentButtonXs = selectionElementXs.querySelector('button:first-child');
    const thisMonthButtonXs = selectionElementXs.querySelector('button:nth-child(2)');
    const nextMonthButtonXs = selectionElementXs.querySelector('button:nth-child(3)');
    const cancelButtonXs = selectionElementXs.querySelector('button:nth-child(4)');

    const urgentSectionAddEntryButton = document.querySelector('.urgent-remaining-entries-container-xs > section > button');
    const thisMonthSectionAddEntryButton = document.querySelector('.thisMonth-remaining-entries-container-xs > section > button');
    const nextMonthSectionAddEntryButton = document.querySelector('.nextMonth-remaining-entries-container-xs > section > button');

    if (urgentSectionAddEntryButton) {
        urgentSectionAddEntryButton.addEventListener('click', addEntryXs);
    };
    if (thisMonthSectionAddEntryButton) {
        thisMonthSectionAddEntryButton.addEventListener('click', addEntryXs);
    };
    if (nextMonthSectionAddEntryButton) {
        nextMonthSectionAddEntryButton.addEventListener('click', addEntryXs);
    };

    plusButtonXs.addEventListener('click', () => {
        selectionElementXs.style.transition = 'height .2s, width .2s';
        selectionElementXs.style.zIndex = 102;
        if (window.innerHeight <= 400) {
            selectionElementContainerXs.style.marginTop = '25px';
            selectionElementXs.style.height = '250px';
            selectionElementXs.style.width = '250px';
            urgentButtonXs.style.height = '40px';
            urgentButtonXs.style.width = '180px';
            urgentButtonXs.style.fontSize = '20px';
            thisMonthButtonXs.style.height = '40px';
            thisMonthButtonXs.style.width = '180px';
            thisMonthButtonXs.style.fontSize = '20px';
            nextMonthButtonXs.style.height = '40px';
            nextMonthButtonXs.style.width = '180px';
            nextMonthButtonXs.style.fontSize = '20px';
        } else {
            selectionElementContainerXs.style.marginTop = '0px';
            selectionElementXs.style.height = '300px';
            selectionElementXs.style.width = '300px';
            urgentButtonXs.style.height = '50px';
            urgentButtonXs.style.width = '200px';
            urgentButtonXs.style.fontSize = '25px';
            thisMonthButtonXs.style.height = '50px';
            thisMonthButtonXs.style.width = '200px';
            thisMonthButtonXs.style.fontSize = '25px';
            nextMonthButtonXs.style.height = '50px';
            nextMonthButtonXs.style.width = '200px';
            nextMonthButtonXs.style.fontSize = '25px';
        };
        selectionElementContainerXs.style.opacity = 1;
        selectionElementContainerXs.style.zIndex = 101;
        selectionElementLayoverXs.style.opacity = 1;
        selectionElementLayoverXs.style.zIndex = 101;
        document.body.style.overflow = 'hidden';
    });

    selectionElementLayoverXs.addEventListener('click', () => {
        selectionElementXs.style.transition = 'height 0s, width 0s';
        selectionElementXs.style.zIndex = 1;
        selectionElementXs.style.height = '5px';
        selectionElementXs.style.width = '5px';
        selectionElementContainerXs.style.opacity = 0;
        selectionElementContainerXs.style.zIndex = 1;
        selectionElementLayoverXs.style.opacity = 0;
        selectionElementLayoverXs.style.zIndex = 1;
        document.body.style.overflow = 'auto';
    });

    cancelButtonXs.addEventListener('click', () => {
        selectionElementXs.style.transition = 'height 0s, width 0s';
        selectionElementXs.style.zIndex = 1;
        selectionElementXs.style.height = '5px';
        selectionElementXs.style.width = '5px';
        selectionElementContainerXs.style.opacity = 0;
        selectionElementContainerXs.style.zIndex = 1;
        selectionElementLayoverXs.style.opacity = 0;
        selectionElementLayoverXs.style.zIndex = 1;
        document.body.style.overflow = 'auto';
    });

    urgentButtonXs.addEventListener('click', addEntryXs);
    thisMonthButtonXs.addEventListener('click', addEntryXs);
    nextMonthButtonXs.addEventListener('click', addEntryXs);

    function addEntryXs(event) {
        if (entriesHaveNotBeenClearedYetSwitchXs === false) {
            clearAllButtonXs.children[0].src = "media/clearButton.jpg";
            clearAllButtonXs.children[1].textContent = 'Clear All';
            entriesHaveNotBeenClearedYetSwitchXs = true;
        };
        if (event.target.textContent === 'Urgent' || event.target.style.color === 'red') {
            let section = document.querySelector('.urgent-remaining-entries-container-xs > section');
            if (section) {
                urgentSectionsWereEmptyXs = true;
            };
            let taskEntry = document.createElement('div');
            taskEntry.classList.add('urgent-task-entry-xs');
            taskEntry.style.display = 'flex';
            taskEntry.style.flexDirection = 'row';
            let color = document.createElement('div');
            taskEntry.appendChild(color);
            let task = document.createElement('input');
            task.classList.add('urgent-task-xs');
            task.value = 'Task Title';
            task.maxLength = 20;
            taskEntry.appendChild(task);
            if (remainingCategoriesMainContainerXs.scrollLeft === 0) {
                taskEntry.style.borderRight = '1px solid black';
            } else {
                taskEntry.style.borderRight = 'none';
            };
            taskEntry.style.transition = 'opacity 1.2s';
            taskEntry.style.opacity = .2;
            setTimeout(() => {
                let section = document.querySelector('.urgent-task-entries-container-xs > section');
                if (section) {
                    urgentTaskEntriesContainerXs.removeChild(section);
                };
                urgentTaskEntriesContainerXs.appendChild(taskEntry);
            }, 200);
            setTimeout(() => {
                taskEntry.style.opacity = 1;
            }, 300);
            let remainingEntry = document.createElement('div');
            remainingEntry.classList.add('urgent-remaining-entry-xs');
            remainingEntry.style.display = 'flex';
            remainingEntry.style.flexDirection = 'row';
            let team = document.createElement('div');
            team.classList.add('urgent-team-xs');
            team.style.display = 'flex';
            team.style.flexDirection = 'row';
            team.addEventListener('touchstart', (event) => {
                event.preventDefault();
                if (containerForImagesIsBeingClickedSwitchXs === true) {
                    addImageToContainerAllCategoriesXs(team);
                };
            }); 
            team.addEventListener('mousedown', (event) => {
                event.preventDefault();
                if (containerForImagesIsBeingClickedSwitchXs === true) {
                    addImageToContainerAllCategoriesXs(team);
                };
            });
            let teamImage1A = document.createElement('img');
            teamImage1A.src = "media/teamGirl1.png";
            teamImage1A.addEventListener('touchstart', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = teamImage1A.src;
                let parentElement = teamImage1A.closest('.urgent-team-xs');
                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    teamImage1A.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                }, 1000);
            });
            teamImage1A.addEventListener('mousedown', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = teamImage1A.src;
                let parent = teamImage1A.closest('.urgent-team-xs');
                let existingImages = Array.from(parent.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    teamImage1A.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                }, 1000);
            });
            teamImage1A.addEventListener('touchend', () => {
                clearTimeout(removalTimeoutXs); 
            });
            teamImage1A.addEventListener('mouseup', () => {
                clearTimeout(removalTimeoutXs); 
            });
            team.appendChild(teamImage1A);
            remainingEntry.appendChild(team);
            let status = document.createElement('div');
            status.classList.add('urgent-status-xs');
            status.textContent = 'in progress...';
            status.style.display = 'flex';
            status.style.flexDirection = 'row';
            status.addEventListener('click', () => {
                if (status.textContent === 'in progress...') {
                    status.textContent = 'reviewing...';
                    status.style.color = 'black';
                    status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                } else if (status.textContent === 'reviewing...') {
                    status.textContent = 'need help...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                } else if (status.textContent === 'need help...') {
                    status.textContent = 'in progress...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                }
            });
            remainingEntry.appendChild(status);
            let description = document.createElement('div');
            description.classList.add('urgent-description-xs');
            description.textContent = 'Task Description';
            description.contentEditable = true;
            remainingEntry.appendChild(description);
            let progress = document.createElement('div');
            progress.classList.add('urgent-progress-xs');
            progress.style.display = 'flex';
            progress.style.flexDirection = 'row';
            let progressDiv1A = document.createElement('div');
            progress.appendChild(progressDiv1A);
            let progressInput1A = document.createElement('input');
            progressInput1A.value = 14;
            progressInput1A.maxLength = 2;
            progressInput1A.addEventListener('blur', () => {
                let value = Number(progressInput1A.value);
                if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                    progressInput1A.value = 14;
                    progressInput1A.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
                } else {
                    progrssInput1A.previousElementSibling.style.background = `linear-gradient(to right, purple ${progressInput1A.value}%, transparent ${progressInput1A.value}%, transparent 100%)`;
                };
            });
            progress.appendChild(progressInput1A);
            let progressSpan1A = document.createElement('span');
            progressSpan1A.textContent = "%";
            progress.appendChild(progressSpan1A);
            remainingEntry.appendChild(progress);
            let checkmark = document.createElement('div');
            checkmark.classList.add('urgent-checkmark-xs');
            checkmark.style.display = 'flex';
            checkmark.style.flexDirection = 'row';
            let checkmarkImage1A = document.createElement('img');
            checkmarkImage1A.src = "media/checkmarkIcon.png";
            checkmarkImage1A.addEventListener('click', () => {
                let closestProgressBar = checkmarkImage1A.closest('.urgent-checkmark-xs').previousElementSibling.children[0];
                let closestProgressPercentage = checkmarkImage1A.closest('.urgent-checkmark-xs').previousElementSibling.children[1];
                let closestProgressPercentageSign = checkmarkImage1A.closest('.urgent-checkmark-xs').previousElementSibling.children[2];
                closestProgressBar.innerHTML = 'COMPLETE';
                closestProgressBar.style.transition = 'color .5s, background .5s';
                closestProgressBar.style.color = 'white';
                closestProgressBar.style.background = 'purple';
                closestProgressPercentage.maxLength = 3;
                closestProgressPercentage.value = 100;
                closestProgressPercentage.style.width = '37px';
                closestProgressPercentage.style.marginLeft = '8px';
                closestProgressPercentage.style.fontSize = '20px';
                closestProgressPercentage.style.color = 'black';
                closestProgressPercentage.style.opacity = '1';
                closestProgressPercentageSign.style.fontSize = '20px';
                closestProgressPercentage.disabled = true;
            });
            checkmark.appendChild(checkmarkImage1A);
            remainingEntry.appendChild(checkmark);
            let minus = document.createElement('div');
            minus.classList.add('urgent-minus-xs');
            minus.style.display = 'flex';
            minus.style.flexDirection = 'row';
            let minusImage1A = document.createElement('img');
            minusImage1A.src = "media/minusIcon.png";
            minusImage1A.addEventListener('click', () => {
                let urgentRemainingEntryContainer = minusImage1A.closest('.urgent-remaining-entry-xs');
                let urgentRemainingEntriesContainerChildren = Array.from(urgentRemainingEntriesContainerXs.children);
                let urgentRemainingEntryIndex = urgentRemainingEntriesContainerChildren.indexOf(urgentRemainingEntryContainer);
                urgentRemainingEntryContainer.remove();
                let urgentTaskEntryContainer = urgentTaskEntriesContainerXs.children[urgentRemainingEntryIndex];
                urgentTaskEntriesContainerXs.removeChild(urgentTaskEntryContainer);
                if (urgentTaskEntriesContainerXs.children.length === 0) {
                    let section = document.createElement('section');
                    urgentTaskEntriesContainerXs.appendChild(section);
                    if (touchDeviceOrNotVariable) {
                        section.style.width = '159.17px';
                    };
                } else {
                    thisMonthRemainingTextsContainerRectTopXs = thisMonthRemainingTextsContainerRectTopXs - 45;
                    nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs - 45;
                };
                if (urgentRemainingEntriesContainerXs.children.length === 0) {
                    let section = document.createElement('section');
                    section.style.display = 'flex';
                    section.style.flexDirection = 'row';
                    let sectionSpan1A = document.createElement('span');
                    sectionSpan1A.textContent = 'This section is empty...';
                    section.appendChild(sectionSpan1A);
                    let sectionButton1A = document.createElement('button');
                    sectionButton1A.style.color = 'red';
                    sectionButton1A.textContent = 'click here to add an entry';
                    sectionButton1A.addEventListener('click', addEntryXs);
                    section.appendChild(sectionButton1A);
                    urgentRemainingEntriesContainerXs.appendChild(section);
                };
            });
            minus.appendChild(minusImage1A);
            remainingEntry.appendChild(minus);
            remainingEntry.style.transition = 'opacity 1.2s';
            remainingEntry.style.opacity = .2;
            setTimeout(() => {
                let section = document.querySelector('.urgent-remaining-entries-container-xs > section');
                if (section) {
                    urgentRemainingEntriesContainerXs.removeChild(section);
                };
                urgentRemainingEntriesContainerXs.appendChild(remainingEntry);
            }, 200);
            setTimeout(() => {
                remainingEntry.style.opacity = 1;
            }, 300);
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
            if (urgentSectionsWereEmptyXs === false) {
                thisMonthRemainingTextsContainerRectTopXs = thisMonthRemainingTextsContainerRectTopXs + 45;
                nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs + 45;
                urgentSectionsWereEmptyXs = false;
            };
            urgentSectionsWereEmptyXs = false;
        } else if (event.target.textContent === 'This Month' || event.target.style.color === 'teal') {
            let section = document.querySelector('.thisMonth-remaining-entries-container-xs > section');
            if (section) {
                thisMonthSectionsWereEmptyXs = true;
            };
            let taskEntry = document.createElement('div');
            taskEntry.classList.add('thisMonth-task-entry-xs');
            taskEntry.style.display = 'flex';
            taskEntry.style.flexDirection = 'row';
            let color = document.createElement('div');
            taskEntry.appendChild(color);
            let task = document.createElement('input');
            task.classList.add('thisMonth-task-xs');
            task.value = 'Task Title';
            task.maxLength = 20;
            taskEntry.appendChild(task);
            if (remainingCategoriesMainContainerXs.scrollLeft === 0) {
                taskEntry.style.borderRight = '1px solid black';
            } else {
                taskEntry.style.borderRight = 'none';
            };
            taskEntry.style.transition = 'opacity 1.2s';
            taskEntry.style.opacity = .2;
            setTimeout(() => {
                let section = document.querySelector('.thisMonth-task-entries-container-xs > section');
                if (section) {
                    thisMonthTaskEntriesContainerXs.removeChild(section);
                };
                thisMonthTaskEntriesContainerXs.appendChild(taskEntry);
            }, 200);
            setTimeout(() => {
                taskEntry.style.opacity = 1;
            }, 300);
            let remainingEntry = document.createElement('div');
            remainingEntry.classList.add('thisMonth-remaining-entry-xs');
            remainingEntry.style.display = 'flex';
            remainingEntry.style.flexDirection = 'row';
            let team = document.createElement('div');
            team.classList.add('thisMonth-team-xs');
            team.style.display = 'flex';
            team.style.flexDirection = 'row';
            team.addEventListener('touchstart', (event) => {
                event.preventDefault();
                if (containerForImagesIsBeingClickedSwitchXs === true) {
                    addImageToContainerAllCategoriesXs(team);
                };
            }); 
            team.addEventListener('mousedown', (event) => {
                event.preventDefault();
                if (containerForImagesIsBeingClickedSwitchXs === true) {
                    addImageToContainerAllCategoriesXs(team);
                };
            });
            let teamImage1A = document.createElement('img');
            teamImage1A.src = "media/teamGirl1.png";
            teamImage1A.addEventListener('touchstart', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = teamImage1A.src;
                let parent = teamImage1A.closest('.thisMonth-team-xs');
                let existingImages = Array.from(parent.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    teamImage1A.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                }, 1000);
            });
            teamImage1A.addEventListener('mousedown', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = teamImage1A.src;
                let parent = teamImage1A.closest('.thisMonth-team-xs');
                let existingImages = Array.from(parent.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    teamImage1A.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                }, 1000);
            });
            teamImage1A.addEventListener('touchend', () => {
                clearTimeout(removalTimeoutXs); 
            });
            teamImage1A.addEventListener('mouseup', () => {
                clearTimeout(removalTimeoutXs); 
            });
            team.appendChild(teamImage1A);
            remainingEntry.appendChild(team);
            let status = document.createElement('div');
            status.classList.add('thisMonth-status-xs');
            status.textContent = 'in progress...';
            status.style.display = 'flex';
            status.style.flexDirection = 'row';
            status.addEventListener('click', () => {
                if (status.textContent === 'in progress...') {
                    status.textContent = 'reviewing...';
                    status.style.color = 'black';
                    status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                } else if (status.textContent === 'reviewing...') {
                    status.textContent = 'need help...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                } else if (status.textContent === 'need help...') {
                    status.textContent = 'in progress...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                }
            });
            remainingEntry.appendChild(status);
            let description = document.createElement('div');
            description.classList.add('thisMonth-description-xs');
            description.textContent = 'Task Description';
            description.contentEditable = true;
            remainingEntry.appendChild(description);
            let progress = document.createElement('div');
            progress.classList.add('thisMonth-progress-xs');
            progress.style.display = 'flex';
            progress.style.flexDirection = 'row';
            let progressDiv1A = document.createElement('div');
            let progressInput1A = document.createElement('input');
            progressInput1A.value = 14;
            progressInput1A.maxLength = 2;
            progressInput1A.addEventListener('blur', () => {
                let value = Number(progressInput1A.value);
                if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                    progressInput1A.value = 14;
                    progressInput1A.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
                } else {
                    progressInput1A.previousElementSibling.style.background = `linear-gradient(to right, purple ${progressInput1A.value}%, transparent ${progressInput1A.value}%, transparent 100%)`;
                };
            });
            let progressSpan1A = document.createElement('span');
            progressSpan1A.textContent = "%";
            progress.appendChild(progressDiv1A);
            progress.appendChild(progressInput1A);
            progress.appendChild(progressSpan1A);
            remainingEntry.appendChild(progress);
            let checkmark = document.createElement('div');
            checkmark.classList.add('thisMonth-checkmark-xs');
            checkmark.style.display = 'flex';
            checkmark.style.flexDirection = 'row';
            let checkmarkImage1A = document.createElement('img');
            checkmarkImage1A.src = "media/checkmarkIcon.png";
            checkmarkImage1A.addEventListener('click', () => {
                let closestProgressBar = checkmarkImage1A.closest('.thisMonth-checkmark-xs').previousElementSibling.children[0];
                let closestProgressPercentage = checkmarkImage1A.closest('.thisMonth-checkmark-xs').previousElementSibling.children[1];
                let closestProgressPercentageSign = checkmarkImage1A.closest('.thisMonth-checkmark-xs').previousElementSibling.children[2];
                closestProgressBar.innerHTML = 'COMPLETE';
                closestProgressBar.style.transition = 'color .5s, background .5s';
                closestProgressBar.style.color = 'white';
                closestProgressBar.style.background = 'purple';
                closestProgressPercentage.maxLength = 3;
                closestProgressPercentage.value = 100;
                closestProgressPercentage.style.width = '37px';
                closestProgressPercentage.style.marginLeft = '8px';
                closestProgressPercentage.style.fontSize = '20px';
                closestProgressPercentage.style.color = 'black';
                closestProgressPercentage.style.opacity = '1';
                closestProgressPercentageSign.style.fontSize = '20px';
                closestProgressPercentage.disabled = true;
            });
            checkmark.appendChild(checkmarkImage1A);
            remainingEntry.appendChild(checkmark);
            let minus = document.createElement('div');
            minus.classList.add('thisMonth-minus-xs');
            minus.style.display = 'flex';
            minus.style.flexDirection = 'row';
            let minusImage1A = document.createElement('img');
            minusImage1A.src = "media/minusIcon.png";
            minusImage1A.addEventListener('click', () => {
                let thisMonthRemainingEntryContainer = minusImage1A.closest('.thisMonth-remaining-entry-xs');
                let thisMonthRemainingEntriesContainerChildren = Array.from(thisMonthRemainingEntriesContainerXs.children);
                let thisMonthRemainingEntryIndex = thisMonthRemainingEntriesContainerChildren.indexOf(thisMonthRemainingEntryContainer);
                thisMonthRemainingEntryContainer.remove();
                let thisMonthTaskEntryContainer = thisMonthTaskEntriesContainerXs.children[thisMonthRemainingEntryIndex];
                thisMonthTaskEntriesContainerXs.removeChild(thisMonthTaskEntryContainer);
                if (thisMonthTaskEntriesContainerXs.children.length === 0) {
                    let section = document.createElement('section');
                    thisMonthTaskEntriesContainerXs.appendChild(section);
                    if (touchDeviceOrNotVariable) {
                        section.style.width = '159.17px';
                    };
                } else {
                    nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs - 45;
                };
                if (thisMonthRemainingEntriesContainerXs.children.length === 0) {
                    let section = document.createElement('section');
                    section.style.display = 'flex';
                    section.style.flexDirection = 'row';
                    let sectionSpan1A = document.createElement('span');
                    sectionSpan1A.textContent = 'This section is empty...';
                    section.appendChild(sectionSpan1A);
                    let sectionButton1A = document.createElement('button');
                    sectionButton1A.style.color = 'teal';
                    sectionButton1A.textContent = 'click here to add an entry';
                    sectionButton1A.addEventListener('click', addEntryXs);
                    section.appendChild(sectionButton1A);
                    thisMonthRemainingEntriesContainerXs.appendChild(section);
                };
            });
            minus.appendChild(minusImage1A);
            remainingEntry.appendChild(minus);
            remainingEntry.style.transition = 'opacity 1.2s';
            remainingEntry.style.opacity = .2;
            setTimeout(() => {
                let section = document.querySelector('.thisMonth-remaining-entries-container-xs > section')
                if (section) {
                    thisMonthRemainingEntriesContainerXs.removeChild(section);
                };
                thisMonthRemainingEntriesContainerXs.appendChild(remainingEntry);
            }, 200);
            setTimeout(() => {
                remainingEntry.style.opacity = 1;
            }, 300);
            window.scrollTo({
                top: thisMonthRemainingTextsContainerRectTopXs - projectTaskManagerDivRectBottomXs + 1,
                behavior: 'smooth'
            });
            if (thisMonthSectionsWereEmptyXs === false) {
                nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs + 45;
                thisMonthSectionsWereEmptyXs = false;
            };
            thisMonthSectionsWereEmptyXs = false;
        } else if (event.target.textContent === 'Next Month' || event.target.style.color === 'rgb(195, 87, 219)') {
            let taskEntry = document.createElement('div');
            taskEntry.classList.add('nextMonth-task-entry-xs');
            taskEntry.style.display = 'flex';
            taskEntry.style.flexDirection = 'row';
            let color = document.createElement('div');
            taskEntry.appendChild(color);
            let task = document.createElement('input');
            task.classList.add('nextMonth-task-xs');
            task.value = 'Task Title';
            task.maxLength = 20;
            taskEntry.appendChild(task);
            if (remainingCategoriesMainContainerXs.scrollLeft === 0) {
                taskEntry.style.borderRight = '1px solid black';
            } else {
                taskEntry.style.borderRight = 'none';
            };
            taskEntry.style.transition = 'opacity 1.2s';
            taskEntry.style.opacity = .2;
            setTimeout(() => {
                let section = document.querySelector('.nextMonth-task-entries-container-xs > section');
                if (section) {
                    nextMonthTaskEntriesContainerXs.removeChild(section);
                };
                nextMonthTaskEntriesContainerXs.appendChild(taskEntry);
            }, 200);
            setTimeout(() => {
                taskEntry.style.opacity = 1;
            }, 300);
            let remainingEntry = document.createElement('div');
            remainingEntry.classList.add('nextMonth-remaining-entry-xs');
            remainingEntry.style.display = 'flex';
            remainingEntry.style.flexDirection = 'row';
            let team = document.createElement('div');
            team.classList.add('nextMonth-team-xs');
            team.style.display = 'flex';
            team.style.flexDirection = 'row';
            team.addEventListener('touchstart', (event) => {
                event.preventDefault();
                if (containerForImagesIsBeingClickedSwitchXs === true) {
                    addImageToContainerAllCategoriesXs(team);
                };
            }); 
            team.addEventListener('mousedown', (event) => {
                event.preventDefault();
                if (containerForImagesIsBeingClickedSwitchXs === true) {
                    addImageToContainerAllCategoriesXs(team);
                };
            });
            let teamImage1A = document.createElement('img');
            teamImage1A.src = "media/teamGirl1.png";
            teamImage1A.addEventListener('touchstart', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = teamImage1A.src;
                let parent = teamImage1A.closest('.nextMonth-team-xs');
                let existingImages = Array.from(parent.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    teamImage1A.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                }, 1000);
            });
            teamImage1A.addEventListener('mousedown', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = teamImage1A.src;
                let parent = teamImage1A.closest('.nextMonth-team-xs');
                let existingImages = Array.from(parent.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    teamImage1A.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(teamImage1A);
                }, 1000);
            });
            teamImage1A.addEventListener('touchend', () => {
                clearTimeout(removalTimeoutXs); 
            });
            teamImage1A.addEventListener('mouseup', () => {
                clearTimeout(removalTimeoutXs); 
            });
            team.appendChild(teamImage1A);
            remainingEntry.appendChild(team);
            let status = document.createElement('div');
            status.classList.add('nextMonth-status-xs');
            status.textContent = 'in progress...';
            status.style.display = 'flex';
            status.style.flexDirection = 'row';
            status.addEventListener('click', () => {
                if (status.textContent === 'in progress...') {
                    status.textContent = 'reviewing...';
                    status.style.color = 'black';
                    status.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
                } else if (status.textContent === 'reviewing...') {
                    status.textContent = 'need help...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
                } else if (status.textContent === 'need help...') {
                    status.textContent = 'in progress...';
                    status.style.color = 'white';
                    status.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
                }
            });
            remainingEntry.appendChild(status);
            let description = document.createElement('div');
            description.classList.add('nextMonth-description-xs');
            description.textContent = 'Task Description';
            description.contentEditable = true;
            remainingEntry.appendChild(description);
            let progress = document.createElement('div');
            progress.classList.add('nextMonth-progress-xs');
            progress.style.display = 'flex';
            progress.style.flexDirection = 'row';
            let progressDiv1A = document.createElement('div');
            let progressInput1A = document.createElement('input');
            progressInput1A.value = 14;
            progressInput1A.maxLength = 2;
            progressInput1A.addEventListener('blur', () => {
                let value = Number(progressInput1A.value);
                if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                    progressInput1A.value = 14;
                    progressInput1A.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
                } else {
                    progressInput1A.previousElementSibling.style.background = `linear-gradient(to right, purple ${progressInput1A.value}%, transparent ${progressInput1A.value}%, transparent 100%)`;
                };
            });
            let progressSpan1A = document.createElement('span');
            progressSpan1A.textContent = "%";
            progress.appendChild(progressDiv1A);
            progress.appendChild(progressInput1A);
            progress.appendChild(progressSpan1A);
            remainingEntry.appendChild(progress);
            let checkmark = document.createElement('div');
            checkmark.classList.add('nextMonth-checkmark-xs');
            checkmark.style.display = 'flex';
            checkmark.style.flexDirection = 'row';
            let checkmarkImage1A = document.createElement('img');
            checkmarkImage1A.src = "media/checkmarkIcon.png";
            checkmarkImage1A.addEventListener('click', () => {
                let closestProgressBar = checkmarkImage1A.closest('.nextMonth-checkmark-xs').previousElementSibling.children[0];
                let closestProgressPercentage = checkmarkImage1A.closest('.nextMonth-checkmark-xs').previousElementSibling.children[1];
                let closestProgressPercentageSign = checkmarkImage1A.closest('.nextMonth-checkmark-xs').previousElementSibling.children[2];
                closestProgressBar.innerHTML = 'COMPLETE';
                closestProgressBar.style.transition = 'color .5s, background .5s';
                closestProgressBar.style.color = 'white';
                closestProgressBar.style.background = 'purple';
                closestProgressPercentage.maxLength = 3;
                closestProgressPercentage.value = 100;
                closestProgressPercentage.style.width = '37px';
                closestProgressPercentage.style.marginLeft = '8px';
                closestProgressPercentage.style.fontSize = '20px';
                closestProgressPercentage.style.color = 'black';
                closestProgressPercentage.style.opacity = '1';
                closestProgressPercentageSign.style.fontSize = '20px';
                closestProgressPercentage.disabled = true;
            });
            checkmark.appendChild(checkmarkImage1A);
            remainingEntry.appendChild(checkmark);
            const minus = document.createElement('div');
            minus.classList.add('nextMonth-minus-xs');
            minus.style.display = 'flex';
            minus.style.flexDirection = 'row';
            const minusImage1A = document.createElement('img');
            minusImage1A.src = "media/minusIcon.png";
            minusImage1A.addEventListener('click', () => {
                let nextMonthRemainingEntryContainer = minusImage1A.closest('.nextMonth-remaining-entry-xs');
                let nextMonthRemainingEntriesContainerChildren = Array.from(nextMonthRemainingEntriesContainerXs.children);
                let nextMonthRemainingEntryIndex = nextMonthRemainingEntriesContainerChildren.indexOf(nextMonthRemainingEntryContainer);
                nextMonthRemainingEntryContainer.remove();
                let nextMonthTaskEntryContainer = nextMonthTaskEntriesContainerXs.children[nextMonthRemainingEntryIndex];
                nextMonthTaskEntriesContainerXs.removeChild(nextMonthTaskEntryContainer);
                if (nextMonthTaskEntriesContainerXs.children.length === 0) {
                    let section = document.createElement('section');
                    nextMonthTaskEntriesContainerXs.appendChild(section);
                    if (touchDeviceOrNotVariable) {
                        section.style.width = '159.17px';
                    };
                };
                if (nextMonthRemainingEntriesContainerXs.children.length === 0) {
                    let section = document.createElement('section');
                    section.style.display = 'flex';
                    section.style.flexDirection = 'row';
                    let sectionSpan1A = document.createElement('span');
                    sectionSpan1A.textContent = 'This section is empty...';
                    section.appendChild(sectionSpan1A);
                    let sectionButton1A = document.createElement('button');
                    sectionButton1A.style.color = 'rgb(195, 87, 219)';
                    sectionButton1A.textContent = 'click here to add an entry';
                    sectionButton1A.addEventListener('click', addEntryXs);
                    section.appendChild(sectionButton1A);
                    nextMonthRemainingEntriesContainerXs.appendChild(section);
                };
            });
            minus.appendChild(minusImage1A);
            remainingEntry.appendChild(minus);
            remainingEntry.style.transition = 'opacity 1.2s';
            remainingEntry.style.opacity = .2;
            setTimeout(() => {
                let section = document.querySelector('.nextMonth-remaining-entries-container-xs > section');
                if (section) {
                    nextMonthRemainingEntriesContainerXs.removeChild(section);
                };
                nextMonthRemainingEntriesContainerXs.appendChild(remainingEntry);
            }, 200);
            setTimeout(() => {
                remainingEntry.style.opacity = 1;
            }, 300);
            nextMonthRemainingEntriesContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs + 47;
            window.scrollTo({
                top: nextMonthRemainingTextsContainerRectTopXs - projectTaskManagerDivRectBottomXs + 1,
                behavior: 'smooth'
            });
        };
        selectionElementXs.style.transition = 'height 0s, width 0s';
        selectionElementXs.style.zIndex = 1;
        selectionElementXs.style.height = '5px';
        selectionElementXs.style.width = '5px';
        selectionElementContainerXs.style.opacity = 0;
        selectionElementContainerXs.style.zIndex = 1;
        selectionElementLayoverXs.style.opacity = 0;
        selectionElementLayoverXs.style.zIndex = 1;
        document.body.style.overflow = 'auto';
    };

@* 2 XS *@


@* 3 XS *@

    function successfulSaveMessageXs() {
        let saveButtonContainerXs = document.querySelector('.post-login-container-xs > div:first-child > div:nth-child(2) > div:nth-child(2)');
        saveButtonContainerXs.style.backgroundColor = 'green';
        setTimeout(() => {
            saveButtonContainerXs.style.transition = 'background-color 2s';
            saveButtonContainerXs.style.backgroundColor = 'rgb(233, 233, 233)';
        }, 10);
    };

    function failureSaveMessageXs() {
        let saveButtonContainerXs = document.querySelector('.post-login-container-xs > div:first-child > div:nth-child(2) > div:nth-child(2)');
        saveButtonContainerXs.style.backgroundColor = 'red';
        setTimeout(() => {
            saveButtonContainerXs.style.transition = 'background-color 2s';
            saveButtonContainerXs.style.backgroundColor = 'rgb(233, 233, 233)';
        }, 10);
    };




    $(document).ready(() => {
        $('#SAVE-BUTTON-XS').click((event) => {
            event.preventDefault();
            let urgentDescriptionTextsElements = document.querySelectorAll('.urgent-description-xs');
            let urgentDescriptionTextsArray = Array.from(urgentDescriptionTextsElements).map(urgentDescriptionTextsElement => urgentDescriptionTextsElement);
            let urgentDescriptionTextContent = [];
            for (let i = 0; i < urgentDescriptionTextsArray.length; i++) {
                urgentDescriptionTextContent[i] = urgentDescriptionTextsArray[i].textContent.trim();
            };

            let urgentProgressPercentageTextsElements = document.querySelectorAll('.urgent-progress-xs > input');
            let urgentProgressPercentageTextsArray = Array.from(urgentProgressPercentageTextsElements).map(urgentProgressPercentageTextsElement => urgentProgressPercentageTextsElement);
            let urgentProgressPercentage = [];
            let urgentProgressPercentageParsed = [];
            let urgentProgressPercentageBackground = [];
            for (let i = 0; i < urgentProgressPercentageTextsArray.length; i++) {
                urgentProgressPercentage[i] = urgentProgressPercentageTextsArray[i].value + "%";
                urgentProgressPercentageParsed[i] = parseInt(urgentProgressPercentageTextsArray[i].value);
                urgentProgressPercentageBackground[i] = `background: linear-gradient(to right, purple ${urgentProgressPercentageParsed[i]}%, transparent ${urgentProgressPercentageParsed[i]}%, transparent 100%);`;
            };

            let urgentProgressWidthElements = document.querySelectorAll('.urgent-progress-xs > span');
            let urgentProgressWidthTextsArray = Array.from(urgentProgressWidthElements).map(urgentProgressWidthElement => urgentProgressWidthElement);
            let urgentProgressWidth = [];
            let urgentProgressMaxWidth = [];
            let urgentProgressPercentageFontSize = [];
            let urgentProgressCompleteOpacity = [];
            for (let i = 0; i < urgentProgressWidthTextsArray.length; i++) {
                if (urgentProgressPercentageParsed[i] >= 100) {
                    urgentProgressPercentageFontSize[i] = "font-size: 18px;";
                    urgentProgressWidth[i] = 'width: 12vw;';
                    urgentProgressMaxWidth[i] = 'max-width: 110%;';
                    urgentProgressCompleteOpacity[i] = "opacity: 1;";
                } else if (urgentProgressPercentageParsed[i] < 100) {
                    urgentProgressPercentageFontSize[i] = "font-size: 25px;";
                    urgentProgressWidth[i] = `width: ${(urgentProgressPercentageParsed[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw;`;
                    urgentProgressMaxWidth[i] = 'max-width: 99%;';
                    urgentProgressCompleteOpacity[i] = "opacity: 0;";
                };
            };

            let urgentStatusTextsElements = document.querySelectorAll('.urgent-status-xs');
            let urgentStatusTextsArray = Array.from(urgentStatusTextsElements).map(urgentStatusTextsElement => urgentStatusTextsElement);
            let urgentStatusTextContent = [];
            let urgentStatusColor = [];
            
            if (urgentStatusTextsArray.length === 0) {
                urgentStatusTextContent1[i] = null;
            };

            for (let i = 0; i < urgentStatusTextsArray.length; i++) {
                urgentStatusTextContent[i] = urgentStatusTextsArray[i].textContent;
                if (urgentStatusTextContent[i] === 'in progress...') {
                    urgentStatusColor[i] = "background: linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%);"
                };
                if (urgentStatusTextContent[i] === "reviewing...") {
                    urgentStatusColor[i] = "background: linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%); color: black;"
                };
                if (urgentStatusTextContent[i] === 'need help...') {
                    urgentStatusColor[i] = "background: linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%);"
                };
            };

            let urgentTaskElements = document.querySelectorAll('.urgent-task-xs');
            let urgentTasks = Array.from(urgentTaskElements);
            let urgentTaskValue = Array.from(urgentTaskElements).map(urgentTaskElement => urgentTaskElement.value);

            let urgentTeamElements = document.querySelectorAll('.urgent-team-xs');
            let urgentTeamElementsArray = Array.from(urgentTeamElements);
            let urgentTeamImage1 = [];
            let urgentTeamImage2 = [];
            let urgentTeamImage3 = [];
            let urgentTeamImage4 = [];
            let urgentTeamImage5 = [];
            let urgentTeamImage6 = [];
            let urgentTeamImage7 = [];
            let urgentTeamImage8 = [];

            for(let i = 0; i < urgentTeamElementsArray.length; i++) {
                let firstImgSlot = urgentTeamElementsArray[i].querySelector('img:first-child');
                let secondImgSlot = urgentTeamElementsArray[i].querySelector('img:nth-child(2)');
                let thirdImgSlot = urgentTeamElementsArray[i].querySelector('img:nth-child(3)');
                let fourthImgSlot = urgentTeamElementsArray[i].querySelector('img:nth-child(4)');
                if (firstImgSlot != null) {
                    urgentTeamImage1[i] = firstImgSlot.src
                } else {
                    urgentTeamImage1[i] = null;
                };
                if (secondImgSlot != null) {
                    urgentTeamImage2[i] = secondImgSlot.src
                } else {
                    urgentTeamImage2[i] = null;
                };
                if (thirdImgSlot != null) {
                    urgentTeamImage3[i] = thirdImgSlot.src
                } else {
                    urgentTeamImage3[i] = null;
                };
                if (fourthImgSlot != null) {
                    urgentTeamImage4[i] = fourthImgSlot.src
                } else {
                    urgentTeamImage4[i] = null;
                };
                let existingImagesArray = [];
                if (urgentTeamImage1[i] !== null) existingImagesArray.push(urgentTeamImage1[i]);
                if (urgentTeamImage2[i] !== null) existingImagesArray.push(urgentTeamImage2[i]);
                if (urgentTeamImage3[i] !== null) existingImagesArray.push(urgentTeamImage3[i]);
                if (urgentTeamImage4[i] !== null) existingImagesArray.push(urgentTeamImage4[i]);
                let allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                                   'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];

                let getUniqueElements = (arr1, arr2) => arr1.filter(item => !arr2.includes(item));

                let filteredArray1 = getUniqueElements(existingImagesArray, allCategoryTeamImagePaths);
                let filteredArray2 = getUniqueElements(allCategoryTeamImagePaths, existingImagesArray);

                let finishedArray = filteredArray1.concat(filteredArray2);

                let urgentTeamImage5Temp = (finishedArray[0] !== undefined) ? finishedArray[0] : null;
                let urgentTeamImage6Temp = (finishedArray[1] !== undefined) ? finishedArray[1] : null;
                let urgentTeamImage7Temp = (finishedArray[2] !== undefined) ? finishedArray[2] : null;
                let urgentTeamImage8Temp = (finishedArray[3] !== undefined) ? finishedArray[3] : null;

                urgentTeamImage5[i] = urgentTeamImage5Temp;
                urgentTeamImage6[i] = urgentTeamImage6Temp;
                urgentTeamImage7[i] = urgentTeamImage7Temp;
                urgentTeamImage8[i] = urgentTeamImage8Temp;
            }


            let thisMonthDescriptionTextsElements = document.querySelectorAll('.thisMonth-description-xs');
            let thisMonthDescriptionTextsArray = Array.from(thisMonthDescriptionTextsElements).map(thisMonthDescriptionTextsElement => thisMonthDescriptionTextsElement);
            let thisMonthDescriptionTextContent = [];
            for (let i = 0; i < thisMonthDescriptionTextsArray.length; i++) {
                thisMonthDescriptionTextContent[i] = thisMonthDescriptionTextsArray[i].textContent.trim();
            };

            let thisMonthProgressPercentageTextsElements = document.querySelectorAll('.thisMonth-progress-xs > input');
            let thisMonthProgressPercentageTextsArray = Array.from(thisMonthProgressPercentageTextsElements).map(thisMonthProgressPercentageTextsElement => thisMonthProgressPercentageTextsElement);
            let thisMonthProgressPercentage = [];
            let thisMonthProgressPercentageParsed = [];
            let thisMonthProgressPercentageBackground = [];
            for (let i = 0; i < thisMonthProgressPercentageTextsArray.length; i++) {
                thisMonthProgressPercentage[i] = thisMonthProgressPercentageTextsArray[i].value + "%";
                thisMonthProgressPercentageParsed[i] = parseInt(thisMonthProgressPercentageTextsArray[i].value);
                thisMonthProgressPercentageBackground[i] = `background: linear-gradient(to right, purple ${thisMonthProgressPercentageParsed[i]}%, transparent ${thisMonthProgressPercentageParsed[i]}%, transparent 100%);`;
            };

            let thisMonthProgressWidthElements = document.querySelectorAll('.thisMonth-progress-xs > span');
            let thisMonthProgressWidthTextsArray = Array.from(thisMonthProgressWidthElements).map(thisMonthProgressWidthElement => thisMonthProgressWidthElement);
            let thisMonthProgressWidth = [];
            let thisMonthProgressMaxWidth = [];
            let thisMonthProgressPercentageFontSize = [];
            let thisMonthProgressCompleteOpacity = [];
            for (let i = 0; i < thisMonthProgressWidthTextsArray.length; i++) {
                if (thisMonthProgressPercentageParsed[i] >= 100) {
                    thisMonthProgressPercentageFontSize[i] = "font-size: 18px;";
                    thisMonthProgressWidth[i] = 'width: 12vw;';
                    thisMonthProgressMaxWidth[i] = 'max-width: 110%;';
                    thisMonthProgressCompleteOpacity[i] = "opacity: 1;";
                } else if (thisMonthProgressPercentageParsed[i] < 100) {
                    thisMonthProgressPercentageFontSize[i] = "font-size: 25px;";
                    thisMonthProgressWidth[i] = `width: ${(thisMonthProgressPercentageParsed[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw;`;
                    thisMonthProgressMaxWidth[i] = 'max-width: 99%;';
                    thisMonthProgressCompleteOpacity[i] = "opacity: 0;";
                };
            };

            let thisMonthStatusTextsElements = document.querySelectorAll('.thisMonth-status-xs');
            let thisMonthStatusTextsArray = Array.from(thisMonthStatusTextsElements).map(thisMonthStatusTextsElement => thisMonthStatusTextsElement);
            let thisMonthStatusTextContent = [];
            let thisMonthStatusColor = [];
            
            if (thisMonthStatusTextsArray.length === 0) {
                thisMonthStatusTextContent1[i] = null;
            };

            for (let i = 0; i < thisMonthStatusTextsArray.length; i++) {
                thisMonthStatusTextContent[i] = thisMonthStatusTextsArray[i].textContent;
                if (thisMonthStatusTextContent[i] === 'in progress...') {
                    thisMonthStatusColor[i] = "background: linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%);"
                };
                if (thisMonthStatusTextContent[i] === "reviewing...") {
                    thisMonthStatusColor[i] = "background: linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%); color: black;"
                };
                if (thisMonthStatusTextContent[i] === 'need help...') {
                    thisMonthStatusColor[i] = "background: linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%);"
                };
            };

            let thisMonthTaskElements = document.querySelectorAll('.thisMonth-task-xs');
            let thisMonthTasks = Array.from(thisMonthTaskElements);
            let thisMonthTaskValue = Array.from(thisMonthTaskElements).map(thisMonthTaskElement => thisMonthTaskElement.value);

            let thisMonthTeamElements = document.querySelectorAll('.thisMonth-team-xs');
            let thisMonthTeamElementsArray = Array.from(thisMonthTeamElements);
            let thisMonthTeamImage1 = [];
            let thisMonthTeamImage2 = [];
            let thisMonthTeamImage3 = [];
            let thisMonthTeamImage4 = [];
            let thisMonthTeamImage5 = [];
            let thisMonthTeamImage6 = [];
            let thisMonthTeamImage7 = [];
            let thisMonthTeamImage8 = [];

            for(let i = 0; i < thisMonthTeamElementsArray.length; i++) {
                let firstImgSlot = thisMonthTeamElementsArray[i].querySelector('img:first-child');
                let secondImgSlot = thisMonthTeamElementsArray[i].querySelector('img:nth-child(2)');
                let thirdImgSlot = thisMonthTeamElementsArray[i].querySelector('img:nth-child(3)');
                let fourthImgSlot = thisMonthTeamElementsArray[i].querySelector('img:nth-child(4)');
                if (firstImgSlot != null) {
                    thisMonthTeamImage1[i] = firstImgSlot.src
                } else {
                    thisMonthTeamImage1[i] = null;
                };
                if (secondImgSlot != null) {
                    thisMonthTeamImage2[i] = secondImgSlot.src
                } else {
                    thisMonthTeamImage2[i] = null;
                };
                if (thirdImgSlot != null) {
                    thisMonthTeamImage3[i] = thirdImgSlot.src
                } else {
                    thisMonthTeamImage3[i] = null;
                };
                if (fourthImgSlot != null) {
                    thisMonthTeamImage4[i] = fourthImgSlot.src
                } else {
                    thisMonthTeamImage4[i] = null;
                };
                let existingImagesArray = [];
                if (thisMonthTeamImage1[i] !== null) existingImagesArray.push(thisMonthTeamImage1[i]);
                if (thisMonthTeamImage2[i] !== null) existingImagesArray.push(thisMonthTeamImage2[i]);
                if (thisMonthTeamImage3[i] !== null) existingImagesArray.push(thisMonthTeamImage3[i]);
                if (thisMonthTeamImage4[i] !== null) existingImagesArray.push(thisMonthTeamImage4[i]);
                let allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                                   'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];

                let getUniqueElements = (arr1, arr2) => arr1.filter(item => !arr2.includes(item));

                let filteredArray1 = getUniqueElements(existingImagesArray, allCategoryTeamImagePaths);
                let filteredArray2 = getUniqueElements(allCategoryTeamImagePaths, existingImagesArray);

                let finishedArray = filteredArray1.concat(filteredArray2);

                let thisMonthTeamImage5Temp = (finishedArray[0] !== undefined) ? finishedArray[0] : null;
                let thisMonthTeamImage6Temp = (finishedArray[1] !== undefined) ? finishedArray[1] : null;
                let thisMonthTeamImage7Temp = (finishedArray[2] !== undefined) ? finishedArray[2] : null;
                let thisMonthTeamImage8Temp = (finishedArray[3] !== undefined) ? finishedArray[3] : null;

                thisMonthTeamImage5[i] = thisMonthTeamImage5Temp;
                thisMonthTeamImage6[i] = thisMonthTeamImage6Temp;
                thisMonthTeamImage7[i] = thisMonthTeamImage7Temp;
                thisMonthTeamImage8[i] = thisMonthTeamImage8Temp;
            }


            let nextMonthDescriptionTextsElements = document.querySelectorAll('.nextMonth-description-xs');
            let nextMonthDescriptionTextsArray = Array.from(nextMonthDescriptionTextsElements).map(nextMonthDescriptionTextsElement => nextMonthDescriptionTextsElement);
            let nextMonthDescriptionTextContent = [];
            for (let i = 0; i < nextMonthDescriptionTextsArray.length; i++) {
                nextMonthDescriptionTextContent[i] = nextMonthDescriptionTextsArray[i].textContent.trim();
            };

            let nextMonthProgressPercentageTextsElements = document.querySelectorAll('.nextMonth-progress-xs > input');
            let nextMonthProgressPercentageTextsArray = Array.from(nextMonthProgressPercentageTextsElements).map(nextMonthProgressPercentageTextsElement => nextMonthProgressPercentageTextsElement);
            let nextMonthProgressPercentage = [];
            let nextMonthProgressPercentageParsed = [];
            let nextMonthProgressPercentageBackground = [];
            for (let i = 0; i < nextMonthProgressPercentageTextsArray.length; i++) {
                nextMonthProgressPercentage[i] = nextMonthProgressPercentageTextsArray[i].value + "%";
                nextMonthProgressPercentageParsed[i] = parseInt(nextMonthProgressPercentageTextsArray[i].value);
                nextMonthProgressPercentageBackground[i] = `background: linear-gradient(to right, purple ${nextMonthProgressPercentageParsed[i]}%, transparent ${nextMonthProgressPercentageParsed[i]}%, transparent 100%);`;
            };

            let nextMonthProgressWidthElements = document.querySelectorAll('.nextMonth-progress-xs > span');
            let nextMonthProgressWidthTextsArray = Array.from(nextMonthProgressWidthElements).map(nextMonthProgressWidthElement => nextMonthProgressWidthElement);
            let nextMonthProgressWidth = [];
            let nextMonthProgressMaxWidth = [];
            let nextMonthProgressPercentageFontSize = [];
            let nextMonthProgressCompleteOpacity = [];
            for (let i = 0; i < nextMonthProgressWidthTextsArray.length; i++) {
                if (nextMonthProgressPercentageParsed[i] >= 100) {
                    nextMonthProgressPercentageFontSize[i] = "font-size: 18px;";
                    nextMonthProgressWidth[i] = 'width: 12vw;';
                    nextMonthProgressMaxWidth[i] = 'max-width: 110%;';
                    nextMonthProgressCompleteOpacity[i] = "opacity: 1;";
                } else if (nextMonthProgressPercentageParsed[i] < 100) {
                    nextMonthProgressPercentageFontSize[i] = "font-size: 25px;";
                    nextMonthProgressWidth[i] = `width: ${(nextMonthProgressPercentageParsed[i] * convertPxToVwCalculationNumberXl).toFixed(2)}vw;`;
                    nextMonthProgressMaxWidth[i] = 'max-width: 99%;';
                    nextMonthProgressCompleteOpacity[i] = "opacity: 0;";
                };
            };

            let nextMonthStatusTextsElements = document.querySelectorAll('.nextMonth-status-xs');
            let nextMonthStatusTextsArray = Array.from(nextMonthStatusTextsElements).map(nextMonthStatusTextsElement => nextMonthStatusTextsElement);
            let nextMonthStatusTextContent = [];
            let nextMonthStatusColor = [];
            
            if (nextMonthStatusTextsArray.length === 0) {
                nextMonthStatusTextContent1[i] = null;
            };

            for (let i = 0; i < nextMonthStatusTextsArray.length; i++) {
                nextMonthStatusTextContent[i] = nextMonthStatusTextsArray[i].textContent;
                if (nextMonthStatusTextContent[i] === 'in progress...') {
                    nextMonthStatusColor[i] = "background: linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%);"
                };
                if (nextMonthStatusTextContent[i] === "reviewing...") {
                    nextMonthStatusColor[i] = "background: linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%); color: black;"
                };
                if (nextMonthStatusTextContent[i] === 'need help...') {
                    nextMonthStatusColor[i] = "background: linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%);"
                };
            };

            let nextMonthTaskElements = document.querySelectorAll('.nextMonth-task-xs');
            let nextMonthTasks = Array.from(nextMonthTaskElements);
            let nextMonthTaskValue = Array.from(nextMonthTaskElements).map(nextMonthTaskElement => nextMonthTaskElement.value);

            let nextMonthTeamElements = document.querySelectorAll('.nextMonth-team-xs');
            let nextMonthTeamElementsArray = Array.from(nextMonthTeamElements);
            let nextMonthTeamImage1 = [];
            let nextMonthTeamImage2 = [];
            let nextMonthTeamImage3 = [];
            let nextMonthTeamImage4 = [];
            let nextMonthTeamImage5 = [];
            let nextMonthTeamImage6 = [];
            let nextMonthTeamImage7 = [];
            let nextMonthTeamImage8 = [];

            for(let i = 0; i < nextMonthTeamElementsArray.length; i++) {
                let firstImgSlot = nextMonthTeamElementsArray[i].querySelector('img:first-child');
                let secondImgSlot = nextMonthTeamElementsArray[i].querySelector('img:nth-child(2)');
                let thirdImgSlot = nextMonthTeamElementsArray[i].querySelector('img:nth-child(3)');
                let fourthImgSlot = nextMonthTeamElementsArray[i].querySelector('img:nth-child(4)');
                if (firstImgSlot != null) {
                    nextMonthTeamImage1[i] = firstImgSlot.src
                } else {
                    nextMonthTeamImage1[i] = null;
                };
                if (secondImgSlot != null) {
                    nextMonthTeamImage2[i] = secondImgSlot.src
                } else {
                    nextMonthTeamImage2[i] = null;
                };
                if (thirdImgSlot != null) {
                    nextMonthTeamImage3[i] = thirdImgSlot.src
                } else {
                    nextMonthTeamImage3[i] = null;
                };
                if (fourthImgSlot != null) {
                    nextMonthTeamImage4[i] = fourthImgSlot.src
                } else {
                    nextMonthTeamImage4[i] = null;
                };
                let existingImagesArray = [];
                if (nextMonthTeamImage1[i] !== null) existingImagesArray.push(nextMonthTeamImage1[i]);
                if (nextMonthTeamImage2[i] !== null) existingImagesArray.push(nextMonthTeamImage2[i]);
                if (nextMonthTeamImage3[i] !== null) existingImagesArray.push(nextMonthTeamImage3[i]);
                if (nextMonthTeamImage4[i] !== null) existingImagesArray.push(nextMonthTeamImage4[i]);
                let allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                                   'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];

                let getUniqueElements = (arr1, arr2) => arr1.filter(item => !arr2.includes(item));

                let filteredArray1 = getUniqueElements(existingImagesArray, allCategoryTeamImagePaths);
                let filteredArray2 = getUniqueElements(allCategoryTeamImagePaths, existingImagesArray);

                let finishedArray = filteredArray1.concat(filteredArray2);

                let nextMonthTeamImage5Temp = (finishedArray[0] !== undefined) ? finishedArray[0] : null;
                let nextMonthTeamImage6Temp = (finishedArray[1] !== undefined) ? finishedArray[1] : null;
                let nextMonthTeamImage7Temp = (finishedArray[2] !== undefined) ? finishedArray[2] : null;
                let nextMonthTeamImage8Temp = (finishedArray[3] !== undefined) ? finishedArray[3] : null;

                nextMonthTeamImage5[i] = nextMonthTeamImage5Temp;
                nextMonthTeamImage6[i] = nextMonthTeamImage6Temp;
                nextMonthTeamImage7[i] = nextMonthTeamImage7Temp;
                nextMonthTeamImage8[i] = nextMonthTeamImage8Temp;
            }
           



            $.ajax({
                type: 'POST',
                url: '@Url.Page("/Index", null, new { handler = "Replace" })',
                data: { urgentTaskValue: urgentTaskValue, urgentTeamImage1: urgentTeamImage1, urgentTeamImage2: urgentTeamImage2,
                        urgentTeamImage3: urgentTeamImage3, urgentTeamImage4: urgentTeamImage4, urgentTeamImage5: urgentTeamImage5,
                        urgentTeamImage6: urgentTeamImage6, urgentTeamImage7: urgentTeamImage7, urgentTeamImage8: urgentTeamImage8,
                        urgentStatusTextContent: urgentStatusTextContent, urgentStatusColor: urgentStatusColor,
                        urgentDescriptionTextContent: urgentDescriptionTextContent, urgentProgressPercentage: urgentProgressPercentage,
                        urgentProgressPercentageParsed: urgentProgressPercentageParsed,
                        urgentProgressPercentageFontSize: urgentProgressPercentageFontSize,
                        urgentProgressPercentageBackground: urgentProgressPercentageBackground, urgentProgressWidth: urgentProgressWidth,
                        urgentProgressMaxWidth: urgentProgressMaxWidth, urgentProgressCompleteOpacity: urgentProgressCompleteOpacity,
                        thisMonthTaskValue: thisMonthTaskValue, thisMonthTeamImage1: thisMonthTeamImage1, thisMonthTeamImage2: thisMonthTeamImage2,
                        thisMonthTeamImage3: thisMonthTeamImage3, thisMonthTeamImage4: thisMonthTeamImage4, thisMonthTeamImage5: thisMonthTeamImage5,
                        thisMonthTeamImage6: thisMonthTeamImage6, thisMonthTeamImage7: thisMonthTeamImage7, thisMonthTeamImage8: thisMonthTeamImage8,
                        thisMonthStatusTextContent: thisMonthStatusTextContent, thisMonthStatusColor: thisMonthStatusColor,
                        thisMonthDescriptionTextContent: thisMonthDescriptionTextContent, thisMonthProgressPercentage: thisMonthProgressPercentage,
                        thisMonthProgressPercentageParsed: thisMonthProgressPercentageParsed,
                        thisMonthProgressPercentageFontSize: thisMonthProgressPercentageFontSize,
                        thisMonthProgressPercentageBackground: thisMonthProgressPercentageBackground, thisMonthProgressWidth: thisMonthProgressWidth,
                        thisMonthProgressMaxWidth: thisMonthProgressMaxWidth, thisMonthProgressCompleteOpacity: thisMonthProgressCompleteOpacity,
                        nextMonthTaskValue: nextMonthTaskValue, nextMonthTeamImage1: nextMonthTeamImage1, nextMonthTeamImage2: nextMonthTeamImage2,
                        nextMonthTeamImage3: nextMonthTeamImage3, nextMonthTeamImage4: nextMonthTeamImage4, nextMonthTeamImage5: nextMonthTeamImage5,
                        nextMonthTeamImage6: nextMonthTeamImage6, nextMonthTeamImage7: nextMonthTeamImage7, nextMonthTeamImage8: nextMonthTeamImage8,
                        nextMonthStatusTextContent: nextMonthStatusTextContent, nextMonthStatusColor: nextMonthStatusColor,
                        nextMonthDescriptionTextContent: nextMonthDescriptionTextContent, nextMonthProgressPercentage: nextMonthProgressPercentage,
                        nextMonthProgressPercentageParsed: nextMonthProgressPercentageParsed,
                        nextMonthProgressPercentageFontSize: nextMonthProgressPercentageFontSize,
                        nextMonthProgressPercentageBackground: nextMonthProgressPercentageBackground, nextMonthProgressWidth: nextMonthProgressWidth,
                        nextMonthProgressMaxWidth: nextMonthProgressMaxWidth, nextMonthProgressCompleteOpacity: nextMonthProgressCompleteOpacity},
                contentType: 'application/x-www-form-urlencoded',
                headers: {
                            RequestVerificationToken:
                                document.getElementById("REQUEST-VERIFICATION-TOKEN").value
                         },
                success: (result) => {
                    successfulSaveMessageXs();
                },
                error: (xhr, status, error) => {
                    failureSaveMessageXs();
                }
            });
        });
    });

@* 3 XS *@


@* 4 XS *@

    let urgentTaskEntriesTempXs = [];
    let urgentRemainingEntriesTempXs = [];
    let thisMonthTaskEntriesTempXs = [];
    let thisMonthRemainingEntriesTempXs = [];
    let nextMonthTaskEntriesTempXs = [];
    let nextMonthRemainingEntriesTempXs = [];
    let thisMonthCategoryRectTopTempXs = 0;
    let nextMonthCategoryRectTopTempXs = 0;

    const clearAllButtonXs = document.querySelector('.post-login-container-xs > div:first-child > div:nth-child(2) > div:nth-child(3)');

    clearAllButtonXs.addEventListener('click', clearAllEntriesXs);
    

    function clearAllEntriesXs(event) {
        if (entriesHaveNotBeenClearedYetSwitchXs === true) {
            let urgentTaskEntries = document.querySelector('.urgent-task-entries-container-xs');
            let urgentRemainingEntries = document.querySelector('.urgent-remaining-entries-container-xs');
            let thisMonthTaskEntries = document.querySelector('.thisMonth-task-entries-container-xs');
            let thisMonthRemainingEntries = document.querySelector('.thisMonth-remaining-entries-container-xs');
            let nextMonthTaskEntries = document.querySelector('.nextMonth-task-entries-container-xs');
            let nextMonthRemainingEntries = document.querySelector('.nextMonth-remaining-entries-container-xs');
            entriesHaveNotBeenClearedYetSwitchXs = false;
            clearAllButtonXs.children[0].src = "media/undoButton.png";
            clearAllButtonXs.children[1].textContent = 'Undo Clear';
            urgentTaskEntriesTempXs = 0;
            urgentRemainingEntriesTempXs = 0;
            thisMonthTaskEntriesTempXs = 0;
            thisMonthRemainingEntriesTempXs = 0;
            nextMonthTaskEntriesTempXs = 0;
            nextMonthRemainingEntriesTempXs = 0;
            thisMonthCategoryRectTopTempXs = thisMonthRemainingTextsContainerRectTopXs;
            nextMonthCategoryRectTopTempXs = nextMonthRemainingTextsContainerRectTopXs;
            urgentTaskEntriesTempXs = Array.from(urgentTaskEntries.children);
            urgentRemainingEntriesTempXs = Array.from(urgentRemainingEntries.children);
            thisMonthTaskEntriesTempXs = Array.from(thisMonthTaskEntries.children);
            thisMonthRemainingEntriesTempXs = Array.from(thisMonthRemainingEntries.children);
            nextMonthTaskEntriesTempXs = Array.from(nextMonthTaskEntries.children);
            nextMonthRemainingEntriesTempXs = Array.from(nextMonthRemainingEntries.children);
            while (urgentTaskEntriesContainerXs.firstChild) urgentTaskEntriesContainerXs.removeChild(urgentTaskEntriesContainerXs.firstChild);
            let taskSection = document.createElement('section');
            urgentTaskEntriesContainerXs.appendChild(taskSection);
            while (urgentRemainingEntriesContainerXs.firstChild) urgentRemainingEntriesContainerXs.removeChild(urgentRemainingEntriesContainerXs.firstChild);
            let remainingSection = document.createElement('section');
            remainingSection.style.display = 'flex';
            remainingSection.style.flexDirection = 'row';
            let remainingSectionSpan1A = document.createElement('span');
            remainingSectionSpan1A.textContent = 'This section is empty...';
            remainingSection.appendChild(remainingSectionSpan1A);
            let remainingSectionButton1A = document.createElement('button');
            remainingSectionButton1A.style.color = 'red';
            remainingSectionButton1A.textContent = 'click here to add an entry';
            remainingSectionButton1A.addEventListener('click', addEntryXs);
            remainingSection.appendChild(remainingSectionButton1A);
            urgentRemainingEntriesContainerXs.appendChild(remainingSection);
            while (thisMonthTaskEntriesContainerXs.firstChild) thisMonthTaskEntriesContainerXs.removeChild(thisMonthTaskEntriesContainerXs.firstChild);
            taskSection = document.createElement('section');
            thisMonthTaskEntriesContainerXs.appendChild(taskSection);
            while (thisMonthRemainingEntriesContainerXs.firstChild) thisMonthRemainingEntriesContainerXs.removeChild(thisMonthRemainingEntriesContainerXs.firstChild);
            remainingSection = document.createElement('section');
            remainingSection.style.display = 'flex';
            remainingSection.style.flexDirection = 'row';
            remainingSectionSpan1A = document.createElement('span');
            remainingSectionSpan1A.textContent = 'This section is empty...';
            remainingSection.appendChild(remainingSectionSpan1A);
            remainingSectionButton1A = document.createElement('button');
            remainingSectionButton1A.style.color = 'teal';
            remainingSectionButton1A.textContent = 'click here to add an entry';
            remainingSectionButton1A.addEventListener('click', addEntryXs);
            remainingSection.appendChild(remainingSectionButton1A);
            thisMonthRemainingEntriesContainerXs.appendChild(remainingSection);
            while (nextMonthTaskEntriesContainerXs.firstChild) nextMonthTaskEntriesContainerXs.removeChild(nextMonthTaskEntriesContainerXs.firstChild);
            taskSection = document.createElement('section');
            nextMonthTaskEntriesContainerXs.appendChild(taskSection);
            while (nextMonthRemainingEntriesContainerXs.firstChild) nextMonthRemainingEntriesContainerXs.removeChild(nextMonthRemainingEntriesContainerXs.firstChild);
            remainingSection = document.createElement('section');
            remainingSection.style.display = 'flex';
            remainingSection.style.flexDirection = 'row';
            remainingSectionSpan1A = document.createElement('span');
            remainingSectionSpan1A.textContent = 'This section is empty...';
            remainingSection.appendChild(remainingSectionSpan1A);
            remainingSectionButton1A = document.createElement('button');
            remainingSectionButton1A.style.color = 'rgb(195, 87, 219)';
            remainingSectionButton1A.textContent = 'click here to add an entry';
            remainingSectionButton1A.addEventListener('click', addEntryXs);
            remainingSection.appendChild(remainingSectionButton1A);
            nextMonthRemainingEntriesContainerXs.appendChild(remainingSection);
            setTimeout(() => {
            if (urgentTaskEntriesTempXs.length === 1 && thisMonthTaskEntriesTempXs.length === 1) {
                thisMonthRemainingTextsContainerRectTopXs = thisMonthCategoryRectTopTempXs;
                nextMonthRemainingTextsContainerRectTopXs = nextMonthCategoryRectTopTempXs;
            } else if (urgentTaskEntriesTempXs.length === 1 && thisMonthTaskEntriesTempXs.length > 1) {
                thisMonthRemainingTextsContainerRectTopXs = thisMonthCategoryRectTopTempXs;
                nextMonthRemainingTextsContainerRectTopXs = (nextMonthRemainingTextsContainerRectTopXs - ((thisMonthTaskEntriesTempXs.length - 1) * 45));
            } else if (urgentTaskEntriesTempXs.length > 1 && thisMonthTaskEntriesTempXs.length === 1) {
                thisMonthRemainingTextsContainerRectTopXs = (thisMonthCategoryRectTopTempXs - ((urgentTaskEntriesTempXs.length - 1) * 45));
                nextMonthRemainingTextsContainerRectTopXs = (nextMonthRemainingTextsContainerRectTopXs - ((urgentTaskEntriesTempXs.length - 1) * 45));
            } else if (urgentTaskEntriesTempXs.length > 1 && thisMonthTaskEntriesTempXs.length > 1) {
                thisMonthRemainingTextsContainerRectTopXs = (thisMonthCategoryRectTopTempXs - ((urgentTaskEntriesTempXs.length - 1) * 45));
                nextMonthRemainingTextsContainerRectTopXs = (nextMonthRemainingTextsContainerRectTopXs - (((urgentTaskEntriesTempXs.length - 1) * 45) + ((thisMonthTaskEntriesTempXs.length - 1) * 45)));
            };
        }, 50);
        } else if (entriesHaveNotBeenClearedYetSwitchXs === false) {
            entriesHaveNotBeenClearedYetSwitchXs = true;
            clearAllButtonXs.children[0].src = "media/clearButton.jpg";
            clearAllButtonXs.children[1].textContent = 'Clear All';
            let urgentTaskEntries = document.querySelector('.urgent-task-entries-container-xs');
            let urgentRemainingEntries = document.querySelector('.urgent-remaining-entries-container-xs');
            let thisMonthTaskEntries = document.querySelector('.thisMonth-task-entries-container-xs');
            let thisMonthRemainingEntries = document.querySelector('.thisMonth-remaining-entries-container-xs');
            let nextMonthTaskEntries = document.querySelector('.nextMonth-task-entries-container-xs');
            let nextMonthRemainingEntries = document.querySelector('.nextMonth-remaining-entries-container-xs');
            let urgentTaskSection = urgentTaskEntries.querySelector('section');
            let urgentRemainingSection = urgentRemainingEntries.querySelector('section');
            let thisMonthTaskSection = thisMonthTaskEntries.querySelector('section');
            let thisMonthRemainingSection = thisMonthRemainingEntries.querySelector('section');
            let nextMonthTaskSection = nextMonthTaskEntries.querySelector('section');
            let nextMonthRemainingSection = nextMonthRemainingEntries.querySelector('section');
            urgentTaskSection.remove();
            urgentRemainingSection.remove();
            thisMonthTaskSection.remove();
            thisMonthRemainingSection.remove();
            nextMonthTaskSection.remove();
            nextMonthRemainingSection.remove();
            urgentTaskEntriesTempXs.forEach(child => {
                urgentTaskEntries.appendChild(child);
            });
            urgentRemainingEntriesTempXs.forEach(child => {
                urgentRemainingEntries.appendChild(child);
            });
            thisMonthTaskEntriesTempXs.forEach(child => {
                thisMonthTaskEntries.appendChild(child);
            });
            thisMonthRemainingEntriesTempXs.forEach(child => {
                thisMonthRemainingEntries.appendChild(child);
            });
            nextMonthTaskEntriesTempXs.forEach(child => {
                nextMonthTaskEntries.appendChild(child);
            });
            nextMonthRemainingEntriesTempXs.forEach(child => {
                nextMonthRemainingEntries.appendChild(child);
            });
            thisMonthRemainingTextsContainerRectTopXs = thisMonthCategoryRectTopTempXs;
            nextMonthRemainingTextsContainerRectTopXs = nextMonthCategoryRectTopTempXs;
        };
    };

@* 4 XS *@


@* 5 XS *@       @* CONTROLS THE FUNCTIONALITY FOR THE TEAM SEGMENTS.  CLICKING OR TOUCHING THE CONTAINERS FOR THE IMAGES WILL ADD ANOTHER IMAGE (UP TO 4) TO THE CONTAINER,
                    CLICKING OR TOUCHING THE IMAGES THEMSELVES WILL ROTATE THROUGH ALL THE AVAILABLE TEAM MEMBERS (UNLESS ALL 4 TEAM MEMBER IMAGES ARE WITHIN THE CONTAINER
                    ALREADY, AND HOLDING ON AN IMAG FOR MORE THAN A SECOND WILL REMOVE THAT IMAGE FROM THE CONTAINER). *@

    let removalTimeoutXs;
    let containerForImagesIsBeingClickedSwitchXs = true;
    const urgentTeamElementsXs = document.querySelectorAll('.urgent-team-xs');
    const urgentTeamImagesXs = document.querySelectorAll('.urgent-team-xs > img');
    const thisMonthTeamElementsXs = document.querySelectorAll('.thisMonth-team-xs');
    const thisMonthTeamImagesXs = document.querySelectorAll('.thisMonth-team-xs > img');
    const nextMonthTeamElementsXs = document.querySelectorAll('.nextMonth-team-xs');
    const nextMonthTeamImagesXs = document.querySelectorAll('.nextMonth-team-xs > img');
    const allCategoryTeamImagePaths = ['http://192.168.1.156:5034/media/teamGirl1.png', 'http://192.168.1.156:5034/media/teamGuy1.png',
                                       'http://192.168.1.156:5034/media/teamGirl2.png', 'http://192.168.1.156:5034/media/teamGuy2.png'];
    

    function removeImageFromContainerAllCategoriesXs(event) {
        event.remove();
    }

    function addImageToContainerAllCategoriesXs(event) {
        let existingImages = Array.from(event.getElementsByTagName('img'));
        let existingImagesSrcs = existingImages.map(img => img.src);
        let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
        if (availablePath) {
            const newImg = document.createElement('img');
            newImg.src = availablePath;
            event.appendChild(newImg);
            newImg.addEventListener('touchstart', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = newImg.src;
                let parentElement = newImg.closest('div');
                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    newImg.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(newImg);
                }, 1000);
            });
            newImg.addEventListener('mousedown', (event) => {
                event.preventDefault();
                containerForImagesIsBeingClickedSwitchXs = false;
                let tempPath = newImg.src;
                let parentElement = newImg.closest('div');
                let existingImages = Array.from(parentElement.getElementsByTagName('img'));
                let existingImagesSrcs = existingImages.map(img => img.src);
                let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
                if (availablePath) {
                    newImg.src = availablePath;
                    let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                    allCategoryTeamImagePaths.splice(pathIndex, 1);
                    allCategoryTeamImagePaths.push(tempPath);
                };
                setTimeout(() => {
                    containerForImagesIsBeingClickedSwitchXs = true;
                }, 200);
                removalTimeoutXs = setTimeout(() => {
                    removeImageFromContainerAllCategoriesXs(newImg);
                }, 1000);
            });
            newImg.addEventListener('touchend', (event) => {
                clearTimeout(removalTimeoutXs); 
            });
            newImg.addEventListener('mouseup', (event) => {
                clearTimeout(removalTimeoutXs); 
            });
        };
    };

    urgentTeamElementsXs.forEach(urgentTeamElementXs => {
        urgentTeamElementXs.addEventListener('touchstart', (event) => {
            event.preventDefault();
            if (containerForImagesIsBeingClickedSwitchXs === true) {
                addImageToContainerAllCategoriesXs(urgentTeamElementXs);
            };
        }); 
        urgentTeamElementXs.addEventListener('mousedown', (event) => {
            event.preventDefault();
            if (containerForImagesIsBeingClickedSwitchXs === true) {
                addImageToContainerAllCategoriesXs(urgentTeamElementXs);
            };
        });
    });

    urgentTeamImagesXs.forEach(urgentTeamImageXs => {
        urgentTeamImageXs.addEventListener('touchstart', (event) => {
            event.preventDefault();
            containerForImagesIsBeingClickedSwitchXs = false;
            let tempPath = urgentTeamImageXs.src;
            let parentElement = urgentTeamImageXs.closest('.urgent-team-xs');
            let existingImages = Array.from(parentElement.getElementsByTagName('img'));
            let existingImagesSrcs = existingImages.map(img => img.src);
            let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
            if (availablePath) {
                urgentTeamImageXs.src = availablePath;
                let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                allCategoryTeamImagePaths.splice(pathIndex, 1);
                allCategoryTeamImagePaths.push(tempPath);
            };
            setTimeout(() => {
                containerForImagesIsBeingClickedSwitchXs = true;
            }, 200);
            removalTimeoutXs = setTimeout(() => {
                removeImageFromContainerAllCategoriesXs(urgentTeamImageXs);
            }, 1000);
        });
    });

    urgentTeamImagesXs.forEach(urgentTeamImageXs => {
        urgentTeamImageXs.addEventListener('mousedown', (event) => {
            event.preventDefault();
            containerForImagesIsBeingClickedSwitchXs = false;
            let tempPath = urgentTeamImageXs.src;
            let parentElement = urgentTeamImageXs.closest('.urgent-team-xs');
            let existingImages = Array.from(parentElement.getElementsByTagName('img'));
            let existingImagesSrcs = existingImages.map(img => img.src);
            let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
            if (availablePath) {
                urgentTeamImageXs.src = availablePath;
                let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                allCategoryTeamImagePaths.splice(pathIndex, 1);
                allCategoryTeamImagePaths.push(tempPath);
            };
            setTimeout(() => {
                containerForImagesIsBeingClickedSwitchXs = true;
            }, 200);
            removalTimeoutXs = setTimeout(() => {
                removeImageFromContainerAllCategoriesXs(urgentTeamImageXs);
            }, 1000);
        });
    });

    urgentTeamImagesXs.forEach(urgentTeamImageXs => {
        urgentTeamImageXs.addEventListener('touchend', (event) => {
           clearTimeout(removalTimeoutXs); 
        });
    });

    urgentTeamImagesXs.forEach(urgentTeamImageXs => {
        urgentTeamImageXs.addEventListener('mouseup', (event) => {
           clearTimeout(removalTimeoutXs); 
        });
    });




    thisMonthTeamElementsXs.forEach(thisMonthTeamElementXs => {
        thisMonthTeamElementXs.addEventListener('touchstart', (event) => {
            event.preventDefault();
            if (containerForImagesIsBeingClickedSwitchXs === true) {
                addImageToContainerAllCategoriesXs(thisMonthTeamElementXs);
            };
        }); 
        thisMonthTeamElementXs.addEventListener('mousedown', (event) => {
            event.preventDefault();
            if (containerForImagesIsBeingClickedSwitchXs === true) {
                addImageToContainerAllCategoriesXs(thisMonthTeamElementXs);
            };
        });
    });

    thisMonthTeamImagesXs.forEach(thisMonthTeamImageXs => {
        thisMonthTeamImageXs.addEventListener('touchstart', (event) => {
            event.preventDefault();
            containerForImagesIsBeingClickedSwitchXs = false;
            let tempPath = thisMonthTeamImageXs.src;
            let parentElement = thisMonthTeamImageXs.closest('.thisMonth-team-xs');
            let existingImages = Array.from(parentElement.getElementsByTagName('img'));
            let existingImagesSrcs = existingImages.map(img => img.src);
            let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
            if (availablePath) {
                thisMonthTeamImageXs.src = availablePath;
                let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                allCategoryTeamImagePaths.splice(pathIndex, 1);
                allCategoryTeamImagePaths.push(tempPath);
            };
            setTimeout(() => {
                containerForImagesIsBeingClickedSwitchXs = true;
            }, 200);
            removalTimeoutXs = setTimeout(() => {
                removeImageFromContainerAllCategoriesXs(thisMonthTeamImageXs);
            }, 1000);
        });
    });

    thisMonthTeamImagesXs.forEach(thisMonthTeamImageXs => {
        thisMonthTeamImageXs.addEventListener('mousedown', (event) => {
            event.preventDefault();
            containerForImagesIsBeingClickedSwitchXs = false;
            let tempPath = thisMonthTeamImageXs.src;
            let parentElement = thisMonthTeamImageXs.closest('.thisMonth-team-xs');
            let existingImages = Array.from(parentElement.getElementsByTagName('img'));
            let existingImagesSrcs = existingImages.map(img => img.src);
            let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
            if (availablePath) {
                thisMonthTeamImageXs.src = availablePath;
                let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                allCategoryTeamImagePaths.splice(pathIndex, 1);
                allCategoryTeamImagePaths.push(tempPath);
            };
            setTimeout(() => {
                containerForImagesIsBeingClickedSwitchXs = true;
            }, 200);
            removalTimeoutXs = setTimeout(() => {
                removeImageFromContainerAllCategoriesXs(thisMonthTeamImageXs);
            }, 1000);
        });
    });

    thisMonthTeamImagesXs.forEach(thisMonthTeamImageXs => {
        thisMonthTeamImageXs.addEventListener('touchend', (event) => {
           clearTimeout(removalTimeoutXs); 
        });
    });

    thisMonthTeamImagesXs.forEach(thisMonthTeamImageXs => {
        thisMonthTeamImageXs.addEventListener('mouseup', (event) => {
           clearTimeout(removalTimeoutXs); 
        });
    });






    nextMonthTeamElementsXs.forEach(nextMonthTeamElementXs => {
        nextMonthTeamElementXs.addEventListener('touchstart', (event) => {
            event.preventDefault();
            if (containerForImagesIsBeingClickedSwitchXs === true) {
                addImageToContainerAllCategoriesXs(nextMonthTeamElementXs);
            };
        }); 
        nextMonthTeamElementXs.addEventListener('mousedown', (event) => {
            event.preventDefault();
            if (containerForImagesIsBeingClickedSwitchXs === true) {
                addImageToContainerAllCategoriesXs(nextMonthTeamElementXs);
            };
        });
    });

    nextMonthTeamImagesXs.forEach(nextMonthTeamImageXs => {
        nextMonthTeamImageXs.addEventListener('touchstart', (event) => {
            event.preventDefault();
            containerForImagesIsBeingClickedSwitchXs = false;
            let tempPath = nextMonthTeamImageXs.src;
            let parentElement = nextMonthTeamImageXs.closest('.nextMonth-team-xs');
            let existingImages = Array.from(parentElement.getElementsByTagName('img'));
            let existingImagesSrcs = existingImages.map(img => img.src);
            let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
            if (availablePath) {
                nextMonthTeamImageXs.src = availablePath;
                let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                allCategoryTeamImagePaths.splice(pathIndex, 1);
                allCategoryTeamImagePaths.push(tempPath);
            };
            setTimeout(() => {
                containerForImagesIsBeingClickedSwitchXs = true;
            }, 200);
            removalTimeoutXs = setTimeout(() => {
                removeImageFromContainerAllCategoriesXs(nextMonthTeamImageXs);
            }, 1000);
        });
    });

    nextMonthTeamImagesXs.forEach(nextMonthTeamImageXs => {
        nextMonthTeamImageXs.addEventListener('mousedown', (event) => {
            event.preventDefault();
            containerForImagesIsBeingClickedSwitchXs = false;
            let tempPath = nextMonthTeamImageXs.src;
            let parentElement = nextMonthTeamImageXs.closest('.nextMonth-team-xs');
            let existingImages = Array.from(parentElement.getElementsByTagName('img'));
            let existingImagesSrcs = existingImages.map(img => img.src);
            let availablePath = allCategoryTeamImagePaths.find(path => !existingImagesSrcs.includes(path));
            if (availablePath) {
                nextMonthTeamImageXs.src = availablePath;
                let pathIndex = allCategoryTeamImagePaths.indexOf(tempPath);
                allCategoryTeamImagePaths.splice(pathIndex, 1);
                allCategoryTeamImagePaths.push(tempPath);
            };
            setTimeout(() => {
                containerForImagesIsBeingClickedSwitchXs = true;
            }, 200);
            removalTimeoutXs = setTimeout(() => {
                removeImageFromContainerAllCategoriesXs(nextMonthTeamImageXs);
            }, 1000);
        });
    });

    nextMonthTeamImagesXs.forEach(nextMonthTeamImageXs => {
        nextMonthTeamImageXs.addEventListener('touchend', (event) => {
           clearTimeout(removalTimeoutXs); 
        });
    });

    nextMonthTeamImagesXs.forEach(nextMonthTeamImageXs => {
        nextMonthTeamImageXs.addEventListener('mouseup', (event) => {
           clearTimeout(removalTimeoutXs); 
        });
    });

@* 5 XS *@


@* 6 XS *@

    const urgentStatusElementsXs = document.querySelectorAll('.urgent-status-xs');
    const thisMonthStatusElementsXs = document.querySelectorAll('.thisMonth-status-xs');
    const nextMonthStatusElementsXs = document.querySelectorAll('.nextMonth-status-xs');

    urgentStatusElementsXs.forEach(urgentStatusElementXs => {
        urgentStatusElementXs.addEventListener('click', () => {
            window.scrollTo(0, 1);
           if (urgentStatusElementXs.textContent === 'in progress...') {
               urgentStatusElementXs.textContent = 'reviewing...';
               urgentStatusElementXs.style.color = 'black';
               urgentStatusElementXs.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
           } else if (urgentStatusElementXs.textContent === 'reviewing...') {
               urgentStatusElementXs.textContent = 'need help...';
               urgentStatusElementXs.style.color = 'white';
               urgentStatusElementXs.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
           } else if (urgentStatusElementXs.textContent === 'need help...') {
               urgentStatusElementXs.textContent = 'in progress...';
               urgentStatusElementXs.style.color = 'white';
               urgentStatusElementXs.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
           }
        });
    });

    thisMonthStatusElementsXs.forEach(thisMonthStatusElementXs => {
        thisMonthStatusElementXs.addEventListener('click', () => {
           if (thisMonthStatusElementXs.textContent === 'in progress...') {
               thisMonthStatusElementXs.textContent = 'reviewing...';
               thisMonthStatusElementXs.style.color = 'black';
               thisMonthStatusElementXs.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
           } else if (thisMonthStatusElementXs.textContent === 'reviewing...') {
               thisMonthStatusElementXs.textContent = 'need help...';
               thisMonthStatusElementXs.style.color = 'white';
               thisMonthStatusElementXs.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
           } else if (thisMonthStatusElementXs.textContent === 'need help...') {
               thisMonthStatusElementXs.textContent = 'in progress...';
               thisMonthStatusElementXs.style.color = 'white';
               thisMonthStatusElementXs.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
           }
        });
    });

    nextMonthStatusElementsXs.forEach(nextMonthStatusElementXs => {
        nextMonthStatusElementXs.addEventListener('click', () => {
           if (nextMonthStatusElementXs.textContent === 'in progress...') {
               nextMonthStatusElementXs.textContent = 'reviewing...';
               nextMonthStatusElementXs.style.color = 'black';
               nextMonthStatusElementXs.style.background = 'linear-gradient(to bottom, #f1fd85 0%, #f0ff6b 50%, #edff4c 100%)';
           } else if (nextMonthStatusElementXs.textContent === 'reviewing...') {
               nextMonthStatusElementXs.textContent = 'need help...';
               nextMonthStatusElementXs.style.color = 'white';
               nextMonthStatusElementXs.style.background = 'linear-gradient(to bottom, #ff6c6c 0%, #ff5252 50%, #ff3c3c 100%)';
           } else if (nextMonthStatusElementXs.textContent === 'need help...') {
               nextMonthStatusElementXs.textContent = 'in progress...';
               nextMonthStatusElementXs.style.color = 'white';
               nextMonthStatusElementXs.style.background = 'linear-gradient(to bottom, #60ca71 0%, #44ad53 50%, #307e3d 100%)';
           }
        });
    });

@* 6 XS *@


@* 7 XS *@

    const urgentProgressInputsXs = document.querySelectorAll('.urgent-progress-xs > input:nth-child(2)');
    const thisMonthProgressInputsXs = document.querySelectorAll('.thisMonth-progress-xs > input:nth-child(2)');
    const nextMonthProgressInputsXs = document.querySelectorAll('.nextMonth-progress-xs > input:nth-child(2)');

    urgentProgressInputsXs.forEach(urgentProgressInputXs => {
        urgentProgressInputXs.addEventListener('blur', () => {
            let value = Number(urgentProgressInputXs.value);
            if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                urgentProgressInputXs.value = 14;
                urgentProgressInputXs.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
            } else {
                urgentProgressInputXs.previousElementSibling.style.background = `linear-gradient(to right, purple ${urgentProgressInputXs.value}%, transparent ${urgentProgressInputXs.value}%, transparent 100%)`;
            };
        });
    });

    thisMonthProgressInputsXs.forEach(thisMonthProgressInputXs => {
        thisMonthProgressInputXs.addEventListener('blur', () => {
            let value = Number(thisMonthProgressInputXs.value);
            if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                thisMonthProgressInputXs.value = 14;
                thisMonthProgressInputXs.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
            } else {
                thisMonthProgressInputXs.previousElementSibling.style.background = `linear-gradient(to right, purple ${thisMonthProgressInputXs.value}%, transparent ${thisMonthProgressInputXs.value}%, transparent 100%)`;
            };
        });
    });

    nextMonthProgressInputsXs.forEach(nextMonthProgressInputXs => {
        nextMonthProgressInputXs.addEventListener('blur', () => {
            let value = Number(nextMonthProgressInputXs.value);
            if (value < 14 || isNaN(value) || !Number.isInteger(value)) {
                nextMonthProgressInputXs.value = 14;
                nextMonthProgressInputXs.previousElementSibling.style.background = 'linear-gradient(to right, purple 14%, transparent 14%, transparent 100%)';
            } else {
                nextMonthProgressInputXs.previousElementSibling.style.background = `linear-gradient(to right, purple ${nextMonthProgressInputXs.value}%, transparent ${nextMonthProgressInputXs.value}%, transparent 100%)`;
            };
        });
    });

@* 7 XS *@

@* 8 XS *@

    const urgentCheckmarkImagesXs = document.querySelectorAll('.urgent-checkmark-xs > img:first-child');
    const thisMonthCheckmarkImagesXs = document.querySelectorAll('.thisMonth-checkmark-xs > img:first-child');
    const nextMonthCheckmarkImagesXs = document.querySelectorAll('.nextMonth-checkmark-xs > img:first-child');

    urgentCheckmarkImagesXs.forEach(urgentCheckmarkImageXs => {
        urgentCheckmarkImageXs.addEventListener('click', () => {
            let closestProgressBar = urgentCheckmarkImageXs.closest('.urgent-checkmark-xs').previousElementSibling.children[0];
            let closestProgressPercentage = urgentCheckmarkImageXs.closest('.urgent-checkmark-xs').previousElementSibling.children[1];
            let closestProgressPercentageSign = urgentCheckmarkImageXs.closest('.urgent-checkmark-xs').previousElementSibling.children[2];
            closestProgressBar.innerHTML = 'COMPLETE';
            closestProgressBar.style.transition = 'color .5s, background .5s';
            closestProgressBar.style.color = 'white';
            closestProgressBar.style.background = 'purple';
            closestProgressPercentage.maxLength = 3;
            closestProgressPercentage.value = 100;
            closestProgressPercentage.style.width = '37px';
            closestProgressPercentage.style.marginLeft = '8px';
            closestProgressPercentage.style.fontSize = '20px';
            closestProgressPercentage.style.color = 'black';
            closestProgressPercentage.style.opacity = '1';
            closestProgressPercentageSign.style.fontSize = '20px';
            closestProgressPercentage.disabled = true;
        });
    });

    thisMonthCheckmarkImagesXs.forEach(thisMonthCheckmarkImageXs => {
        thisMonthCheckmarkImageXs.addEventListener('click', () => {
            let closestProgressBar = thisMonthCheckmarkImageXs.closest('.thisMonth-checkmark-xs').previousElementSibling.children[0];
            let closestProgressPercentage = thisMonthCheckmarkImageXs.closest('.thisMonth-checkmark-xs').previousElementSibling.children[1];
            let closestProgressPercentageSign = thisMonthCheckmarkImageXs.closest('.thisMonth-checkmark-xs').previousElementSibling.children[2];
            closestProgressBar.innerHTML = 'COMPLETE';
            closestProgressBar.style.transition = 'color .5s, background .5s';
            closestProgressBar.style.color = 'white';
            closestProgressBar.style.background = 'purple';
            closestProgressPercentage.maxLength = 3;
            closestProgressPercentage.value = 100;
            closestProgressPercentage.style.width = '37px';
            closestProgressPercentage.style.marginLeft = '8px';
            closestProgressPercentage.style.fontSize = '20px';
            closestProgressPercentage.style.color = 'black';
            closestProgressPercentage.style.opacity = '1';
            closestProgressPercentageSign.style.fontSize = '20px';
            closestProgressPercentage.disabled = true;
        });
    });

    nextMonthCheckmarkImagesXs.forEach(nextMonthCheckmarkImageXs => {
        nextMonthCheckmarkImageXs.addEventListener('click', () => {
            let closestProgressBar = nextMonthCheckmarkImageXs.closest('.nextMonth-checkmark-xs').previousElementSibling.children[0];
            let closestProgressPercentage = nextMonthCheckmarkImageXs.closest('.nextMonth-checkmark-xs').previousElementSibling.children[1];
            let closestProgressPercentageSign = nextMonthCheckmarkImageXs.closest('.nextMonth-checkmark-xs').previousElementSibling.children[2];
            closestProgressBar.innerHTML = 'COMPLETE';
            closestProgressBar.style.transition = 'color .5s, background .5s';
            closestProgressBar.style.color = 'white';
            closestProgressBar.style.background = 'purple';
            closestProgressPercentage.maxLength = 3;
            closestProgressPercentage.value = 100;
            closestProgressPercentage.style.width = '37px';
            closestProgressPercentage.style.marginLeft = '8px';
            closestProgressPercentage.style.fontSize = '20px';
            closestProgressPercentage.style.color = 'black';
            closestProgressPercentage.style.opacity = '1';
            closestProgressPercentageSign.style.fontSize = '20px';
            closestProgressPercentage.disabled = true;
        });
    });

@* 8 XS *@

@* 9 XS *@

    const urgentMinusImagesXs = document.querySelectorAll('.urgent-minus-xs');
    const thisMonthMinusImagesXs = document.querySelectorAll('.thisMonth-minus-xs');
    const nextMonthMinusImagesXs = document.querySelectorAll('.nextMonth-minus-xs');
    const urgentTaskEntriesContainerXs = document.querySelector('.urgent-task-entries-container-xs');
    const urgentRemainingEntriesContainerXs = document.querySelector('.urgent-remaining-entries-container-xs');
    const thisMonthTaskEntriesContainerXs = document.querySelector('.thisMonth-task-entries-container-xs');
    const thisMonthRemainingEntriesContainerXs = document.querySelector('.thisMonth-remaining-entries-container-xs');
    const nextMonthTaskEntriesContainerXs = document.querySelector('.nextMonth-task-entries-container-xs');
    const nextMonthRemainingEntriesContainerXs = document.querySelector('.nextMonth-remaining-entries-container-xs');

    urgentMinusImagesXs.forEach(urgentMinusImageXs => {
        urgentMinusImageXs.addEventListener('click', () => {
            let urgentRemainingEntryContainer = urgentMinusImageXs.closest('.urgent-remaining-entry-xs');
            let urgentRemainingEntriesContainerChildren = Array.from(urgentRemainingEntriesContainerXs.children);
            let urgentRemainingEntryIndex = urgentRemainingEntriesContainerChildren.indexOf(urgentRemainingEntryContainer);
            urgentRemainingEntryContainer.remove();
            let urgentTaskEntryContainer = urgentTaskEntriesContainerXs.children[urgentRemainingEntryIndex];
            urgentTaskEntriesContainerXs.removeChild(urgentTaskEntryContainer);
            if (urgentTaskEntriesContainerXs.children.length === 0) {
                let section = document.createElement('section');
                urgentTaskEntriesContainerXs.appendChild(section);
                if (touchDeviceOrNotVariable) {
                    section.style.width = '159.17px';
                };
            } else {
                thisMonthRemainingTextsContainerRectTopXs = thisMonthRemainingTextsContainerRectTopXs - 45;
                nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs - 45;
            };
            if (urgentRemainingEntriesContainerXs.children.length === 0) {
                let section = document.createElement('section');
                section.style.display = 'flex';
                section.style.flexDirection = 'row';
                let sectionSpan1A = document.createElement('span');
                sectionSpan1A.textContent = 'This section is empty...';
                section.appendChild(sectionSpan1A);
                let sectionButton1A = document.createElement('button');
                sectionButton1A.style.color = 'red';
                sectionButton1A.textContent = 'click here to add an entry';
                sectionButton1A.addEventListener('click', addEntryXs);
                section.appendChild(sectionButton1A);
                urgentRemainingEntriesContainerXs.appendChild(section);
            };
        });
    });

    thisMonthMinusImagesXs.forEach(thisMonthMinusImageXs => {
        thisMonthMinusImageXs.addEventListener('click', () => {
            let thisMonthRemainingEntryContainer = thisMonthMinusImageXs.closest('.thisMonth-remaining-entry-xs');
            let thisMonthRemainingEntriesContainerChildren = Array.from(thisMonthRemainingEntriesContainerXs.children);
            let thisMonthRemainingEntryIndex = thisMonthRemainingEntriesContainerChildren.indexOf(thisMonthRemainingEntryContainer);
            thisMonthRemainingEntryContainer.remove();
            let thisMonthTaskEntryContainer = thisMonthTaskEntriesContainerXs.children[thisMonthRemainingEntryIndex];
            thisMonthTaskEntriesContainerXs.removeChild(thisMonthTaskEntryContainer);
            if (thisMonthTaskEntriesContainerXs.children.length === 0) {
                let section = document.createElement('section');
                thisMonthTaskEntriesContainerXs.appendChild(section);
                if (touchDeviceOrNotVariable) {
                    section.style.width = '159.17px';
                };
            } else {
                nextMonthRemainingTextsContainerRectTopXs = nextMonthRemainingTextsContainerRectTopXs - 45;
            };
            if (thisMonthRemainingEntriesContainerXs.children.length === 0) {
                let section = document.createElement('section');
                section.style.display = 'flex';
                section.style.flexDirection = 'row';
                let sectionSpan1A = document.createElement('span');
                sectionSpan1A.textContent = 'This section is empty...';
                section.appendChild(sectionSpan1A);
                let sectionButton1A = document.createElement('button');
                sectionButton1A.style.color = 'teal';
                sectionButton1A.textContent = 'click here to add an entry';
                sectionButton1A.addEventListener('click', addEntryXs);
                section.appendChild(sectionButton1A);
                thisMonthRemainingEntriesContainerXs.appendChild(section);
            };
        });
    });

    nextMonthMinusImagesXs.forEach(nextMonthMinusImageXs => {
        nextMonthMinusImageXs.addEventListener('click', () => {
            let nextMonthRemainingEntryContainer = nextMonthMinusImageXs.closest('.nextMonth-remaining-entry-xs');
            let nextMonthRemainingEntriesContainerChildren = Array.from(nextMonthRemainingEntriesContainerXs.children);
            let nextMonthRemainingEntryIndex = nextMonthRemainingEntriesContainerChildren.indexOf(nextMonthRemainingEntryContainer);
            nextMonthRemainingEntryContainer.remove();
            let nextMonthTaskEntryContainer = nextMonthTaskEntriesContainerXs.children[nextMonthRemainingEntryIndex];
            nextMonthTaskEntriesContainerXs.removeChild(nextMonthTaskEntryContainer);
            if (nextMonthTaskEntriesContainerXs.children.length === 0) {
                let section = document.createElement('section');
                nextMonthTaskEntriesContainerXs.appendChild(section);
                if (touchDeviceOrNotVariable) {
                    section.style.width = '159.17px';
                };
            };
            if (nextMonthRemainingEntriesContainerXs.children.length === 0) {
                let section = document.createElement('section');
                section.style.display = 'flex';
                section.style.flexDirection = 'row';
                let sectionSpan1A = document.createElement('span');
                sectionSpan1A.textContent = 'This section is empty...';
                section.appendChild(sectionSpan1A);
                let sectionButton1A = document.createElement('button');
                sectionButton1A.style.color = 'rgb(195, 87, 219)';
                sectionButton1A.textContent = 'click here to add an entry';
                sectionButton1A.addEventListener('click', addEntryXs);
                section.appendChild(sectionButton1A);
                nextMonthRemainingEntriesContainerXs.appendChild(section);
            };
        });
    });

@* 9 XS *@


@* 10 XS *@       @* SETS BORDERS AND ADJUSTS THE WIDTHS TO CERTAIN ELEMENTS SO THAT THE SCROLL AREA IS FLUSH AND IS VISUALLY APPEALING.  ALSO, THE SECOND PART
                     OF THIS BLOCK CONTROLS THE FUNCTIONALITY THAT HAPPENS WITHIN THE PROGRESS ELEMENTS WHEN THE PERCENTAGE IS AT 100. *@

    const remainingCategoriesMainContainerXs = document.querySelector('.remaining-categories-main-container-xs');
    const taskCategoryMainContainerXs = document.querySelector('.task-category-main-container-xs');

    remainingCategoriesMainContainerXs.addEventListener('scroll', () => {
        let urgentTaskEntriesXs = document.querySelectorAll('.urgent-task-entry-xs');
        let thisMonthTaskEntriesXs = document.querySelectorAll('.thisMonth-task-entry-xs');
        let nextMonthTaskEntriesXs = document.querySelectorAll('.nextMonth-task-entry-xs');
        let urgentTaskEntriesContainerSectionXs = document.querySelector('.urgent-task-entries-container-xs section');
        let thisMonthTaskEntriesContainerSectionXs = document.querySelector('.thisMonth-task-entries-container-xs section');
        let nextMonthTaskEntriesContainerSectionXs = document.querySelector('.nextMonth-task-entries-container-xs section');
        if (remainingCategoriesMainContainerXs.scrollLeft === 0) {
            taskCategoryMainContainerXs.style.borderRight = 'none';
            taskCategoryMainContainerXs.style.boxShadow = 'none';
            urgentTaskEntriesXs.forEach(urgentTaskEntryXs => {
                urgentTaskEntryXs.style.borderRight = '1px solid black';
            });
            thisMonthTaskEntriesXs.forEach(thisMonthTaskEntryXs => {
                thisMonthTaskEntryXs.style.borderRight = '1px solid black';
            });
            nextMonthTaskEntriesXs.forEach(nextMonthTaskEntryXs => {
                nextMonthTaskEntryXs.style.borderRight = '1px solid black';
            });
            if (urgentTaskEntriesContainerSectionXs) {
                urgentTaskEntriesContainerSectionXs.style.width = '159.5px';
            };
            if (thisMonthTaskEntriesContainerSectionXs) {
                thisMonthTaskEntriesContainerSectionXs.style.width = '159.5px';
            };
            if (nextMonthTaskEntriesContainerSectionXs) {
                nextMonthTaskEntriesContainerSectionXs.style.width = '159.5px';
            };
            if (!touchDeviceOrNotVariable) {
                let taskCategoryMainContainerXs = document.querySelector('.task-category-main-container-xs');
                taskCategoryMainContainerXs.style.width = '164.5px';
            };
        } else {
            taskCategoryMainContainerXs.style.borderRight = '.5px solid rgba(150, 150, 150, 1)';
            taskCategoryMainContainerXs.style.boxShadow = '.5px -1px 6px rgba(0, 0, 0, .45)';
            urgentTaskEntriesXs.forEach(urgentTaskEntryXs => {
                urgentTaskEntryXs.style.borderRight = 'none';
            });
            thisMonthTaskEntriesXs.forEach(thisMonthTaskEntryXs => {
                thisMonthTaskEntryXs.style.borderRight = 'none';
            });
            nextMonthTaskEntriesXs.forEach(nextMonthTaskEntryXs => {
                nextMonthTaskEntryXs.style.borderRight = 'none';
            });
            if (urgentTaskEntriesContainerSectionXs) {
                urgentTaskEntriesContainerSectionXs.style.width = '159.17px';
            };
            if (thisMonthTaskEntriesContainerSectionXs) {
                thisMonthTaskEntriesContainerSectionXs.style.width = '159.17px';
            };
            if (nextMonthTaskEntriesContainerSectionXs) {
                nextMonthTaskEntriesContainerSectionXs.style.width = '159.17px';
            };
            if (!touchDeviceOrNotVariable) {
                let taskCategoryMainContainerXs = document.querySelector('.task-category-main-container-xs');
                taskCategoryMainContainerXs.style.width = '165px';
            };
        };
    });

    document.querySelectorAll('.urgent-progress-xs > input').forEach(element => {
        if (element.value === '100') {
            let closestProgressBar = element.closest('.urgent-progress-xs').children[0];
            let closestProgressPercentage = element.closest('.urgent-progress-xs').children[1];
            let closestProgressPercentageSign = element.closest('.urgent-progress-xs').children[2];
            closestProgressBar.innerHTML = 'COMPLETE';
            closestProgressBar.style.transition = 'color .5s, background .5s';
            closestProgressBar.style.color = 'white';
            closestProgressBar.style.background = 'purple';
            closestProgressPercentageSign.style.fontSize = '20px';
            element.maxLength = 3;
            element.style.width = '37px';
            element.style.marginLeft = '8px';
            element.style.fontSize = '20px';
            element.style.color = 'black';
            element.style.opacity = '1';
            element.style.cursor = 'default';
            element.disabled = true;
        };
    });

    document.querySelectorAll('.thisMonth-progress-xs > input').forEach(element => {
        if (element.value === '100') {
            let closestProgressBar = element.closest('.thisMonth-progress-xs').children[0];
            let closestProgressPercentage = element.closest('.thisMonth-progress-xs').children[1];
            let closestProgressPercentageSign = element.closest('.thisMonth-progress-xs').children[2];
            closestProgressBar.innerHTML = 'COMPLETE';
            closestProgressBar.style.transition = 'color .5s, background .5s';
            closestProgressBar.style.color = 'white';
            closestProgressBar.style.background = 'purple';
            closestProgressPercentageSign.style.fontSize = '20px';
            element.maxLength = 3;
            element.style.width = '37px';
            element.style.marginLeft = '8px';
            element.style.fontSize = '20px';
            element.style.color = 'black';
            element.style.opacity = '1';
            element.style.cursor = 'default';
            element.disabled = true;
        };
    });

    document.querySelectorAll('.nextMonth-progress-xs > input').forEach(element => {
        if (element.value === '100') {
            let closestProgressBar = element.closest('.nextMonth-progress-xs').children[0];
            let closestProgressPercentage = element.closest('.nextMonth-progress-xs').children[1];
            let closestProgressPercentageSign = element.closest('.nextMonth-progress-xs').children[2];
            closestProgressBar.innerHTML = 'COMPLETE';
            closestProgressBar.style.transition = 'color .5s, background .5s';
            closestProgressBar.style.color = 'white';
            closestProgressBar.style.background = 'purple';
            closestProgressPercentageSign.style.fontSize = '20px';
            element.maxLength = 3;
            element.style.width = '37px';
            element.style.marginLeft = '8px';
            element.style.fontSize = '20px';
            element.style.color = 'black';
            element.style.opacity = '1';
            element.style.cursor = 'default';
            element.disabled = true;
        };
    });
        
@* 10 XS *@

</script>